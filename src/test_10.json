[
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-PivotTableAdminActions.kql",
        "query": "//Create a pivot table of all actions in Defender for Cloud Apps by your privileged users over the last 7 days\n//Lookup the IdentityInfo table for any users holding a privileged role\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    //Add any roles that you are interested in auditing\n    | where AssignedRoles has_any (\"Global Administrator\", \"Security Administrator\", \"SharePoint Administrator\")\n    | distinct AccountUPN;\nCloudAppEvents\n| where TimeGenerated > ago(7d)\n| extend Operation = tostring(RawEventData.Operation)\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n//Create a new column that adds workload and operation together to make the events more readable\n| extend Activity = strcat(Workload, \" - \", Operation)\n| where UserId in~ (privusers)\n//Create pivot table of all actions by each user\n| evaluate pivot(Activity, count(), UserId)\n\n//Advanced hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nCloudAppEvents\n| where Timestamp > ago(7d)\n| extend Operation = tostring(RawEventData.Operation)\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n//Advanced hunting doesn't retain role information about users, but you can add a list of users in manually to create a table\n| where UserId in~ (\"admin1@domain.com\", \"admin2@domain.com\")\n//Create a new column that adds workload and operation together to make the events more readable\n| extend Activity = strcat(Workload, \" - \", Operation)\n//Create pivot table of all actions by each user\n| evaluate pivot(Activity, count(), UserId)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-PivotTableAdminActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e0ebd9f6-aab9-4928-b34f-5c8d089b715f",
        "query_hash": "d8eb17f554e939949114f13fb911adb86178861b2a775f952afd9e72b1b6a35b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CAzure-ResourceLockAddedorRemoved.kql",
        "query": "//Detect when a resource lock is added or removed from an Azure resource\n\n//Data connector required for this query - Azure Activity \n\nAzureActivity\n| where OperationNameValue in (\"MICROSOFT.AUTHORIZATION/LOCKS/WRITE\", \"MICROSOFT.AUTHORIZATION/LOCKS/DELETE\")\n| where ActivityStatusValue == \"Success\"\n| extend Activity = case(OperationNameValue == \"MICROSOFT.AUTHORIZATION/LOCKS/WRITE\", strcat(\"Resource Lock Added\"),\n    OperationNameValue == \"MICROSOFT.AUTHORIZATION/LOCKS/DELETE\", strcat(\"Resource Lock Removed\"),\n    \"unknown\")\n| extend ResourceGroup = tostring(parse_json(Properties).resourceGroup)\n| extend AzureResource = tostring(parse_json(Properties).resourceProviderValue)\n| extend x = tostring(parse_json(Properties).resource)\n| parse x with ResourceName \"/\" *\n| parse x with * \"microsoft.authorization/\" LockName\n| project\n    TimeGenerated,\n    Activity,\n    ResourceName,\n    ['Azure Resource']=AzureResource,\n    ['Azure Subscription Id']=SubscriptionId,\n    ['Azure Resource Group']=ResourceGroup,\n    LockName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Azure-ResourceLockAddedorRemoved",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b0fba90e-6fa8-4124-bcc1-f076321d5eb3",
        "query_hash": "88b82e644765270392b56b57febf143a0ca39d784457ade747f97bbe7454d66f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n'Name=Reprise103,UPNSuffix=testdomain.com,AadTenantId=331c1234-a841-43e5-1d31-12220a5bcee1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User 2,Type=account'\n]\n;\nExampleText\n| extend Name = split(TestData,',')[0]\n| extend DomainSuffix = split(TestData,',')[1]\n| extend AzureADTenantId = split(TestData,',')[2]\n| extend AzureADUserId = split(TestData,',')[3]\n| extend DisplayName = split(TestData,',')[4]\n| extend AccountType = split(TestData,',')[5]\n| project Name, DomainSuffix, AzureADTenantId, AzureADUserId, DisplayName, AccountType\n| where Name contains \"Reprise99\"",
        "source_type": "markdown",
        "source_index": 59,
        "query_name": "README_59",
        "context": "\nIf we know our data location within the string then we can split it directly into named columns.\n\n![Split 2](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/split2.png?raw=true)\n\nOnce we have split our data, we can query it as though it was structured from the outset. So if we add a second record to our data, then query on specifc matches we will find what we are after.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "d7bdc719-db17-4534-98d7-46a6dbe78ee8",
        "query_hash": "e04587d898f723719a9d361f3b5d43eeeed92acadce7d1f7e37a6b309091907c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SummarizeTeamsCreatedDeleted.kql",
        "query": "//Create a weekly summary of Teams created and deleted in your Office 365 tenant\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"TeamCreated\", \"TeamDeleted\")\n| summarize\n    ['Count of Teams Created']=dcountif(TeamName, Operation == \"TeamCreated\"),\n    ['List of Teams Created']=make_set_if(TeamName, Operation == \"TeamCreated\"),\n    ['Count of Teams Deleted']=dcountif(TeamName, Operation == \"TeamDeleted\"),\n    ['List of Teams Deleted']=make_set_if(TeamName, Operation == \"TeamDeleted\")\n    by Week=startofweek(TimeGenerated)\n| sort by Week desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SummarizeTeamsCreatedDeleted",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fe16fc73-a049-461e-9500-1d7cb9007290",
        "query_hash": "2a88adceb83744b56d1974dae10c42098f44da070f891d5cf67ec8b9a9a9630d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeGuestDomainbyType.kql",
        "query": "//Summarize guest activity by external Azure AD guests (those that belong to another Azure AD tenant) vs External Guests (such as Gmail) to your tenant\n//For each domain list the total number of signins and distinct user \n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where UserType == \"Guest\"\n| where ResultType == 0\n| extend ['Guest Domain'] = tostring(split(UserPrincipalName, \"@\")[1])\n| summarize\n    ['External Azure AD Guest Logins']=countif(ResourceTenantId != HomeTenantId),\n    ['External Azure AD Guest Distinct Users']=dcountif(UserPrincipalName, ResourceTenantId != HomeTenantId),\n    ['External Guest Logins']=countif(ResourceTenantId == HomeTenantId),\n    ['External Guest Distinct Users']=dcountif(UserPrincipalName, ResourceTenantId == HomeTenantId)\n    by ['Guest Domain']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeGuestDomainbyType",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "11c1b9ca-6c1c-4bdc-8eaa-a3facc3d3ed6",
        "query_hash": "4a44ca5e719fb084262265a3c617ec7d8f023a19f669ee61b79aa919b28e5fec",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to service principal\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where TargetResources[0].type == \"User\"\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, ['Service Principal Name'], ['Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 16,
        "query_name": "### Detection Query (User as actor, user as target)",
        "context": "\n\n## BARK function - Test-MGAddSelfAsOwnerOfSP \n\nOwners of service principals can change settings on that object, for instance they can add or remove users who have access to sign into that service principal. They can change SSO settings and change permissions on the service principal.\n\nFor this abuse, the actor can be either a user or a service principal. The target can also be either a user or a service principal.\n\n### Detection Query (User as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "47bc03e9-d2ce-427a-a799-d0edcec62cb1",
        "query_hash": "d7cc7b54dfe0e752885b2d833672c587df342564ea955e62e785d5edbc66b869",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeConditionalAccessPoliciesfailures.kql",
        "query": "//Create a summary showing which of your Azure AD conditional access policies are preventing the most signins and for what reasons\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (7d)\n| project TimeGenerated, ConditionalAccessPolicies, ResultType, ResultDescription\n| mv-expand ConditionalAccessPolicies\n| extend CAResult = tostring(ConditionalAccessPolicies.result)\n| extend ['Conditional Access Policy Name'] = tostring(ConditionalAccessPolicies.displayName)\n| where CAResult == \"failure\"\n| summarize ['Count of Failures']=count()by ['Conditional Access Policy Name'], ResultType, ResultDescription\n| sort by ['Count of Failures'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeConditionalAccessPoliciesfailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7c8e52c0-def4-4751-a8e9-671eebc20296",
        "query_hash": "1007d7955776d29deb1cfd7ff8ad3ea5ea5e021dd2863238da224c175b376ebd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectCertUtilConnectingExternally.kql",
        "query": "//Detects when certutil is used to connect to a public IP. This could indicate abuse of cert util, see - https://www.avira.com/en/blog/certutil-abused-by-attackers-to-spread-threats\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIPType,\n    LocalIP,\n    RemoteIPType,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort\n| where InitiatingProcessCommandLine contains \"certutil\"\n| where RemoteIPType == \"Public\"\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIPType,\n    LocalIP,\n    RemoteIPType,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort\n| where InitiatingProcessCommandLine contains \"certutil\"\n| where RemoteIPType == \"Public\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectCertUtilConnectingExternally",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4eb1a989-83d2-44a2-9f6c-f4dfb1f31ee6",
        "query_hash": "c76da23b26d172981b5d324232edae919c14585c8131640566ad5fa7cf6bcbfa",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeExternalAADGuestsvsExternalGuests.kql",
        "query": "//Visualize signins from External Azure AD guests (those that belong to another Azure AD tenant) vs External Guests (such as Gmail) to your tenant\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (45d)\n| where UserType == \"Guest\"\n| summarize\n    ['External Guests']=countif(ResourceTenantId == HomeTenantId),\n    ['External Azure AD Guests']=countif(ResourceTenantId != HomeTenantId)\n    by bin(TimeGenerated, 1d)\n| render timechart with (title=\"External Azure AD Guests vs External Guests\", ytitle=\"Count\")\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeExternalAADGuestsvsExternalGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "da36cf45-4fba-484e-ac9a-a98088b0836a",
        "query_hash": "bd81f7d826576984985f2ab36ac58f2a6e2859e6cf0e358dbd22b6472bf8d86c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeRDPConnections.kql",
        "query": "//Summarize your devices by their RDP activity. The data is sorted to show total outbound RDP connections, a count of distinct RDP connections and the list of IP's connected to.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Data is sorted by the devices with the most unique outbound RDP connections. Those devices have the biggest lateral movement blast radius.\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(30d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n//Exclude Defender for Identity that uses an initial RDP connection to map your network\n| where InitiatingProcessCommandLine <> \"\\\"Microsoft.Tri.Sensor.exe\\\"\"\n| summarize\n    ['RDP Outbound Connection Count']=count(),\n    ['RDP Distinct Outbound Endpoint Count']=dcount(RemoteIP),\n    ['RDP Outbound Endpoints']=make_set(RemoteIP)\n    by DeviceName\n| sort by ['RDP Distinct Outbound Endpoint Count'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(30d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n//Exclude Defender for Identity that uses an initial RDP connection to map your network\n| where InitiatingProcessCommandLine <> \"\\\"Microsoft.Tri.Sensor.exe\\\"\"\n| summarize\n    ['RDP Outbound Connection Count']=count(),\n    ['RDP Distinct Outbound Endpoint Count']=dcount(RemoteIP),\n    ['RDP Outbound Endpoints']=make_set(RemoteIP)\n    by DeviceName\n| sort by ['RDP Distinct Outbound Endpoint Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeRDPConnections",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2fa11654-ce7b-4452-9646-700afce24375",
        "query_hash": "8c2fca65cd7884333babfb8166724b4c2c9ecc15d1b16a4e38d4ce285e56fd99",
        "query_version": 0
    }
]