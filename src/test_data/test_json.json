[
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAnamoly-HigherThanExpectedSysLog.kql",
        "query": "//Returns any machines with a significant increase in syslog events over the last 5 days in every 30 minutes of data\nlet starttime = 5d;\nlet timeframe = 30m;\nlet Computers=Syslog\n    | where TimeGenerated >= ago(starttime)\n    | summarize EventCount=count() by Computer, bin(TimeGenerated, timeframe)\n    | where EventCount > 1500\n    | order by TimeGenerated\n    | summarize EventCount=make_list(EventCount), TimeGenerated=make_list(TimeGenerated) by Computer\n    | extend outliers=series_decompose_anomalies(EventCount, 2)\n    | mv-expand TimeGenerated, EventCount, outliers\n    | where outliers == 1\n    | distinct Computer\n;\nSyslog\n| where TimeGenerated >= ago(starttime)\n| where Computer in (Computers)\n| summarize EventCount=count() by Computer, bin(TimeGenerated, timeframe)\n| render timechart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Anamoly-HigherThanExpectedSysLog",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5abcb232-1725-42de-986d-87155598b7d0",
        "query_hash": "36a7efbc4060d3c1036532b228335f3aa8c6dbe5eaf837cff8f5405e92350a41",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAWS-PublicIPAddedtoInstance.kql",
        "query": "//Query to find public IP addresses associated to AWS instances\nAWSCloudTrail\n| where EventName has \"AllocateAddress\"\n| extend IPAssigned = tostring(parse_json(ResponseElements).publicIp)\n| extend AllocationID = tostring(parse_json(ResponseElements).allocationId)\n| project TimeGenerated, UserIdentityArn, UserIdentityAccountId, IPAssigned, AllocationID",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AWS-PublicIPAddedtoInstance",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6ca1ee87-3728-45fb-bc19-c8bd66b18ac7",
        "query_hash": "19854f5a424c7e6d3f4490b709663692ab2d33a0ddae5330a541e3249387f753",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDuo-LogParserwithIdentityInfo.kql",
        "query": "//Parser for Duo data sent to a custom table and join to identity info to correlate legacy usernames with userprincipalname\nlet id=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | extend DuoUserName = AccountName\n    | project AccountUPN, DuoUserName;\nDuoLogs_CL\n| where TimeGenerated > ago(1d)\n| extend logs = split(SyslogMessage_s, \"|\")\n| extend vendor = logs[1]\n| extend app = logs[2]\n| extend version = logs[3]\n| extend event = logs[4]\n| extend msg = (logs[5])\n| where event == \"authentication\"\n| extend DuoTime = EventTime_t\n| extend DuoApplication = extract(\"cs1=(.*?) c\", 1, SyslogMessage_s)\n| extend DuoIPAddr = extract(\"src=(.*?) c\", 1, SyslogMessage_s)\n| extend DuoMethod = extract(\"cs3=(.*?) o\", 1, SyslogMessage_s)\n| extend DuoOutcome = extract(\"outcome=(.*?) r\", 1, SyslogMessage_s)\n| parse SyslogMessage_s with * \"duser=\" DuoUserName\n| join kind=inner id on DuoUserName\n| project\n    DuoTime,\n    DuoUserName,\n    AccountUPN,\n    DuoIPAddr,\n    DuoApplication,\n    DuoOutcome,\n    DuoMethod\n| sort by DuoTime desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Duo-LogParserwithIdentityInfo",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8d839310-99be-458a-8078-62ed43c14611",
        "query_hash": "5fe4be8a3ebc9610cb5e01f1a789274857082233be0c8f9852275cbb023a292a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSysLog-DetectAnomaliesInEvents.kql",
        "query": "//Detect potential anomalous increase in syslog volume, adjust time frames to suit\nlet Computers=Syslog_CL\n    | where TimeGenerated >= ago(4d)\n    | summarize EventCount=count() by Computer, bin(TimeGenerated, 15m)\n    | where EventCount >= 1000\n    | order by TimeGenerated\n    | summarize EventCount=make_list(EventCount), TimeGenerated=make_list(TimeGenerated) by Computer\n    | extend outliers=series_decompose_anomalies(EventCount, 2)\n    | mv-expand TimeGenerated, EventCount, outliers\n    | where outliers == 1\n    | distinct Computer\n;\nSyslog_CL\n| where TimeGenerated >= ago(4d)\n| where Computer in (Computers)\n| summarize EventCount=count() by Computer, bin(TimeGenerated, 15m)\n| render timechart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SysLog-DetectAnomaliesInEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "bc77ec91-dde4-4a77-8fb2-d5be12e7e253",
        "query_hash": "3e666270c4fb51fd669ce436338edd19c54179986a1af64be25f760892d49faa",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CAADPasswordProtection-AllEvents.kql",
        "query": "//If you add \"Microsoft-AzureADPasswordProtection-DCAgent/Admin\" as a log source to Sentinel/Log Analytics you can query Azure AD Password Protection events\nEvent\n| where Source == \"Microsoft-AzureADPasswordProtection-DCAgent\"\n| where EventID in (\"10014\", \"10015\", \"10016\", \"30002\", \"30004\", \"30026\", \"10024\", \"30008\", \"30010\", \"30028\", \"30024\", \"30003\", \"30005\", \"30027\", \"30022\", \"30007\", \"10025\", \"30009\", \"30029\", \"30023\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AADPasswordProtection-AllEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "773daede-6cdc-4421-bfdb-61e3d843b697",
        "query_hash": "9f4b6c208d893a001e88f70c0c3e38c3004a2a10a35ae7645ecb8dd79b014e06",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-AccountPreAuthChanges.kql",
        "query": "//Detect when Kerberos preauthentication is enabled or disabled for a user\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where EventID == 4738\n| where AccountType == \"User\"\n| where UserAccountControl has_any (\"2064\", \"2096\")\n| extend Action = case(UserAccountControl has \"2096\", strcat(\"Kerberos preauthentication disabled\"),\n    UserAccountControl has \"2064\", strcat(\"Kerberos preauthentication enabled\"),\n    \"unknown\")\n| project TimeGenerated, Actor=SubjectAccount, User=TargetAccount, Action\n\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-AccountPreAuthChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e47ff098-8ce8-40b1-902a-5533784a5312",
        "query_hash": "657735b0d38ac0ffce22b174c75b259734aa018178ff32784b9e78bb3e8b1af3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-AccountSensitivityChanged.kql",
        "query": "//Detect when the 'account is sensitive and cannot be delegated' flag on an account is changed\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| project TimeGenerated, EventID, TargetAccount, SubjectAccount, UserAccountControl\n| where EventID == \"4738\"\n| where UserAccountControl has_any(\"2094\", \"2062\")\n| extend Activity = case\n    (UserAccountControl contains \"2094\", strcat(\"Account Sensitivity Enabled\"),\n     UserAccountControl contains \"2062\", strcat(\"Account Sensitivity Disabled\"),\n    \"Unknown\")\n| project TimeGenerated, Target=TargetAccount, Actor=SubjectAccount, Activity",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-AccountSensitivityChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2dd575f0-33e9-4611-b7f6-189667cff48a",
        "query_hash": "1fe26cc03f73f84a2cb1e8d0938eeac065afd6c4cf08cf468146079b9b642cd7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-AccountSetPasswordNotRequired.kql",
        "query": "//Alert when an Active Directory account is set to password not required\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\n\nSecurityEvent\n| project TimeGenerated, EventID, TargetAccount, SubjectAccount, UserAccountControl\n| where EventID == \"4738\"\n| where UserAccountControl has (\"2082\")\n| extend Activity = strcat(\"Account set to password not required\")\n| project TimeGenerated, Target=TargetAccount, Actor=SubjectAccount, Activity\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-AccountSetPasswordNotRequired",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4d08ee34-ffb2-41be-ad78-b3cfeeef5964",
        "query_hash": "5edf25ab242a2413e576faa7208dd07bfd1083860efff90dae1d927ed005cb12",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-AnomalousIPCRecon.kql",
        "query": "//Use series_decompose_anomalies to detect potentially anomalous IPC$ recon events. Configure start time as your anomaly learning period and timeframe as your detection period.\n// Detection threshold determines the sensitivity, the higher the threshold value the higher the anomaly required to detect\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\n\nlet starttime = 7d;\nlet timeframe = 30m;\nlet detectionthreshold = 2;\nlet outliers = \nSecurityEvent\n| project TimeGenerated, Account, Computer, EventID, ShareName\n| where TimeGenerated > ago(starttime)\n// Exclude known Accounts that often connect to various machines, such as Defender for ID or vulnerability management software\n| where Account !in (\"DOMAIN\\\\Account1\")\n| where EventID == \"5140\"\n| where ShareName == \"\\\\\\\\*\\\\IPC$\"\n| order by TimeGenerated\n| summarize Events=count()by Account, bin(TimeGenerated, timeframe)\n| summarize EventCount=make_list(Events),TimeGenerated=make_list(TimeGenerated) by Account\n| extend outliers=series_decompose_anomalies(EventCount, detectionthreshold)\n| mv-expand TimeGenerated, EventCount, outliers\n| where outliers == 1\n| distinct Account;\nSecurityEvent\n| project TimeGenerated, Account, Computer, EventID, ShareName, IpAddress\n| where TimeGenerated > ago(timeframe)\n| where EventID == \"5140\"\n| where ShareName == \"\\\\\\\\*\\\\IPC$\"\n// Exclude computer objects connecting to themselves by parsing DOMAIN\\Computer$ objects and Computer.DOMAIN.COM objects and excluding matches\n| parse Account with * \"\\\\\" AccountParse \"$\"\n| parse Computer with ComputerParse \".\" * \n| where AccountParse != ComputerParse\n// Find remaining outliers and make a set\n| where Account in (outliers)\n| summarize AccountActivity=make_set(Computer) by Account",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-AnomalousIPCRecon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9cd63ffb-8150-442d-9fdc-9d4b41eaaf63",
        "query_hash": "313b49a879fef29c2c1dd396823429aca0ced12f4a44e4439c3910b92478a9e9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-DailySummaryofGroupAdditions.kql",
        "query": "//Create a daily report of users being added to on premise Active Directory groups, summarized by group name\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago (7d)\n| where AccountType == \"User\"\n| where EventID in (4728, 4732, 4756, 4761, 4746, 4751)\n| project TimeGenerated, MemberName, ['Group Name']=TargetUserName, EventID\n| parse MemberName with * 'CN=' UserAdded ',' *\n| summarize UsersAdded=make_set(UserAdded) by ['Group Name'], startofday(TimeGenerated)\n| sort by ['Group Name'] asc, TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-DailySummaryofGroupAdditions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0bf8cabe-a359-4da3-98e3-081600484920",
        "query_hash": "796562b69e967a3733ffa25cb821e44be340520655e82d70ead83d22351c23eb",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-DetectPrivilegedAADAdminPasswordChange.kql",
        "query": "//Detects when a user with a privileged Azure AD role has had their on premises Active Directory password changed by someone other than themselves.\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet timeframe=7d;\n//First find any users that hold privileged Azure AD roles\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| where isnotempty(AssignedRoles)\n| where AssignedRoles != \"[]\"\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| project AccountUPN, AccountName, AccountSID\n//Join those users based on AccountSID to on premises Active Directory password reset events\n| join kind=inner (\n    SecurityEvent\n    | where TimeGenerated > ago(timeframe)\n    | where EventID == \"4724\"\n    | project\n        TimeGenerated,\n        Activity,\n        SubjectAccount,\n        TargetAccount,\n        TargetSid,\n        SubjectUserSid\n    )\n    on $left.AccountSID == $right.TargetSid\n| where SubjectUserSid != TargetSid\n//Summarize event data to make it easy to read\n| project ['Time of Password Reset']=TimeGenerated, Activity, Actor=SubjectAccount, ['Target UserPrincipalName']=AccountUPN,['Target AccountName']=TargetAccount",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-DetectPrivilegedAADAdminPasswordChange",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2ae33ce3-1705-4e52-9961-198463b77634",
        "query_hash": "5531cba976d3f87144ca8e57ed7316503269ea30df8bed1d77a07a14710f53cf",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-GPOInheritanceChanged.kql",
        "query": "//Detect when group policy inheritance is either allowed or blocked\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| project TimeGenerated, EventID, EventData, SubjectAccount\n| where EventID == \"5136\"\n| parse EventData with * 'ObjectDN\">' OU '</Data' *\n| parse EventData with * 'AttributeLDAPDisplayName\">' LDAPAttribute '</Data' *\n| parse EventData with * 'AttributeValue\">' AttributeValue '</Data' *\n| parse EventData with * 'OperationType\">%%' OperationType '</Data' *\n| project\n    TimeGenerated,\n    Actor=SubjectAccount,\n    OU,\n    LDAPAttribute,\n    AttributeValue,\n    OperationType\n| where LDAPAttribute == \"gPOptions\"\n| where AttributeValue == \"1\"\n| extend Activity = case\n(OperationType == \"14674\" and AttributeValue == \"1\", strcat(\"Group Policy Inheritance Blocked\"),\n OperationType == \"14675\" and AttributeValue == \"1\", strcat(\"Group Policy Inheritance Allowed\"),\n \"Unknown\")\n| project TimeGenerated, Actor, OU, Activity\n\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-GPOInheritanceChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1dd19b88-a4d2-4a8c-8fd4-13c06ff59ac7",
        "query_hash": "180a4fa65b13c9a98cf93890c14287bb0d561c40bc427a9957157dd4d9b820d1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-LogonToDeviceListChanged.kql",
        "query": "//Alert when the 'Log on to' device list is changed for a user\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where EventID == 4738\n| where AccountType == \"User\"\n//Include domain accounts only (excluding local accounts)\n| where TargetDomainName == SubjectDomainName\n| extend ['Allowed Devices'] = case(isnotempty(UserWorkstations) and UserWorkstations != \"-\" and UserWorkstations != \"%%1793\", split(UserWorkstations, \",\"),\n    (isnotempty(UserWorkstations) and UserWorkstations == \"%%1793\"), strcat(\"User can log onto all devices\"),\n    \"unknown\")\n//Exclude other 4738 events where the device list isn't changed\n| where ['Allowed Devices'] != \"unknown\"\n| project TimeGenerated, Actor=SubjectAccount, User=TargetAccount, ['Allowed Devices']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-LogonToDeviceListChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "55d374fa-5a29-4f47-a684-cab24a3909cc",
        "query_hash": "ebf4b574d1d9ac5b1fd8980c7ce56128d2626b4da94364e3b60cec8c0c429caa",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-SummarizePrivilegesAssignedonLogon.kql",
        "query": "//Create a summary of your computers and the accounts that have logged on with special privileges over the last 30 days\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago (30d)\n| project TimeGenerated, EventID, Account, AccountType, PrivilegeList, Computer\n| where EventID == \"4672\"\n| where Account != \"NT AUTHORITY\\\\SYSTEM\" and Account !has \"Window Manager\"\n| where AccountType == \"User\"\n//The privilege list is stored in a string of text that we need to split\n| extend Privs=extract_all(@\"Se(.*?)Privilege\", PrivilegeList)\n//Once we retrieve the privileges from the string of text we can recreate the proper naming\n| mv-expand Privs\n| extend Privilege=strcat('Se', Privs, 'Privilege')\n| project TimeGenerated, Account, Computer, Privilege\n| summarize ['List of Privileges']=make_set(Privilege) by Computer, Account\n| sort by Computer asc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-SummarizePrivilegesAssignedonLogon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "398d0100-39ef-4bdb-aa29-03d159877607",
        "query_hash": "31a530e07fcb04f559c4eca21bbdaad5e02c25c31c935a171312f319245e9f56",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-SummarizeRDPActivity.kql",
        "query": "//Creates a list of computers that your users have connected to via RDP and the total count of distinct computers each user has connected to\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago(7d)\n| where EventID == \"4624\"\n| where LogonType == 10\n//Extend new column that drops Account to lower case so users are correctly summarized, i.e User123 and user123 are combined\n| extend AccountName=tolower(Account)\n| summarize\n    ['Count of Computers']=dcount(Computer),\n    ['List of Computers']=make_set(Computer)\n    by AccountName\n| sort by ['Count of Computers'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-SummarizeRDPActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e9b07b55-2882-4139-b51c-c166ee2ec149",
        "query_hash": "0c016a8706f32a51d123ca9a23328c2eaa1a71a5ab7f0cea63c37cfa92f43679",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-UACFlagParser.kql",
        "query": "//Creates a parser for all user account control changes changing the code into a readable message\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where isnotempty(UserAccountControl) and UserAccountControl != \"-\"\n| where AccountType == \"User\"\n| extend x = extract_all(@\"([0-9]{4})\", UserAccountControl)\n| mv-expand x\n| extend ['User Account Flag Description'] = case\n    (\n    x == \"2048\", strcat(\"Account Enabled\"),\n    x == \"2049\", strcat(\"Home Directory Required - Disabled\"),\n    x == \"2050\", strcat(\"Password Not Required - Disabled\"),\n    x == \"2051\", strcat(\"Temp Duplicate Account - Disabled\"),\n    x == \"2052\", strcat(\"Normal Account - Disabled\"),\n    x == \"2053\", strcat(\"MNS Logon Account - Disabled\"),\n    x == \"2054\", strcat(\"Interdomain Trust Account - Disabled\"),\n    x == \"2055\", strcat(\"Workstation Trust Account - Disabled\"),\n    x == \"2056\", strcat(\"Server Trust Account - Disabled\"),\n    x == \"2057\", strcat(\"Don't Expire Password - Disabled\"),\n    x == \"2058\", strcat(\"Account Unlocked\"),\n    x == \"2059\", strcat(\"Encrypted Text Password Allowed - Disabled\"),\n    x == \"2060\", strcat(\"Smartcard Required - Disabled\"),\n    x == \"2061\", strcat(\"Trusted For Delegation - Disabled\"),\n    x == \"2062\", strcat(\"Not Delegated - Disabled\"),\n    x == \"2063\", strcat(\"Use DES Key Only - Disabled\"),\n    x == \"2064\", strcat(\"Don't Require Preauth - Disabled\"),\n    x == \"2065\", strcat(\"Password Expired - Disabled\"),\n    x == \"2066\", strcat(\"Trusted To Authenticate For Delegation - Disabled\"),\n    x == \"2067\", strcat(\"Exclude Authorization Information - Disabled\"),\n    x == \"2068\", strcat(\"Undefined UserAccountControl Bit 20 - Disabled\"),\n    x == \"2069\", strcat(\"Protect Kerberos Service Tickets with AES Keys - Disabled\"),\n    x == \"2070\", strcat(\"Undefined UserAccountControl Bit 22 - Disabled\"),\n    x == \"2071\", strcat(\"Undefined UserAccountControl Bit 23 - Disabled\"),\n    x == \"2072\", strcat(\"Undefined UserAccountControl Bit 24 - Disabled\"),\n    x == \"2073\", strcat(\"Undefined UserAccountControl Bit 25 - Disabled\"),\n    x == \"2074\", strcat(\"Undefined UserAccountControl Bit 26 - Disabled\"),\n    x == \"2075\", strcat(\"Undefined UserAccountControl Bit 27 - Disabled\"),\n    x == \"2076\", strcat(\"Undefined UserAccountControl Bit 28 - Disabled\"),\n    x == \"2077\", strcat(\"Undefined UserAccountControl Bit 29 - Disabled\"),\n    x == \"2078\", strcat(\"Undefined UserAccountControl Bit 30 - Disabled\"),\n    x == \"2079\", strcat(\"Undefined UserAccountControl Bit 31 - Disabled\"),\n    x == \"2080\", strcat(\"Account Disabled\"),\n    x == \"2081\", strcat(\"Home Directory Required - Enabled\"),\n    x == \"2082\", strcat(\"Password Not Required - Enabled\"),\n    x == \"2083\", strcat(\"Temp Duplicate Account - Enabled\"),\n    x == \"2084\", strcat(\"Normal Account - Enabled\"),\n    x == \"2085\", strcat(\"MNS Logon Account - Enabled\"),\n    x == \"2086\", strcat(\"Interdomain Trust Account - Enabled\"),\n    x == \"2087\", strcat(\"Workstation Trust Account - Enabled\"),\n    x == \"2088\", strcat(\"Server Trust Account - Enabled\"),\n    x == \"2089\", strcat(\"Don't Expire Password - Enabled\"),\n    x == \"2090\", strcat(\"Account Locked\"),\n    x == \"2091\", strcat(\"Encrypted Text Password Allowed - Enabled\"),\n    x == \"2092\", strcat(\"Smartcard Required - Enabled\"),\n    x == \"2093\", strcat(\"Trusted For Delegation - Enabled\"),\n    x == \"2094\", strcat(\"Not Delegated - Enabled\"),\n    x == \"2095\", strcat(\"Use DES Key Only - Enabled\"),\n    x == \"2096\", strcat(\"Don't Require Preauth - Enabled\"),\n    x == \"2097\", strcat(\"Password Expired - Enabled\"),\n    x == \"2098\", strcat(\"Trusted To Authenticate For Delegation - Enabled\"),\n    x == \"2099\", strcat(\"Exclude Authorization Information - Enabled\"),\n    x == \"2100\", strcat(\"Undefined UserAccountControl Bit 20 - Enabled\"),\n    x == \"2101\", strcat(\"Protect Kerberos Service Tickets with AES Keys - Enabled\"),\n    x == \"2102\", strcat(\"Undefined UserAccountControl Bit 22 - Enabled\"),\n    x == \"2103\", strcat(\"Undefined UserAccountControl Bit 23 - Enabled\"),\n    x == \"2104\", strcat(\"Undefined UserAccountControl Bit 24 - Enabled\"),\n    x == \"2105\", strcat(\"Undefined UserAccountControl Bit 25 - Enabled\"),\n    x == \"2106\", strcat(\"Undefined UserAccountControl Bit 26 - Enabled\"),\n    x == \"2107\", strcat(\"Undefined UserAccountControl Bit 27 - Enabled\"),\n    x == \"2108\", strcat(\"Undefined UserAccountControl Bit 28 - Enabled\"),\n    x == \"2109\", strcat(\"Undefined UserAccountControl Bit 29 - Enabled\"),\n    x == \"2110\", strcat(\"Undefined UserAccountControl Bit 30 - Enabled\"),\n    x == \"2111\", strcat(\"Undefined UserAccountControl Bit 31 - Enabled\"),\n    \"Unknown\")\n| project\n    TimeGenerated,\n    TargetAccount,\n    Actor=SubjectAccount,\n    UserAccountControl=x,\n    ['User Account Flag Description']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-UACFlagParser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d4341d34-b91e-4c72-8a45-32579d862f6b",
        "query_hash": "8fb877d10ab88778cf6a0e130847c56baf929be2d439d9f77a7d781d104894e3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-UnconstrainedDelegationEnabled.kql",
        "query": "//Detects when unconstrained kerberos delegation is enabled on a computer object\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where EventID == \"4742\"\n| parse EventData with * 'NewUacValue\">' NewUacValue '</Data>' *\n| parse EventData with * 'TargetUserName\">' ComputerName '</Data>' *\n| parse EventData with * 'SubjectUserName\">' Actor '</Data>' *\n| where NewUacValue == \"0x2080\"\n| project TimeGenerated, Activity, ComputerName, Actor",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-UnconstrainedDelegationEnabled",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "168ca4a5-34e3-4186-adba-45cc25ded820",
        "query_hash": "43f28a90577f50da3c7c6cfdb835e30ed6b81b0d6bae04e3291f302a5cc3746a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-UnconstrainedDelegationtoUser.kql",
        "query": "//Detects when unconstrained kerberos delegation is enabled on a user object\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where EventID == \"4738\"\n| parse EventData with * 'NewUacValue\">' NewUacValue '</Data>' *\n| parse EventData with * 'TargetUserName\">' UserName '</Data>' *\n| parse EventData with * 'SubjectUserName\">' Actor '</Data>' *\n| where NewUacValue == \"0x2010\"\n| project TimeGenerated, Activity, UserName, Actor",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-UnconstrainedDelegationtoUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6721f75c-692a-4281-8590-61d1f5a5dae7",
        "query_hash": "4bc453f54e846116d50edd8391b46c405d619900c5c3b57b1c1006c957027ef0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CActive%20Directory%5CSecurityEvent-VisualizeAccountsCreatedDisabledDeleted.kql",
        "query": "//Visualize Active Directory accounts created, disabled and deleted per day\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago(30d)\n| where AccountType == \"User\"\n| project TimeGenerated, Account, EventID, TargetAccount\n| where EventID in (\"4720\", \"4725\", \"4726\")\n| where TargetAccount !endswith \"$\"\n| summarize\n    ['Accounts Created']=countif(EventID == \"4720\"),\n    ['Accounts Deleted']=countif(EventID == \"4726\"),\n    ['Accounts Disabled']=countif(EventID == \"4725\")\n    by startofday(TimeGenerated)\n| render columnchart\n    with (\n    kind=unstacked,\n    xtitle=\"Day\",\n    ytitle=\"Count\",\n    title=\"Active Directory User Accounts Created, Disabled and Deleted per day\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityEvent-VisualizeAccountsCreatedDisabledDeleted",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a702dab6-b6be-4615-9011-bfe1c4887a8e",
        "query_hash": "4e11356869fa55a396f5d62607713abe802264154b824df2fd756e4452a1953f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-AccessPackageCreated.kql",
        "query": "//Detect when an Azure AD Entitlement Package is created. You may want to review to see what resources and roles have been included in the package.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName == \"Create access package\"\n| where TargetResources[0].type == \"AccessPackage\"\n| extend AccessPackageName = tostring(TargetResources[0].displayName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project TimeGenerated, OperationName, AccessPackageName, Actor",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-AccessPackageCreated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b48f0f49-9e1b-4a27-a13d-5f6e58d51efd",
        "query_hash": "1c3d3f8120b7db019b906a8180e44617c897a93cb3099aec3fe0bf42251936b2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-AllowedBlockedDomainListChanges.kql",
        "query": "//Detect when a domain is added or removed to either the allow or block list in Azure AD external identities\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Update policy\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties  \n| extend newValue = parse_json(modifiedProperties).newValue\n| mv-expand todynamic(newValue)\n| where newValue has \"InvitationsAllowedAndBlockedDomainsPolicy\"\n| project TimeGenerated, OperationName, Actor, ['New Domain Policy']=newValue\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-AllowedBlockedDomainListChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0d9a8c11-c25a-4ba7-bc23-19d73190f9c3",
        "query_hash": "2d4329b2119efdf4021458b69343c04153390245cc9f10166c719789dd1da7b1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-AppProxySettoPassThrough.kql",
        "query": "//Alert when an application using Azure AD app proxy is set to pass through as it's pre-auth setting\nAuditLogs\n| where LoggedByService == \"Application Proxy\"\n| where OperationName == \"Update application\"\n| where Result == \"success\"\n| extend PreAuthSetting = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n| where PreAuthSetting == \"Passthru\"\n| extend ['App Display Name'] = tostring(TargetResources[0].displayName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project TimeGenerated, PreAuthSetting, ['App Display Name'], Actor, ['Actor IP Address']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-AppProxySettoPassThrough",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6d4fc2d4-9514-443c-b9b6-b5ae3aa851a6",
        "query_hash": "b7acd75dd0d83c2ef2a75a8d5637f45cd3df88625982b8523aa8a322cbfa4ff2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-BitLockerKeyRetrieved.kql",
        "query": "//Detects when a BitLocker key is read in Azure AD and retrieves the device and key ids\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Read BitLocker key\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend s = tostring(AdditionalDetails[0].value)\n| parse s with * \"ID: '\" KeyId \"'\" *\n| parse s with * \"device: '\" DeviceId \"'\"\n| project TimeGenerated, OperationName, Actor, KeyId, DeviceId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-BitLockerKeyRetrieved",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ce08ae1e-53da-42b9-a2bb-9bc1e5535cb4",
        "query_hash": "9e96f233dec3f15ff0110ca0c11139259ba361e17e31b9df4c76179e4671c64f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-CustomSecurityAttributeSet.kql",
        "query": "//Detect when a custom security attribute is set on a user\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Update attribute values assigned to a user\"\n| extend x = tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].displayName)\n| extend [\"Attribute Value\"] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue))[0])\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| parse x with * '.' ['Attribute Set Name'] \"_\" *\n| extend [\"Attribute Name\"]=split(x, \"_\")[1]\n| project\n    TimeGenerated,\n    OperationName,\n    Target,\n    ['Attribute Set Name'],\n    ['Attribute Name'],\n    ['Attribute Value'],\n    Actor",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-CustomSecurityAttributeSet",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "70b55a6c-c349-44dd-ad99-8a42f435e0c8",
        "query_hash": "f9674fdbc7d2fa0ed02f4605bbd277c318260ec42d6afc781f49f9cf275cc8ab",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DailySummaryofAdminActivity.kql",
        "query": "//Create a daily summary of activities completed by your Azure AD privileged users\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet timerange=30d;\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where isnotempty(AssignedRoles)\n| where AssignedRoles != \"[]\"\n| project Actor=AccountUPN\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(timerange)\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | where isnotempty(Actor)\n    )\n    on Actor\n| summarize AdminActivity = make_list(OperationName) by Actor, startofday(TimeGenerated)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DailySummaryofAdminActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1362d240-06ba-4d46-96c4-bb4855e29f6d",
        "query_hash": "bd737be8e5e42b66d98f398670c9e2232c4a30af30958ad3ce17c4c2ac39e384",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectActivePIMAssignment.kql",
        "query": "//Alert when a user is assigned to a permanent active Azure AD role\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName in (\"Add member to role in PIM completed (permanent)\",\"Add member to role in PIM completed (timebound)\")\n| where TargetResources[2].type == \"User\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend User = tostring(TargetResources[2].userPrincipalName)\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| project TimeGenerated, Actor, User, ['Azure AD Role Name']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectActivePIMAssignment",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9ac7c68e-42a3-4fd9-ab7b-df69e4a2ccfd",
        "query_hash": "352a16bf3ccd8b5ee0631a304f3992c647411d32eb8db3190f47a69f69572563",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectAdvancedAuditingDisabled.kql",
        "query": "//Detect when Advanced Auditing is disabled for a user\n//Reference - https://www.mandiant.com/resources/remediation-and-hardening-strategies-microsoft-365-defend-against-apt29-v13\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Update user\"\n| where Result == \"success\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend targetResources=parse_json(TargetResources)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend ['Target ObjectId'] = tostring(TargetResources[0].id)\n| mv-apply tr = targetResources on (\n    extend targetResource = tr.displayName\n    | mv-apply mp = tr.modifiedProperties on (\n        where mp.displayName == \"LicenseAssignmentDetail\"\n        | extend NewValue = tostring(mp.newValue)\n        ))\n| mv-expand todynamic(NewValue)\n| where parse_json(tostring(NewValue.DisabledPlans))[0] == \"2f442157-a11c-46b9-ae5b-6e39ff4e5849\"\n| project\n    TimeGenerated,\n    Actor,\n    Target,\n    ['Target ObjectId'],\n    Activity=\"Advanced Auditing Disabled\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectAdvancedAuditingDisabled",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "60f578b1-dc59-4fb6-a288-f9e56beec383",
        "query_hash": "79ef00393c5cb68da5c27dbe7e2ea0b4205448ee918f4339012ec20852dcc5bd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectConditionalAccessChangesAfterHours.kql",
        "query": "//Detect changes to Azure AD Conditional Access policies on weekends or outside of business hours\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet Saturday = time(6.00:00:00);\nlet Sunday = time(0.00:00:00);\nAuditLogs\n| where OperationName has \"conditional access\"\n// extend LocalTime to your time zone\n| extend LocalTime=TimeGenerated + 5h\n// Change hours of the day to suit your company, i.e this would find activations between 6pm and 6am\n| where dayofweek(LocalTime) in (Saturday, Sunday) or hourofday(LocalTime) !between (6 .. 18)\n| extend ['Conditional Access Policy Name'] = tostring(TargetResources[0].displayName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project LocalTime, \n    OperationName, \n    ['Conditional Access Policy Name'], \n    Actor\n| sort by LocalTime desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectConditionalAccessChangesAfterHours",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5b232691-c582-4e58-904d-dda4f2b3b861",
        "query_hash": "fa27908b813143c53423ea9d52a4996acf64000ecc7dd5853be8de658261020b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectCredentialAddedtoApp.kql",
        "query": "//Detect when a new credential is added to an Azure AD application registration\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName has \"Update application \u2013 Certificates and secrets management\"\n| extend ApplicationName = tostring(TargetResources[0].displayName)\n| extend ApplicationObjectId = tostring(TargetResources[0].id)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ActorIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project TimeGenerated, ApplicationName, ApplicationObjectId, Actor, ActorIPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectCredentialAddedtoApp",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "52621c46-4520-4c84-b1f6-804f79ce64e9",
        "query_hash": "a66b1e07063b4ca24e6029650ace595b2250fb4869b391521529180b093abd52",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectFirstTimeCAPolicyChange.kql",
        "query": "//Detects users who add, delete or update a Azure AD Conditional Access policy for the first time.\n//First find users who have previously made CA policy changes, this example looks back 90 days\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet knownusers=\n    AuditLogs\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)\n    | where OperationName in (\"Update conditional access policy\", \"Add conditional access policy\", \"Delete conditional access policy\")\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | distinct Actor;\n//Find new events from users not in the known user list\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName in (\"Update conditional access policy\", \"Add conditional access policy\", \"Delete conditional access policy\")\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Policy Name'] = tostring(TargetResources[0].displayName)\n| extend ['Policy Id'] = tostring(TargetResources[0].id)\n| where Actor !in (knownusers)\n| project TimeGenerated, Actor, ['Policy Name'], ['Policy Id']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectFirstTimeCAPolicyChange",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1d886bfe-0056-4fc0-827a-4e4a8f987ec6",
        "query_hash": "ba5360e316d1911e80aa433f8dba946f40a2ff2f2983d560c354c41a4c8d3346",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectFirstTimeServicePrincipalCreation.kql",
        "query": "//Detects users who add a service principal to Azure AD for the first time.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet knownusers=\n    AuditLogs\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)\n    | where OperationName == \"Add service principal\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | where isnotempty(Actor)\n    | distinct Actor;\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName == \"Add service principal\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where isnotempty(Actor)\n| where Actor !in (knownusers)\n| extend AppId = tostring(AdditionalDetails[1].value)\n| project TimeGenerated, Actor, AppId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectFirstTimeServicePrincipalCreation",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e6f559e8-ba51-4593-b62c-6ccfe612330c",
        "query_hash": "311c5b861ae0427983133655a7f48f5bc0274d9248a4ce25767dd1b8e9e9c1f3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectNewCrossTenantSetting.kql",
        "query": "//Detect when another Azure AD tenant is added to cross-tenant settings and for each tenant added, retrieve any domain names from your sign in data.\n//First retrieve the event where a cross-tenant setting was added\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName == \"Add a partner to cross-tenant access setting\"\n| where Result == \"success\"\n| extend GuestTenantId = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project TimeGenerated, OperationName, Actor, GuestTenantId\n//join back to Azure AD sign in logs for the last 30 days to retrieve inbound guest activity\n| join kind=inner (\n    SigninLogs\n    | where TimeGenerated > ago (180d)\n    | where UserType == \"Guest\"\n    | where ResultType == 0\n    | where AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId\n    //Split all the domains belonging to inbound guest domains and summarize the list per TenantId\n    | extend ['Guest Domains'] = split(UserPrincipalName, '@')[-1]\n    | summarize ['Guest Domain Names']=make_set(['Guest Domains']) by HomeTenantId)\n    //Join back to the audit even where the TenantId from the added setting matches the sign in data\n    on $left.GuestTenantId == $right.HomeTenantId\n| project-away HomeTenantId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectNewCrossTenantSetting",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ac3878ef-22dd-45fe-b3ae-af1dcb569afb",
        "query_hash": "35df30fa777ed15b6b76c49d5ac0880ab12c58be4455d66ba5585f7b1d42a0d2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectNewPrivilegedGroupAdded.kql",
        "query": "//Detect when a group is added to Azure AD with the 'Azure AD roles can be assigned to this group' flag enabled\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago(90d)\n| where OperationName == \"Add group\"\n| where parse_json(tostring(TargetResources[0].modifiedProperties))[1].displayName == \"IsAssignableToRole\"\n| where parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue))[0] == true\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue))[0])\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project TimeGenerated, OperationName, GroupName, Actor, ['Actor IP Address']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectNewPrivilegedGroupAdded",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "05fc914d-a049-4191-bf47-e67b61e95a59",
        "query_hash": "87ed32fe173bc2729ccd791e1e9d2f964d282e9be72f7b9ba545abca3eb17028",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectPIMActivationsOutsideWorkingHours.kql",
        "query": "//Detect Azure AD PIM activiations outside of working hours\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet timerange=30d;\nAuditLogs\n// extend LocalTime to your time zone\n| extend LocalTime=TimeGenerated + 5h\n| where LocalTime > ago(timerange)\n// Change hours of the day to suit your company, i.e this would find activations between 6pm and 6am\n| where hourofday(LocalTime) !between (6 .. 18)\n| where OperationName == \"Add member to role completed (PIM activation)\"\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| project LocalTime, User, ['Azure AD Role Name'], ['Activation Reason']=ResultReason",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectPIMActivationsOutsideWorkingHours",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e5997094-e600-473a-b3ae-ff57bf49b432",
        "query_hash": "0409bf05e1ed8c9847d99a2b87c6e891331ebbefe087d21c3d38b7aaa3290775",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectSPAddedAfterHours.kql",
        "query": "//Detect when a service principal is added to Azure AD after working hours or on weekends\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet Saturday = time(6.00:00:00);\nlet Sunday = time(0.00:00:00);\nAuditLogs\n| where TimeGenerated > ago(7d)\n// extend LocalTime to your time zone\n| extend LocalTime=TimeGenerated + 5h\n// Change hours of the day to suit your company, i.e this would find activations between 6pm and 6am\n| where dayofweek(LocalTime) in (Saturday, Sunday) or hourofday(LocalTime) !between (6 .. 18)\n| where OperationName == \"Add service principal\"\n//Exclude service principals created by managed identities (if you have automation tasks running this may trigger), but you can remove the exclusion if required\n| where parse_json(tostring(InitiatedBy.app)).displayName != \"Managed Service Identity\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend AppId = tostring(AdditionalDetails[1].value)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project LocalTime, Actor, ['Actor IP Address'], AppId\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectSPAddedAfterHours",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "805ce92a-c8e8-4691-a9c4-dc9f486af6f6",
        "query_hash": "865d6ab3ca21f69607f43f656aee7b67c09e435b56dffde63fe49cf434fae185",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectSSPRAfterHours.kql",
        "query": "//Alert on successful self service password resets at suspicious times\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n// extend LocalTime to your time zone\n| extend LocalTime=TimeGenerated + 5h\n| where LocalTime > ago(7d)\n| where OperationName == \"Reset password (self-service)\"\n| where ResultDescription == \"Successfully completed reset.\"\n// Change hours of the day to suit your company, i.e this would find self service password reset events between 11pm and 4am\n| where hourofday(LocalTime) !between (4 .. 23)\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['IP Address of User'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project LocalTime, OperationName, ResultDescription, User, ['IP Address of User']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectSSPRAfterHours",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6a88a7b9-c38c-4c50-8f1f-f60e268cfbfa",
        "query_hash": "94b85f8649d58d775c2b992bfbe71a901217c03d7f3558d86d91f16854dd2f3d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-DetectSSPRFromUnknownIP.kql",
        "query": "//Detect a successful self service password reset or account unlock from an IP address that user hasn't successfully signed into from in the last 30 days\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Find successful password reset and account unlocks in the last day\nAuditLogs\n| where TimeGenerated > ago (1d)\n| where OperationName == \"Unlock user account (self-service)\" and ResultDescription == \"Success\" or OperationName == \"Reset password (self-service)\" and ResultDescription == \"Successfully completed reset.\"\n| extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project\n    ['Reset Unlock or Time']=TimeGenerated,\n    OperationName,\n    UserPrincipalName,\n    IPAddress\n//Take the UserPrincipalName of the event and the IP address, join back to sign on logs to find events where the IP address has not been seen from that user\n| join kind=leftanti \n    (\n    SigninLogs\n    | where TimeGenerated > ago(30d)\n    | where ResultType == 0\n    )\n    on UserPrincipalName, IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DetectSSPRFromUnknownIP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2c4b6b42-90a9-42ab-94e2-cf875957c786",
        "query_hash": "4ea70f1d806a893bc2061c36fd74f4524fe5ecaa21d3e10526d398db559843ae",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-EventsbyRiskyPrivilegedUser.kql",
        "query": "//When a user holding a privileged role triggers an Azure AD risk event, retrieve the operations completed by that user\n//Lookup the IdentityInfo table for any users holding a privileged role\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\nAADUserRiskEvents\n| where TimeGenerated > ago (7d)\n| where UserPrincipalName in (privusers)\n| where RiskDetail != \"aiConfirmedSigninSafe\"\n| project RiskTime=TimeGenerated, UserPrincipalName\n| join kind=inner\n    (\n    AuditLogs\n    | where TimeGenerated > ago(7d)\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    )\n    on UserPrincipalName\n| project-rename OperationTime=TimeGenerated\n| project\n    RiskTime,\n    OperationTime,\n    ['Time Between Events']=datetime_diff(\"minute\", OperationTime, RiskTime),\n    OperationName,\n    Category,\n    CorrelationId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-EventsbyRiskyPrivilegedUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9f66d680-4512-40b5-b564-225cdbee0be3",
        "query_hash": "bf294f42b09368f5695b4cb3c48a2e4a281f9160dd9a7ef539961e810e4a798c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-FindUsersFailingNewPasswordSSPR.kql",
        "query": "//Find users who have failed 3 or more times to set a new password during a SSPR flow. Worth reaching out to them to give them a hand or see if you can onboard them to something like Windows Hello for Business\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where LoggedByService == \"Self-service Password Management\"\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['User IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| sort by TimeGenerated asc \n| summarize ['SSPR Actions']=make_list_if(ResultReason, ResultReason has \"User submitted a new password\") by CorrelationId, User, ['User IP Address']\n| where array_length(['SSPR Actions']) >= 3\n| sort by User desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-FindUsersFailingNewPasswordSSPR",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e1395a82-f7a3-4084-a4f7-bd3f3bf6b555",
        "query_hash": "531e6fd0d3b41f2fb826c9f0765d3f40241fa874a74086eb70b194ad4dba254f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-FindUsersFailingSSPR.kql",
        "query": "//Detect users who are trying to use self service password reset but failing as they don't have any authentication methods listed\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where LoggedByService == \"Self-service Password Management\"\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['User IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| sort by TimeGenerated asc \n| summarize ['SSPR Actions']=make_list(ResultReason) by CorrelationId, User, ['User IP Address']\n| where ['SSPR Actions'] has \"User's account has insufficient authentication methods defined. Add authentication info to resolve this\"\n| sort by User desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-FindUsersFailingSSPR",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1c6855d4-9412-4709-a4fd-325ae79e3ce4",
        "query_hash": "9c5ba7da9b6abf2463fb52c9edb4f531139df585246564b31bbbb947725cdef8",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-FirstTimePIMActivationOutsideWorkingHours.kql",
        "query": "//Detects when a user activates a PIM role for the first time on weekends or after working hours\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet Saturday = time(6.00:00:00);\nlet Sunday = time(0.00:00:00);\nlet timeframe = 90d;\n//Find users who have previously activated PIM roles outside of business hours or on weekends in the last 90 days\n//In this example business hours are 6am to 6pm\nlet knownusers=\n    AuditLogs\n    | where TimeGenerated > ago(timeframe) and TimeGenerated < ago(7d)\n    // extend LocalTime to your time zone\n    | extend LocalTime=TimeGenerated + 5h\n    // Change hours of the day to suit your company, i.e this would find activations between 6pm and 6am\n    | where dayofweek(LocalTime) in (Saturday, Sunday) or hourofday(LocalTime) !between (6 .. 18)\n    | where OperationName == \"Add member to role completed (PIM activation)\"\n    | extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | distinct User;\n//Find users who activate a PIM role outside of business hours or on weekends for the first time in the last week\nAuditLogs\n| where TimeGenerated > ago(7d)\n| extend LocalTime=TimeGenerated + 5h\n| where dayofweek(LocalTime) in (Saturday, Sunday) or hourofday(LocalTime) !between (6 .. 18)\n| where OperationName == \"Add member to role completed (PIM activation)\"\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where User !in (knownusers)\n| project LocalTime, User, ['Azure AD Role Name'], ['Activation Reason']=ResultReason",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-FirstTimePIMActivationOutsideWorkingHours",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4d3bd5b2-867a-43ab-b198-4dce69dc972f",
        "query_hash": "514699602c0cdae48eeb5247c4d6bbd3c4a8e3ec478a3801931de7389e3ab4f6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-GroupAddedtoPIM.kql",
        "query": "//Find when an Azure AD group is assigned (either permanent or eligble) to an Azure AD PIM assignment\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName in (\"Add eligible member to role in PIM completed (permanent)\", \"Add member to role in PIM completed (permanent)\")\n| where TargetResources[2].type == \"Group\"\n| extend GroupName = tostring(TargetResources[2].displayName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| project TimeGenerated, OperationName, Actor, GroupName, ['Azure AD Role Name']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-GroupAddedtoPIM",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "af37b874-45fb-4be9-87e2-9cb0d2875485",
        "query_hash": "a806ea952c1bb9e7d8e33d75553d20fd12faf79e51c35be9779a637db9677fc1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-GuestAddedtoPIM.kql",
        "query": "//Detect when an Azure AD guest account is assigned to an Azure AD PIM role\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago (1d)\n| where OperationName in (\"Add eligible member to role in PIM completed (permanent)\", \"Add eligible member to role in PIM completed (timebound)\", \"Add member to role in PIM completed (permanent)\", \"Add member to role in PIM completed (timebound)\")\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| extend Target = tostring(TargetResources[2].userPrincipalName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where Target contains \"#ext#\"\n| project TimeGenerated, OperationName, Actor, Target, ['Azure AD Role Name']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-GuestAddedtoPIM",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2fd6f8bd-1f5f-4df1-a084-f8d3506ca3f9",
        "query_hash": "6cf97cf8e4482e4ba984f243ee0e59bc899053f8f4f38391ce6f98b8c9671c94",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-ListBulkActivities.kql",
        "query": "//List the bulk activities attempted by your privileged Azure AD users and parse the results\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName has_all (\"(bulk)\", \"finished\")\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project TimeGenerated, Actor, ResultDescription, OperationName\n| parse ResultDescription with * \"Total activities count:\" ['Total Activity Count'] \";\" *\n| parse ResultDescription with * \"succeeded activities count\" ['Total Succeeded'] \";\" *\n| parse ResultDescription with * \"failed activities count\" ['Total Failed']\n| project\n    TimeGenerated,\n    Actor,\n    OperationName,\n    ['Total Activity Count'],\n    ['Total Succeeded'],\n    ['Total Failed'] ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ListBulkActivities",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4382abb6-dedc-4cb4-b93b-803cad4af747",
        "query_hash": "c22001496cec84b7fe7f0b536f98d7f3454ac2427f080a773442835ced751dc7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-MFAChangesforPrivlegedUsers.kql",
        "query": "//Alert when any users who hold a privileged Azure AD role make MFA configuration changes or an admin changes MFA details on a privileged user\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\n//Lookup the IdentityInfo table for any users holding a privileged role\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\n//Lookup MFA configuration events for those privileged users\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName in~ (\"Admin registered security info\", \"Admin updated security info\", \"Admin deleted security info\", \"User registered security info\", \"User changed default security info\", \"User deleted security info\")\n| extend UserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n| where UserPrincipalName in~ (privusers)\n| project TimeGenerated, OperationName, UserPrincipalName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-MFAChangesforPrivlegedUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "52ecfd17-594c-4b9d-9590-25f4a3066aee",
        "query_hash": "604abc1391807d87241a1af0048f5c9f1a0ef8b6f5b228142af030634686341c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-NamedLocationsChanged.kql",
        "query": "//Detect when Azure AD Named Locations are changed (either IP or Country) and retrieve the current list \n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet updatedip=\n    AuditLogs\n    | where OperationName == \"Update named location\"\n    | mv-expand TargetResources\n    | extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n    | mv-expand modifiedProperties  \n    | extend newValue = tostring(parse_json(modifiedProperties).newValue)\n    | mv-expand todynamic(newValue)\n    | extend ipRanges = tostring(parse_json(newValue).ipRanges)\n    | mv-expand todynamic(ipRanges) \n    | extend cidr = tostring(ipRanges.cidrAddress)\n    | where isnotempty(cidr)\n    | extend ['Named Location name'] = tostring(TargetResources.displayName)\n    | summarize ['IP List']=make_list(cidr) by ['Named Location name'];\nlet updatedcountries=\n    AuditLogs\n    | where OperationName == \"Update named location\"\n    | mv-expand TargetResources\n    | extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n    | mv-expand modifiedProperties  \n    | extend newValue = tostring(parse_json(modifiedProperties).newValue)\n    | extend countriesAndRegions = tostring(parse_json(newValue).countriesAndRegions)\n    | mv-expand todynamic(countriesAndRegions) \n    | where isnotempty(countriesAndRegions)\n    | extend ['Named Location name'] = tostring(TargetResources.displayName)\n    | summarize ['Country List']=make_list(countriesAndRegions) by ['Named Location name'];\nunion updatedip, updatedcountries",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-NamedLocationsChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "061c0a12-7677-49d9-aed0-4adbe7991422",
        "query_hash": "36b13cd161f6da1ab8d53e66755c6216cf0bed004988869e0675b9a12cfe7039",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-NewDomainAdded.kql",
        "query": "//Detect when an admin adds a new unverified or verified domain into your Azure AD tenant\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName in (\"Add verified domain\", \"Add unverified domain\")\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Domain = tostring(TargetResources[0].displayName)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Domain",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-NewDomainAdded",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4908e6e6-3bb0-4bc2-9b2f-4faaf39e4f32",
        "query_hash": "a917dc2fa793d189609bd3dec9e6a44f089a525bfeb85a464e2fc7d3d15a3e88",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-NewOperations.kql",
        "query": "//Find any new operations generated in the Azure AD audit table in the last week compared to the last 90 days\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet existingoperations=\n    AuditLogs\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(7d)\n    | distinct OperationName;\nAuditLogs\n| where TimeGenerated > ago(7d)\n| summarize Count=count() by OperationName, Category\n| where OperationName !in (existingoperations)\n| sort by Count desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-NewOperations",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "92bb361e-1b28-4684-b152-83b6cbbd3765",
        "query_hash": "0d81ecc695c117def8f42199a0c42bbd2563fa520d8859a3bf9b31ca0525e215",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-NewPIMRoleActivated.kql",
        "query": "//Detect when a user activates an Azure AD PIM role never seen by them before\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago(180d) and TimeGenerated < ago(1d)\n| where OperationName == \"Add member to role completed (PIM activation)\"\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| distinct User, ['Azure AD Role Name']\n| join kind=rightanti (\n    AuditLogs\n    | where TimeGenerated > ago(1d)\n    | where OperationName == \"Add member to role completed (PIM activation)\"\n    | extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n    )\n    on User, ['Azure AD Role Name']\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project TimeGenerated, User, ['Azure AD Role Name']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-NewPIMRoleActivated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e7fe35b6-8a21-4f4c-9d19-7b2a77e3f3db",
        "query_hash": "c34e1c989e9f03d149bb375298cd4f68783ce0a6b396af07676b577e49891383",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-NewPrivilegedActions.kql",
        "query": "//Find new operations completed by your privileged Azure AD users not seen before\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\n//Lookup the IdentityInfo table for any users holding a privileged role\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\n//Find actions taken by those users previously\nAuditLogs\n| where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)\n| extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where isnotempty(UserPrincipalName)\n| where UserPrincipalName in (privusers)\n| distinct UserPrincipalName, OperationName\n//Find any new actions taken in the last day not seen before from that user\n| join kind=rightanti (\n    AuditLogs\n    | where TimeGenerated > ago(1d)\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | where UserPrincipalName in (privusers)\n    | where isnotempty(UserPrincipalName)\n    )\n    on UserPrincipalName, OperationName\n| project TimeGenerated, UserPrincipalName, OperationName, Category, CorrelationId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-NewPrivilegedActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e3db3e29-65e0-4164-b88a-d780cc4ccb53",
        "query_hash": "daf2c05f90d91c11174f7e97e311c2a711a6eb52c1e468bd5f1b4d22388be8d3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-PivotTableofPrivilegedUserActions.kql",
        "query": "//Create a pivot table showing all the actions taken by your privileged users\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\n//Lookup the IdentityInfo table for any users holding a privileged role\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\n//Search for all actions taken by those users in the last 7 days\nAuditLogs\n| where TimeGenerated > ago(7d)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where Actor in (privusers)\n//Create a pivot table counting each action for each user\n| evaluate pivot(OperationName, count(), Actor)\n| order by Actor asc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-PivotTableofPrivilegedUserActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "27e5b659-ea50-413f-b5a6-ee9ccb165fa9",
        "query_hash": "956bf4ffe52045d6f4ee5f7485c756f4a2121c14dd95cddbe0e69076bd47ccf0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-RedirectURIChanged.kql",
        "query": "//Alert when the redirect URI list is changed for a service principal\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Update service principal\"\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties \n| where modifiedProperties.displayName == \"AppAddress\" \n| extend newValue = tostring(parse_json(modifiedProperties).newValue)\n| mv-expand todynamic(newValue)\n| extend RedirectURI = tostring(newValue.Address)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Service Principal Name'] = tostring(TargetResources.displayName)\n| summarize ['List of Redirect URIs']=make_list(RedirectURI) by Actor, ['Service Principal Name']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-RedirectURIChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7b213861-d78f-4442-9313-bd143be594f6",
        "query_hash": "06d897301862446d685d7b62d779c11c209bfecd2be0603378b40c04962cc4c6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-SummarizePIMRolesActivated.kql",
        "query": "//Summarize and visualize the roles being activated in Azure AD PIM\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago(30d)\n| where OperationName == \"Add member to role completed (PIM activation)\"\n| extend ['Azure AD Role Name'] = tostring(TargetResources[0].displayName)\n| summarize Count=count()by ['Azure AD Role Name']\n| sort by Count\n| render barchart with (title=\"Count of Azure AD PIM activations by role\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-SummarizePIMRolesActivated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "710256ff-3fe0-4385-a57b-0d3e126a770f",
        "query_hash": "4630f0655d4f093b449ae3b4ff2d3a57bb97b51250f0195e5856c2bbe71c765e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-SummarizeWeeklyPIM.kql",
        "query": "//Create a summary of PIM activations for all your users per week\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago (30d)\n| where OperationName == \"Add member to role completed (PIM activation)\"\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend Role = tostring(TargetResources[0].displayName)\n| where isnotempty(User)\n| summarize\n    ['Roles Activated']=make_list(Role),\n    ['Times Activated']=make_list(TimeGenerated)\n    by User, ['Week Starting']=startofweek(TimeGenerated)\n| sort by User asc, ['Week Starting'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-SummarizeWeeklyPIM",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5ef30749-9382-437f-82b3-915ddbb770d9",
        "query_hash": "2b6ce9ee70b55469ffe55e0f02591e44f7b7f97872a1ad390f41303d60eeb7c2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-UserAddedandRemovedfromRole.kql",
        "query": "//Detect when a user is added and removed from an Azure AD role within a short time frame\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Timerange = the amount of data to look back on, timeframe = the time between the role being added and removed\nlet timerange=7d;\nlet timeframe=4h;\nAuditLogs\n| where TimeGenerated > ago (timerange)\n| where OperationName == \"Add member to role\"\n| where Result == \"success\"\n//Exclude role additions from Azure AD PIM\n| where Identity <> \"MS-PIM\"\n| extend User = tostring(TargetResources[0].userPrincipalName)\n| extend Role = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend UserWhoAdded = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project TimeAdded=TimeGenerated, User, Role, UserWhoAdded\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago (timerange)\n    | where OperationName == \"Remove member from role\"\n    //Exclude role removals from Azure AD PIM\n    | where Result == \"success\"\n    | where Identity <> \"MS-PIM\"\n    | extend User = tostring(TargetResources[0].userPrincipalName)\n    | extend Role = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].oldValue)))\n    | extend UserWhoRemoved = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | project TimeRemoved=TimeGenerated, User, Role, UserWhoRemoved\n    )\n    on User, Role\n| extend ['Time User Held Role'] = TimeRemoved - TimeAdded\n| where ['Time User Held Role'] < ['timeframe']\n| project\n    TimeAdded,\n    TimeRemoved,\n    ['Time User Held Role'],\n    User,\n    Role,\n    UserWhoAdded,\n    UserWhoRemoved\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-UserAddedandRemovedfromRole",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3c311703-c387-4e49-9923-50abeb6ddb53",
        "query_hash": "923a4f5e10b68f7b4079c9e2b7e566d42ed05b36a27454be8a03f2efb7d5271e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-UserAddedtoRoleOutsidePIM.kql",
        "query": "//Alert when a user is added directly to an Azure AD role, bypassing PIM\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName has \"Add member to role outside of PIM\"\n| extend RoleName = tostring(TargetResources[0].displayName)\n| extend UserAdded = tostring(TargetResources[2].displayName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project TimeGenerated, OperationName, RoleName, UserAdded, Actor",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-UserAddedtoRoleOutsidePIM",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9b0fe61a-82ad-4b7d-8add-a2b124e556e1",
        "query_hash": "432bfe4b56bd4e9702c6a0beb7d2ad192a3e1cc570c7787cf1e852787bf68992",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-UsersAddedtoDynamicGroups.kql",
        "query": "//Summarize all groups that have had users added to them via dynamic rules\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName == \"Add member to group\"\n| where Identity == \"Microsoft Approval Management\"\n| where TargetResources[0].type == \"User\"\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend User = tostring(TargetResources[0].userPrincipalName)\n| summarize ['Count of Users Added']=dcount(User), ['List of Users Added']=make_set(User) by GroupName\n| sort by GroupName asc  \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-UsersAddedtoDynamicGroups",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "eeaf01e6-e83e-42dd-a1ed-f4fc6f3476a1",
        "query_hash": "8baecba6561630897001de1ca0f12812eea44394c8f6f58db1de1df3cec65b7d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-UsersWhoHaventElevatedPIM.kql",
        "query": "//Find users who have not elevated any roles in Azure AD PIM in 30 days\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago (365d)\n| project TimeGenerated, OperationName, Result, TargetResources, InitiatedBy\n| where OperationName == \"Add member to role completed (PIM activation)\"\n| where Result == \"success\"\n| extend ['Last Role Activated'] = tostring(TargetResources[0].displayName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| summarize arg_max(TimeGenerated, *) by Actor\n| project\n    Actor,\n    ['Last Role Activated'],\n    ['Last Activation Time']=TimeGenerated,\n    ['Days Since Last Activation']=datetime_diff(\"day\", now(), TimeGenerated)\n| where ['Days Since Last Activation'] >= 30\n| sort by ['Days Since Last Activation'] desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-UsersWhoHaventElevatedPIM",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "24fd567c-febe-482d-874f-6166accc141b",
        "query_hash": "ae1e5ae7cb2a71ad2792662ce23ea6f01ed3c76de06d743c1ea2e53b8ef81192",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-UserswithPrivRolesbutnoActivity.kql",
        "query": "//Find users who hold a privileged Azure AD role but haven't completed any activities in Azure AD for 45 days\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\n//Lookup the IdentityInfo table for any users holding a privileged role\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where isnotempty(AssignedRoles)\n| where AssignedRoles != \"[]\"\n| project UserPrincipalName=AccountUPN, AssignedRoles\n| join kind=leftanti (\n    AuditLogs\n    | where TimeGenerated > ago(45d)\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | where isnotempty(UserPrincipalName)\n    | distinct UserPrincipalName\n    )\n    on UserPrincipalName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-UserswithPrivRolesbutnoActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e00a0f79-a012-4029-b917-82b1c16240e2",
        "query_hash": "9640d696bea9dab6c0ac33b1d425bf70763c6b9a2bbcff31d4b74dd4a7ba1728",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CAudit-VisualizeSSPRSuccessvsFailure.kql",
        "query": "//Visualize successful vs failed self service password reset attempts in your Azure AD tenant\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago (30d)\n| where LoggedByService == \"Self-service Password Management\"\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['User IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| sort by TimeGenerated asc \n//Create a list of all SSPR actions that make up a single correlation id which represents one attempts at completing SSPR\n| summarize ['SSPR Actions']=make_list(ResultReason) by CorrelationId, bin(TimeGenerated, 1d)\n//Summarize those lists of actions into those that have a successful password reset and those that don't\n| summarize\n    ['Successful self service password resets']=countif(['SSPR Actions'] has \"Successfully completed reset\"),\n    ['Failed self service password resets']=countif(['SSPR Actions'] !has \"User successfully reset password\")\n    by bin(TimeGenerated, 1d) \n| render timechart with (title=\"Self service password reset success vs failure\", ytitle=\"Count\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-VisualizeSSPRSuccessvsFailure",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d832c1b7-bab2-4648-bfd5-0948c0f47f58",
        "query_hash": "ceed2216d1bfc5d10cea696843ad60a1ea07af8597dd0b74e15200b7de32dc9f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AADRiskEventCorrelation.kql",
        "query": "//This query will hunt for real time risk events flagged as medium or high that aren't confirmed safe by Microsoft and then enrich that data with information from the IdentityInfo table\n\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet id=\n    IdentityInfo\n    | summarize arg_max(TimeGenerated, *) by AccountUPN;\nlet signin=\n    SigninLogs\n    | where TimeGenerated > ago (14d)\n    | where RiskLevelDuringSignIn in ('high', 'medium')\n    | join kind=inner id on $left.UserPrincipalName == $right.AccountUPN\n    | extend SigninTime = TimeGenerated\n    | where RiskEventTypes_V2 != \"[]\";\nAADUserRiskEvents\n| where TimeGenerated > ago (14d)\n| extend RiskTime = TimeGenerated\n| where DetectionTimingType == \"realtime\"\n| where RiskDetail !has \"aiConfirmedSigninSafe\"\n| join kind=inner signin on CorrelationId\n| extend TimeDelta = abs(SigninTime - RiskTime)\n| project\n    SigninTime,\n    UserPrincipalName,\n    RiskTime,\n    TimeDelta,\n    RiskEventTypes,\n    RiskLevelDuringSignIn,\n    City,\n    Country,\n    EmployeeId,\n    AssignedRoles",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AADRiskEventCorrelation",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f4bace92-1a41-4405-9d88-5945e4ae714c",
        "query_hash": "3a143baba32d3470d54f250d592822e83d52f97457b6a007d456d599d454206b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AdminUpdatingSecurityInfo.kql",
        "query": "//Detects when an admin changes the authentication phone details for another user\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Admin updated security info\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend ['New Phone Number'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[2].newValue)))\n| extend ['Old Phone Number'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[2].oldValue)))\n| project TimeGenerated, Actor, Target, ['New Phone Number'], ['Old Phone Number']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AdminUpdatingSecurityInfo",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a795f778-73b0-49ef-b22a-f3d8c64b705a",
        "query_hash": "65131bdf975c88a87f00c0c75edcab74a65ed54714c03da8d0019426c9ae2214",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AlertGuestDeniedAccesstoMultipleApps.kql",
        "query": "//Alert when Azure AD guest accounts are denied access (either by Conditional Access or because they aren't granted specific access) to multiple applications in a short time period\n//This query uses 3 or more applications within an hour\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago (7d)\n| where UserType == \"Guest\"\n| where ResultType in (\"53003\", \"50105\")\n| summarize\n    ['Application Count']=dcount(AppDisplayName),\n    ['Application List']=make_set(AppDisplayName)\n    by UserPrincipalName, bin(TimeGenerated, 1h)\n| where ['Application Count'] >= 3\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago (7d)\n| where IsGuestUser == 1\n| where ErrorCode  in (\"53003\", \"50105\")\n| summarize\n    ['Application Count']=dcount(Application),\n    ['Application List']=make_set(Application)\n    by AccountUpn, bin(Timestamp, 1h)\n| where ['Application Count'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AlertGuestDeniedAccesstoMultipleApps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "314e67f5-7b38-4114-9c20-92af31473b4a",
        "query_hash": "760624ccbcb828a71085f3d53b140a7f4e9bc97671d031704ffef2ec11e98662",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AlertsFromPrivilegedUsers.kql",
        "query": "//Query to find security alerts for users who have privileged Azure AD roles\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nlet PrivRoles = dynamic([\"Global Administrator\", \"Security Administrator\", \"Teams Administrator\"]);\nlet identityinfo=\n    IdentityInfo\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where AssignedRoles has_any (PrivRoles)\n    | extend TargetUserName = AccountName\n    | extend UserPrincipalName = AccountUPN\n    | project TargetUserName, UserPrincipalName, AssignedRoles;\nSecurityAlert\n| where TimeGenerated >= ago(5d)\n| extend AlertTime = TimeGenerated\n| extend UserPrincipalName = CompromisedEntity\n| join kind=inner identityinfo on UserPrincipalName\n| project AlertTime, TargetUserName, UserPrincipalName, AlertName, AssignedRoles",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AlertsFromPrivilegedUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2c27b218-b306-4059-984e-0644e42c40c9",
        "query_hash": "7d3623ac57a238b03c41658b394a0a8ca720f2ac6dec2e418c429d771b71ef4d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AnomalousConditionalAccessFailures.kql",
        "query": "//Detect anomalies in the amount of conditional access failures by users in your tenant, then visualize those conditional access failures\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Starttime and endtime = which period of data to look at, i.e from 21 days ago until today.\nlet startdate=21d;\nlet enddate=1d;\n//Timeframe = time period to break the data up into, i.e 1 hour blocks.\nlet timeframe=1h;\n//Sensitivity = the lower the number the more sensitive the anomaly detection is, i.e it will find more anomalies, default is 1.5\nlet sensitivity=2;\n//Threshold = set this to tune out low count anomalies, i.e when total failures for a user doubles from 1 to 2\nlet threshold=5;\nlet outlierusers=\nSigninLogs\n| where TimeGenerated between (startofday(ago(startdate))..startofday(ago(enddate)))\n| where ResultType == \"53003\"\n| project TimeGenerated, ResultType, UserPrincipalName\n| make-series CAFailureCount=count() on TimeGenerated from startofday(ago(startdate)) to startofday(ago(enddate)) step timeframe by UserPrincipalName \n| extend outliers=series_decompose_anomalies(CAFailureCount, sensitivity)\n| mv-expand TimeGenerated, CAFailureCount, outliers\n| where outliers == 1 and CAFailureCount > threshold\n| distinct UserPrincipalName;\n//Optionally visualize the anomalies\nSigninLogs\n| where TimeGenerated between (startofday(ago(startdate))..startofday(ago(enddate)))\n| where ResultType == \"53003\"\n| project TimeGenerated, ResultType, UserPrincipalName\n| where UserPrincipalName in (outlierusers)\n| summarize CAFailures=count()by UserPrincipalName, bin(TimeGenerated, timeframe)\n| render timechart with (ytitle=\"Failure Count\",title=\"Anomalous Conditional Access Failures\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AnomalousConditionalAccessFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ea626513-3129-498c-a4c5-fba5e91a3e71",
        "query_hash": "441af2af4f3f1319959ca5f9a8d4f13d35c8b8d02034d34344693a9ef44d93f5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AppAccessMembersvsGuests.kql",
        "query": "//Creates a list of your applications and summarizes successful signins by members vs guests separated to total and distinct signins\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| project TimeGenerated, UserType, ResultType, AppDisplayName, UserPrincipalName\n| where ResultType == 0\n| summarize\n    ['Total Member Signins']=countif(UserType == \"Member\"),\n    ['Distinct Member Signins']=dcountif(UserPrincipalName, UserType == \"Member\"),\n    ['Total Guest Signins']=countif(UserType == \"Guest\"),\n    ['Distinct Guest Signins']=dcountif(UserPrincipalName, UserType == \"Guest\")\n    by AppDisplayName\n| sort by AppDisplayName asc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AppAccessMembersvsGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a250cb89-7906-4dd8-8b0d-f8727f70d561",
        "query_hash": "73590367ec20be8ccc6720fa1ea881ba9923beef1427c8d98564c86b2567babc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ApplicationAccessReview.kql",
        "query": "//Query to find users who have access to an application but haven't signed in for 90 days\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet signins=\nSigninLogs\n| where TimeGenerated > ago (90d)\n| where AppDisplayName has \"Application Name\"\n| project TimeGenerated, UserPrincipalName, AppDisplayName;\nIdentityInfo\n| where TimeGenerated > ago (21d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| extend UserPrincipalName = AccountUPN\n| where GroupMembership contains \"Group that gives access to Application\"\n| join kind=leftanti signins on UserPrincipalName\n| project UserPrincipalName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ApplicationAccessReview",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "aea7daec-3a12-49c7-bf42-492c3833d502",
        "query_hash": "8ef421cf77ff492af139d00a03baa33fecf4c95b27f76575ec65c384dd710435",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AppsWithMoreGuests.kql",
        "query": "//Find Azure AD applications that have more guests than members accessing them\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel Query\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == \"0\"\n| summarize Guests=dcountif(UserPrincipalName,UserType == \"Guest\"), Members=dcountif(UserPrincipalName,UserType == \"Member\") by AppDisplayName\n| where Guests > Members\n| sort by Guests desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(30d)\n| where LogonType == @\"[\"\"interactiveUser\"\"]\"\n| where ErrorCode == \"0\"\n| summarize Guests=dcountif(AccountUpn,IsGuestUser == \"true\"), Members=dcountif(AccountUpn,IsGuestUser == \"false\") by Application\n| where Guests > Members\n| sort by Guests desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AppsWithMoreGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "57897904-ae74-49ab-a24b-15899d893fee",
        "query_hash": "ea445c7f9f33bec590a9bb2af5e4bf6162cb96730b10ee7d84b61764b15dd785",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-AppswithmostSFAPrivUsers.kql",
        "query": "//Find the applications that have the most privileged users accessing them using only single factor authentication\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where UserPrincipalName in (privusers)\n| where ResultType == 0\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| summarize\n    ['List of Users']=make_set(UserPrincipalName),\n    ['Count of Users']=dcount(UserPrincipalName)\n    by AppDisplayName\n| sort by ['Count of Users'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-AppswithmostSFAPrivUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c59838db-8fc4-4f87-ae5d-c8a381c231f2",
        "query_hash": "40199476c13b214e327dbbfcb7e47665d89bdad94b4599331e48a43124f7de47",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-CalculateRiskyApps.kql",
        "query": "//Calculate the percentage of signins to all your Azure AD apps considered risky. Those requiring single factor authentication, coming from an unknown location and from an unknown device\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| extend DeviceTrustType = tostring(DeviceDetail.trustType)\n| summarize\n    ['Total Signins']=count(),\n    ['At Risk Signins']=countif(NetworkLocationDetails == '[]' and isempty(DeviceTrustType) and AuthenticationRequirement == \"singleFactorAuthentication\")\n    by AppDisplayName\n| extend ['At Risk Percentage']=(todouble(['At Risk Signins']) * 100 / todouble(['Total Signins']))",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-CalculateRiskyApps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7ff1d599-f8fc-4250-99c6-8d0fb95c663a",
        "query_hash": "f438d1a4976781261e36d3644a4c8a4c868780b17c1b32c7f118d0de6f1d7335",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-CalculateRiskyUsers.kql",
        "query": "//Calculate the percentage for all your Azure AD users considered risky. Those requiring single factor authentication, coming from an unknown location and from an unknown device\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n//Include only member accounts if you want to ignore guest signins\n| where UserType == \"Member\"\n| extend DeviceTrustType = tostring(DeviceDetail.trustType)\n| summarize\n    ['Total Signins']=count(),\n    ['At Risk Signins']=countif(NetworkLocationDetails == '[]' and isempty(DeviceTrustType) and AuthenticationRequirement == \"singleFactorAuthentication\")\n    by UserPrincipalName\n| extend ['At Risk Percentage']=(todouble(['At Risk Signins']) * 100 / todouble(['Total Signins']))\n| sort by ['At Risk Percentage'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-CalculateRiskyUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0665fc04-f750-4ae8-bc33-529418fa3ec9",
        "query_hash": "0e96a65d6a45482c2942f1930e33be8a262bebb4fdd623e993d589afe74de2b1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ConditionalAccessMostFailures.kql",
        "query": "//Find which users are failing the most Conditional Access policies, retrieve the total failure count, distinct policy count and the names of the failed policies\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| project TimeGenerated, ConditionalAccessPolicies, UserPrincipalName\n| mv-expand ConditionalAccessPolicies\n| extend CAResult = tostring(ConditionalAccessPolicies.result)\n| extend CAPolicyName = tostring(ConditionalAccessPolicies.displayName)\n| where CAResult == \"failure\"\n| summarize\n    ['Total Conditional Access Failures']=count(),\n    ['Distinct Policy Failure Count']=dcount(CAPolicyName),\n    ['Policy Names']=make_set(CAPolicyName)\n    by UserPrincipalName\n| sort by ['Distinct Policy Failure Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ConditionalAccessMostFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "405e24cc-3f3d-4df9-a5c7-45fe2cde9a08",
        "query_hash": "c8052ecd74d16942228346607837369b1ec223ea83e68416a34db166c79fbcab",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ConditionalAccessPivotTable.kql",
        "query": "//Create a pivot table showing all conditional access policy outcomes over the last 30 days\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| extend CA = parse_json(ConditionalAccessPolicies)\n| mv-expand bagexpansion=array CA\n| evaluate bag_unpack(CA)\n| extend\n    ['CA Outcome']=tostring(column_ifexists('result', \"\")),\n    ['CA Policy Name'] = column_ifexists('displayName', \"\")\n| evaluate pivot(['CA Outcome'], count(), ['CA Policy Name'])",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ConditionalAccessPivotTable",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "97513a3f-d5e9-4133-868f-334fe8ba665b",
        "query_hash": "31971cc0ddd9eb6d90a2d3400d59146af596489cc9a08f028201f2eb02825629",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ConditionalAccessPoliciesNotinUse.kql",
        "query": "//Find Azure AD conditional access policies that have no hits for 'success' or 'failure' over the last month\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Check that these policies are configured correctly or still required\nSigninLogs\n| where TimeGenerated > ago (30d)\n| project TimeGenerated, ConditionalAccessPolicies\n| mv-expand ConditionalAccessPolicies\n| extend CAResult = tostring(ConditionalAccessPolicies.result)\n| extend ['Conditional Access Policy Name'] = tostring(ConditionalAccessPolicies.displayName)\n| summarize ['Conditional Access Result']=make_set(CAResult) by ['Conditional Access Policy Name']\n| where ['Conditional Access Result'] !has \"success\"\n    and ['Conditional Access Result'] !has \"failure\"\n    and ['Conditional Access Result'] !has \"unknownFutureValue\"\n| sort by ['Conditional Access Policy Name'] asc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ConditionalAccessPoliciesNotinUse",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "05604a1f-5582-4733-b184-9b800872deab",
        "query_hash": "f7a3f479c53127b5d7c15a3a7334b12425f46c02aeb35b23a4f89c9b5dcc82df",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-DailySummaryofUsersAddedtoAADGroups.kql",
        "query": "//Create a daily summary of Azure Active Directory group additions\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet timerange=7d;\nAuditLogs\n| where TimeGenerated > ago (timerange)\n| where OperationName == \"Add member to group\"\n| extend Type = tostring(TargetResources[0].type)\n| where Type == \"User\"\n| extend ['Group Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend UserAdded = tostring(TargetResources[0].userPrincipalName)\n| where isnotempty(UserAdded)\n| summarize ['Users Added']=make_set(UserAdded) by ['Group Name'], startofday(TimeGenerated)\n| sort by ['Group Name'] asc, TimeGenerated desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-DailySummaryofUsersAddedtoAADGroups",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "536ca3bf-6c6e-41f7-b76e-1c9ad0072bbf",
        "query_hash": "2eff825080d2987a58ccfcd96ebc347860fc1e05b3cb197ef4d347e9735f0fbf",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-DetectingFirstTimeAccesstoAzureManagement.kql",
        "query": "//Detects users who have accessed Azure AD Management interfaces, such as Azure AD PowerShell or Graph Explorer, who have not accessed in the previous timeframe. \n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Add additional applications to include them in the same query, i.e Defender for Cloud Apps portal.\n//Select a time frame to look back on, i.e find users logging on for the first time today not seen in the prior 60 days\nlet timeframe = startofday(ago(60d));\nlet applications = dynamic([\"Azure Active Directory PowerShell\", \"Microsoft Azure PowerShell\", \"Graph Explorer\", \"ACOM Azure Website\", \"Azure Portal\", \"Azure Advanced Threat Protection\"]);\nSigninLogs\n| where TimeGenerated > timeframe and TimeGenerated < startofday(now())\n| where AppDisplayName in (applications)\n| project UserPrincipalName, AppDisplayName\n| join kind=rightanti\n    (\n    SigninLogs\n    | where TimeGenerated > startofday(now())\n    | where AppDisplayName in (applications)\n    )\n    on UserPrincipalName, AppDisplayName\n| where ResultType == 0\n| project TimeGenerated, UserPrincipalName, ResultType, AppDisplayName, IPAddress, Location, UserAgent",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-DetectingFirstTimeAccesstoAzureManagement",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9eacb5d8-de65-47be-9e64-34dede691d83",
        "query_hash": "18ec26bb254171ca7895722acdf7203d6878424c8873b051d005b26a10726479",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-DetectMultipleDistinctRiskEvents.kql",
        "query": "//Detect when a user flags 3 or more distinct Azure AD risk events within a single day\n\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n\nAADUserRiskEvents\n| where TimeGenerated > ago(7d)\n| where RiskState != \"dismissed\"\n| summarize\n    ['Distinct count of risk events']=dcount(RiskEventType),\n    ['List of risk events']=make_set(RiskEventType)\n    by UserPrincipalName, bin(TimeGenerated, 1d)\n| where ['Distinct count of risk events'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-DetectMultipleDistinctRiskEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7c962429-31d0-4eb9-81c4-bd973d32c09a",
        "query_hash": "726b76719118441624c1dfe828f79da5117ad58edeab52de90195b9e52d539fe",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindAppswithNoSignins.kql",
        "query": "//Find Azure AD applications that have had no signins for over 30 days. May be a sign of an app no longer in use or users bypassing SSO.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (365d)\n| where ResultType == 0\n| summarize arg_max(TimeGenerated, *) by AppId\n| project\n    AppDisplayName,\n    ['Last Logon Time']=TimeGenerated,\n    ['Days Since Last Logon']=datetime_diff(\"day\", now(), TimeGenerated)\n| where ['Days Since Last Logon'] > 30",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindAppswithNoSignins",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5bc4cb57-953a-4364-bcab-36471c9e9476",
        "query_hash": "bb9812a824032315892768755b7ef82973d35aa358bfa6867c4737cc8fba7155",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindCAFailurePercentage.kql",
        "query": "//Calculate the percentage of signins failing against each of your Conditional Access policies. If the percentage is high it may be worth evaulating the policy if it is fit for purpose.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| project ConditionalAccessPolicies\n| extend CA = parse_json(ConditionalAccessPolicies)\n| mv-expand bagexpansion=array CA\n| extend ['CA Policy Name'] = tostring(CA.displayName)\n| extend  ['CA Outcome'] = tostring(CA.result)\n| summarize\n    ['Total Signin Count']=count(),\n    ['Total Failed Count']=countif(['CA Outcome'] == \"failure\")\n    by ['CA Policy Name']\n| extend ['Failed Percentage'] = todouble(['Total Failed Count']) * 100 / todouble(['Total Signin Count'])\n| project-reorder\n    ['CA Policy Name'],\n    ['Total Signin Count'],\n    ['Total Failed Count'],\n    ['Failed Percentage']\n| order by ['Failed Percentage']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindCAFailurePercentage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "47fcd329-5461-4384-afbb-223a04959b19",
        "query_hash": "0389e57d581cef71be45bb995f26c05ced8477b900c233a9f1107a12e2d277c5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindGuestsAccessingMostApps.kql",
        "query": "//Find the guests in your tenant connecting to the most applications. They are the biggest risk and the best target for additional controls like Conditional Access.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where UserType == \"Guest\"\n//Exclude the Microsoft apps for guest account management\n| where AppDisplayName !in (\"My Apps\", \"Microsoft App Access Panel\", \"My Access\", \"My Profile\", \"Microsoft Invitation Acceptance Portal\")\n| summarize\n    ['Count of Applications']=dcount(AppDisplayName),\n    ['List of Application']=make_set(AppDisplayName)\n    by UserPrincipalName\n| sort by ['Count of Applications'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(30d)\n| where ErrorCode == 0\n| where IsGuestUser == 1\n//Exclude the Microsoft apps for guest account management\n| where Application  !in (\"My Apps\", \"Microsoft App Access Panel\", \"My Access\", \"My Profile\", \"Microsoft Invitation Acceptance Portal\")\n| summarize\n    ['Count of Applications']=dcount(Application),\n    ['List of Application']=make_set(Application)\n    by AccountUpn\n| sort by ['Count of Applications'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindGuestsAccessingMostApps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2980fc03-c9d9-44c0-920e-7193463e940c",
        "query_hash": "ad41675902887b395de5750d29843c418b3fda68b8b868978b3144a395bc1aa1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindInactiveManagedIdentities.kql",
        "query": "//Find Managed Identity service principals that have not successfully signed in in the last 30 days, for each Managed Identity list the Azure resources it has accessed\n//Hopefully it means the resource has already been decommissioned, if not, check to see if it still requires the access it has been granted\n\n//Data connector required for this query - Azure Active Directory - Managed Identity Signin Logs\n\n//First find any Managed Identities that haven't successfully signed on for 30 days\nAADManagedIdentitySignInLogs\n| where TimeGenerated > ago(365d)\n| where ResultType == \"0\"\n| summarize arg_max(TimeGenerated, *) by AppId\n| extend ['Days Since Last Signin'] = datetime_diff(\"day\", now(), TimeGenerated)\n| project\n    ['Last Sign in Time']=TimeGenerated,\n    ServicePrincipalName,\n    ServicePrincipalId,\n    ['Days Since Last Signin'],\n    AppId\n| where ['Days Since Last Signin'] > 30\n//Join that list of Managed Identities back to the sign in data and retrieve the Azure resources (such as Key Vault or Storage) it has accessed\n| join kind=inner (\n    AADManagedIdentitySignInLogs\n    | where TimeGenerated > ago(365d)\n    | where ResultType == \"0\"\n    | summarize ['Resources Accessed']=make_set(ResourceDisplayName) by AppId)\n    on AppId\n| project-reorder\n    ['Last Sign in Time'],\n    ['Days Since Last Signin'],\n    ServicePrincipalName,\n    ServicePrincipalId,\n    AppId,\n    ['Resources Accessed']\n| order by ['Days Since Last Signin'] desc\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindInactiveManagedIdentities",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "76549ec2-ca64-4209-9ddb-49ff2b6056f5",
        "query_hash": "23b9d1bb762aed0775373769aefc0f0c8ed34ce63fdaab67698b2659b943b37b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindInactiveServicePrincipals.kql",
        "query": "//Find Azure AD Service Principals that have not successfully signed on for the last 30 days\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(180d)\n| where ResultType == 0\n| summarize arg_max(TimeGenerated, *) by AppId\n| project\n    ['Last Successful Logon']=TimeGenerated,\n    ServicePrincipalName,\n    ServicePrincipalId,\n    AppId\n| join kind = leftanti (\n    AADServicePrincipalSignInLogs\n    | where TimeGenerated > ago(30d)\n    | where ResultType == 0\n    | summarize arg_max(TimeGenerated, *) by AppId\n    )\n    on AppId\n| extend ['Days Since Last Logon']=datetime_diff(\"day\", now(), ['Last Successful Logon'])\n| project-reorder ['Days Since Last Logon'], ['Last Successful Logon'], ServicePrincipalName, AppId, ServicePrincipalId\n| sort by ['Last Successful Logon'] desc    ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindInactiveServicePrincipals",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8fd0ee74-af27-4945-87c2-0b623c8e777d",
        "query_hash": "cfa5dd5a7dae3a2311f4a51bd8b27508e1125a42b3e25167cbd0e1a2145e067d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindNewEnterpriseApps.kql",
        "query": "//Find new applications your users are signing into in the last month vs the previous 6 months. For each find the first time the app was used, how many total signins and distinct users accessing each one\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet knownapps=\n    SigninLogs\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago (30d)\n    | distinct AppId;\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where AppId !in (knownapps)\n| where isnotempty(AppDisplayName)\n| summarize\n    ['First Time Seen']=min(TimeGenerated),\n    Count=count(),\n    ['User Count']=dcount(UserPrincipalName)\n    by AppDisplayName\n| sort by Count desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindNewEnterpriseApps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "305985a6-c096-4387-b714-cfe285a3f49a",
        "query_hash": "10932dd3feb75ed1888e612a099d4adddd2b3a88b6efb58cc2520bcb2d17ef13",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindUsersMultipleCountriesSameDay.kql",
        "query": "//Find users who have successfully signed into Azure AD from 3 or more countries in the same day\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(7d)\n| where ResultType == 0\n| where isnotempty(Location)\n| summarize\n    ['Count of countries']=dcount(Location),\n    ['List of countries']=make_set(Location)\n    by UserPrincipalName, bin(TimeGenerated, 1d)\n| where ['Count of countries'] >= 3\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(7d)\n| where ErrorCode == 0\n| where isnotempty(Country)\n| summarize\n    ['Count of countries']=dcount(Country),\n    ['List of countries']=make_set(Country)\n    by AccountUpn, bin(Timestamp, 1d)\n| where ['Count of countries'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindUsersMultipleCountriesSameDay",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2828ec5a-f202-482b-8cdb-a59262c906d1",
        "query_hash": "dd2035ca2d9016ac8ad455fe44fcf8938fdb4820e601425a1f11ed3a7095e480",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FindUsersOnlyusingTextforMFA.kql",
        "query": "//Find users who are only using text message as their MFA method\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n//You can exclude guests if you want, they may be harder to move to more secure methods, comment out the below line to include all users\n| where UserType == \"Member\"\n| mv-expand todynamic(AuthenticationDetails)\n| extend ['Authentication Method'] = tostring(AuthenticationDetails.authenticationMethod)\n| where ['Authentication Method'] !in (\"Previously satisfied\", \"Password\", \"Other\")\n| where isnotempty(['Authentication Method'])\n| summarize\n    ['Count of distinct MFA Methods']=dcount(['Authentication Method']),\n    ['List of MFA Methods']=make_set(['Authentication Method'])\n    by UserPrincipalName\n//Find users with only one method found and it is text message\n| where ['Count of distinct MFA Methods'] == 1 and ['List of MFA Methods'] has \"text\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FindUsersOnlyusingTextforMFA",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "dd1a91c1-ac5e-4702-ac8f-dda9b998094b",
        "query_hash": "447c2b4926360d379f526072fa814410a577b45e5350b1aa29fcd37b20e416c7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FirstTimeLegacyAuth.kql",
        "query": "//Find users that have connected successfully via legacy auth for the first time\n//First find users with existing successful legacy auth connections\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nlet knownusers=\n    SigninLogs\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)\n    | where ResultType == 0\n    | where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\")\n    | distinct UserPrincipalName;\n//Find any new connections in the last day from users not in the existing list\nSigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == 0\n| where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\")\n| where isnotempty(ClientAppUsed)\n| where UserPrincipalName !in (knownusers)\n| distinct UserPrincipalName, AppDisplayName, ClientAppUsed, IPAddress\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//First find users with existing successful legacy auth connections. Advanced Hunting only stores 30 days of data, but otherwise the same query works\nlet knownusers=\n    AADSignInEventsBeta\n    | where Timestamp > ago(30d) and Timestamp < ago(1d)\n    | where LogonType == @\"[\"\"interactiveUser\"\"]\"\n    | where ErrorCode == 0\n    | where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\")\n    | where isnotempty(ClientAppUsed)\n    | distinct AccountUpn;\n//Find any new connections in the last day from users not in the existing list\nAADSignInEventsBeta\n| where Timestamp > ago(1d)\n| where LogonType == @\"[\"\"interactiveUser\"\"]\"\n| where ErrorCode == 0\n| where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\")\n| where isnotempty(ClientAppUsed)\n| where AccountUpn !in (knownusers)\n| distinct AccountUpn, Application, ClientAppUsed, IPAddress\n\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FirstTimeLegacyAuth",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0cb0dcec-edfc-4dec-829d-3607e21d4371",
        "query_hash": "81092762639d390bc2f126c69f2a988006196aa12397929ddf8473b0365328fd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FirstTimeRoleAddition.kql",
        "query": "//Detect when a user adds someone to an Azure AD privileged role for the first time\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//First build a set of known users who have completed this action previously\nlet knownusers=\n    AuditLogs\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)\n    | where OperationName == \"Add member to role\"\n    //Exclude role additions made by the Azure AD PIM service\n    | where Identity != \"MS-PIM\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | distinct Actor;\n//Find events in the last day by users not in the known list\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName == \"Add member to role\"\n| where Identity != \"MS-PIM\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Azure AD Role Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where Actor !in (knownusers)\n| project TimeGenerated, Actor, Target, ['Azure AD Role Name']\n\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FirstTimeRoleAddition",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ea65d25b-8c99-46fe-a5f9-f8f01fd53d3a",
        "query_hash": "2640d58abe80a1895e233ca3e286c5b27c9c551021d2adf3615feac748182b59",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-FirstTimeSPBlockedbyCA.kql",
        "query": "//Detect the first time a service principal fails Conditional Access\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\n//Microsoft Sentinel query\n//First find service principals that have previously failed\nlet knownfailures=\n    AADServicePrincipalSignInLogs\n    | where TimeGenerated > ago(30d) and TimeGenerated < ago (1d)\n    | where ResultType == \"53003\"\n    | distinct AppId;\n//Find any new failures in the last day\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == \"53003\"\n| where AppId !in (knownfailures)\n| project\n    TimeGenerated,\n    ServicePrincipalName,\n    ServicePrincipalId,\n    AppId,\n    ConditionalAccessPolicies,\n    IPAddress\n\n//Detect the first time a service principal fails Conditional Access\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//Advanced Hunting query\nlet knownfailures=\n    AADSpnSignInEventsBeta\n    | where Timestamp > ago(30d) and Timestamp < ago (1d)\n    | where ErrorCode == \"53003\"\n    | distinct ApplicationId;\nAADSpnSignInEventsBeta\n| where Timestamp > ago(1d)\n| where ErrorCode == \"53003\"\n| where ApplicationId  !in (knownfailures)\n| project\n    Timestamp,\n    ServicePrincipalName,\n    ServicePrincipalId,\n    ApplicationId,\n    IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-FirstTimeSPBlockedbyCA",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5c2ad5c9-f0c6-43d3-868d-3e933f2403ad",
        "query_hash": "37f49681ea3ba23fdab9d43b98ffcf944fe6f050705bfe6789002ea76b5d620b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-GuestAddedtoAADRole.kql",
        "query": "//Detects when an Azure AD guest is added to an Azure AD role\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Add member to role\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where Target contains \"#ext#\"\n| project TimeGenerated, OperationName, Actor, Target, RoleAdded",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-GuestAddedtoAADRole",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "be390315-8b73-43f2-a7d3-10969e6fb980",
        "query_hash": "802ae2fb2163e890115e1b6cba196cf54596b372aeb42339b97d5dbb58cbb016",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-GuestInvitesSentvsRedeemed.kql",
        "query": "//Visualizes the total guest invites sent from your Azure AD tenant vs those redeemed. Data is summarized per week.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet timerange=180d;\nAuditLogs\n| where TimeGenerated > ago (timerange)\n| where OperationName in (\"Redeem external user invite\", \"Invite external user\")\n| summarize\n    InvitesSent=countif(OperationName == \"Invite external user\"),\n    InvitesRedeemed=countif(OperationName == \"Redeem external user invite\")\n    by startofweek(TimeGenerated)\n| render columnchart\n    with (\n    title=\"Guest Invites Sent v Guest Invites Redeemed\",\n    xtitle=\"Invites\",\n    kind=unstacked)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-GuestInvitesSentvsRedeemed",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "62ef74c0-2db6-4fb1-9c60-a22a8af0a6e4",
        "query_hash": "a13d8202c0bfa429a08c34c98eed4c9a8820e6ab18a9009af338b3f2943ef6dd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-GuestsAccessingNewApplications.kql",
        "query": "//Find when inbound Azure AD guests access applications for the first time\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//First find applications that have previously had Azure AD guest signins\nlet knownapps=\n    SigninLogs\n    | where TimeGenerated > ago (90d) and TimeGenerated < ago(7d)\n    | where ResultType == 0\n    | where UserType == \"Guest\"\n//Include only inbound guests (guests accessing your tenant)\n    | where AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId\n    | distinct AppDisplayName;\n//Lookup signins from the last week and find guest sign ins to applications not on the known list\nSigninLogs\n| where TimeGenerated > ago (7d)\n| where ResultType == 0\n| where UserType == \"Guest\"\n| where AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId\n| where AppDisplayName !in (knownapps)\n//Summarize the access to those applications by time first seen and who is accessing each application\n| summarize\n    ['First Logon Time']=min(TimeGenerated),\n    ['Total Guest Signins']=count(),\n    ['Distinct Guest Signins']=dcount(UserPrincipalName),\n    ['List of Guest Users']=make_set(UserPrincipalName)\n    by AppDisplayName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-GuestsAccessingNewApplications",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "af6d69f5-ce69-45e3-b7c7-6201be13d2d8",
        "query_hash": "0adc055ff72a974c6dc7024a7fe008f4200b444ef85f79710ca11494432c57f9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-GuestsInvitedbutnotRedeemed.kql",
        "query": "//Lists guests who have been invited but not yet redeemed their invites.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Excludes newly invited guests (last 30 days).\nlet timerange=365d;\nlet timeframe=30d;\nAuditLogs\n| where TimeGenerated between (ago(timerange) .. ago(timeframe)) \n| where OperationName == \"Invite external user\"\n| extend GuestUPN = tolower(tostring(TargetResources[0].userPrincipalName))\n| project TimeGenerated, GuestUPN\n| join kind=leftanti  (\n    AuditLogs\n    | where TimeGenerated > ago (timerange)\n    | where OperationName == \"Redeem external user invite\"\n    | where CorrelationId <> \"00000000-0000-0000-0000-000000000000\"\n    | extend d = tolower(tostring(TargetResources[0].displayName))\n    | parse d with * \"upn: \" GuestUPN \",\" *\n    | project TimeGenerated, GuestUPN)\n    on GuestUPN\n| distinct GuestUPN",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-GuestsInvitedbutnotRedeemed",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5a1ddfc8-6b02-458f-8044-0d9f38e908cb",
        "query_hash": "cc24745fdc429363fc527f4647d6f3e1d66c8e5366c37b662cc4f88c8a582c6c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-HighMediumRealtimeRiskforAADRoles.kql",
        "query": "//Query to find high or medium real time risk events for users who have an assigned Azure AD role\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet id=\n    IdentityInfo\n    | summarize arg_max(TimeGenerated, *) by AccountUPN;\nlet signin=\n    SigninLogs\n    | where TimeGenerated > ago (14d)\n    | where RiskLevelDuringSignIn in ('high', 'medium')\n    | join kind=inner id on $left.UserPrincipalName == $right.AccountUPN\n    | extend SigninTime = TimeGenerated\n    | where RiskEventTypes_V2 != \"[]\";\nAADUserRiskEvents\n| where TimeGenerated > ago (14d)\n| extend RiskTime = TimeGenerated\n| where DetectionTimingType == \"realtime\"\n| where RiskDetail !has \"aiConfirmedSigninSafe\"\n| join kind=inner signin on CorrelationId\n| where AssignedRoles != \"[]\"\n| extend TimeDelta = abs(SigninTime - RiskTime)\n| project\n    SigninTime,\n    UserPrincipalName,\n    RiskTime,\n    TimeDelta,\n    RiskEventTypes,\n    RiskLevelDuringSignIn,\n    City,\n    Country,\n    EmployeeId,\n    AssignedRoles",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-HighMediumRealtimeRiskforAADRoles",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1ca98d87-b7bb-436b-beb9-654da5ebb17e",
        "query_hash": "d9a5f328103a1b8a895bf350dbe3605bdaec04e26c00bc362698f9b8edc98d74",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-InactiveGuestAccounts.kql",
        "query": "//Find guest accounts that haven't signed in for a period of time, this example uses 45 days\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet timerange=180d;\nlet timeframe=45d;\nSigninLogs\n| where TimeGenerated > ago(timerange)\n| where UserType == \"Guest\" or UserPrincipalName contains \"#ext#\"\n| where ResultType == 0\n| summarize arg_max(TimeGenerated, *) by UserPrincipalName\n| join kind = leftanti  \n    (\n    SigninLogs\n    | where TimeGenerated > ago(timeframe)\n    | where UserType == \"Guest\" or UserPrincipalName contains \"#ext#\"\n    | where ResultType == 0\n    | summarize arg_max(TimeGenerated, *) by UserPrincipalName\n    )\n    on UserPrincipalName\n| project UserPrincipalName\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-InactiveGuestAccounts",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ebf9973c-7b9f-4ee8-a067-7b78d5f52cc9",
        "query_hash": "b50de12bce388db335080c2a082abdeec3af5d065d205d9693b823f276d587e7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-InactivePrivilegedUsers.kql",
        "query": "//Find users who hold privileged Azure AD roles but haven't signed onto Azure for 30 days\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet applications = dynamic([\"Azure Active Directory PowerShell\", \"Microsoft Azure PowerShell\", \"Graph Explorer\", \"ACOM Azure Website\", \"Azure Portal\", \"Azure Advanced Threat Protection\"]);\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| where isnotempty(AssignedRoles)\n| project-rename UserPrincipalName=AccountUPN\n| where AssignedRoles != \"[]\"\n| summarize arg_max(TimeGenerated, *) by UserPrincipalName\n| join kind=leftanti (\n    SigninLogs\n    | where TimeGenerated > ago(30d)\n    | where AppDisplayName in (applications)\n    | where ResultType == \"0\"\n    )\n    on UserPrincipalName\n| project UserPrincipalName, AssignedRoles",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-InactivePrivilegedUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "223b2ced-d2cd-45f1-957e-f2d5f1a801be",
        "query_hash": "c81315d85b0f6b4c931eb484f314551c5f0e811a6cb75c875676b57c9993fcd5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-LegacyAuthPivotTable.kql",
        "query": "//Create a pivot table showing all your users who have signed in with legacy auth, which applications they are using (such as IMAP or ActiveSync) and the count of each\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\")\n| where isnotempty(ClientAppUsed)\n| evaluate pivot(ClientAppUsed, count(), UserPrincipalName)\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(30d)\n| where ErrorCode == 0\n| where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\")\n| where isnotempty(ClientAppUsed)\n| evaluate pivot(ClientAppUsed, count(), AccountUpn)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-LegacyAuthPivotTable",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "629e9002-b75d-42a2-9708-a127cf228311",
        "query_hash": "11c312e3b447731e455cf908e95e0c31fcd0eef0e2a73e28f1f77bd03d16563e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ManagedIdentityAccessingNewResources.kql",
        "query": "//Detect when an Azure AD managed identity accesses a resource for the first time, i.e an identity that previously only accessed storage accesses a key vault\n\n//Data connector required for this query - Azure Active Directory - Managed Identity Signin Logs\n\nAADManagedIdentitySignInLogs\n| where TimeGenerated > ago (60d) and TimeGenerated < ago(1d)\n| where ResultType == \"0\"\n| distinct ServicePrincipalId, ResourceIdentity\n| join kind=rightanti (\n    AADManagedIdentitySignInLogs\n    | where TimeGenerated > ago (1d)\n    | where ResultType == \"0\"\n    )\n    on ServicePrincipalId, ResourceIdentity\n| project\n    ['Service Principal DisplayName']=ServicePrincipalName,\n    ['Service Principal Id']=ServicePrincipalId,\n    ['Azure Resource Identity Id']=ResourceIdentity,\n    ['Azure Resource DisplayName']=ResourceDisplayName\n| distinct\n    ['Service Principal DisplayName'],\n    ['Service Principal Id'],\n    ['Azure Resource DisplayName'],\n    ['Azure Resource Identity Id']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ManagedIdentityAccessingNewResources",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6bff60f0-5314-45e0-8493-45aa3f76c96a",
        "query_hash": "0f00b1f0a47789fa2719f0a68ec1d3b5e4a54750af46e0b1ae78f854b8ab96a6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ManagedIdentitySummaryofResources.kql",
        "query": "//Summarize the Azure resources that each of your managed identities are accessing. The higher the count the higher the potential blast radius.\n\n//Data connector required for this query - Azure Active Directory - Managed Identity Signin Logs\n\nAADManagedIdentitySignInLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| summarize\n    ['List of Azure Resources Accessed']=make_set(ResourceDisplayName),\n    ['Distinct Resources Accessed']=dcount(ResourceDisplayName)\n    by ServicePrincipalName\n| sort by ['Distinct Resources Accessed'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ManagedIdentitySummaryofResources",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6aabe404-57d8-4d42-b5ef-0c4a520250e6",
        "query_hash": "576b1b270f3a3d202e39e73ff2b1f0e8e6a9166a65e0a83ca4aad97deb63cfb7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MFAChangesfromunknownIP.kql",
        "query": "//Detect when MFA details for a user are changed, deleted or registered from an IP address that user has never signed in successfully from\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Cache all successful sign in data for users using materialize operator\nlet signindata=materialize (\n    SigninLogs\n    | where TimeGenerated > ago(180d)\n    | where ResultType == 0\n    | distinct UserPrincipalName, UserId, IPAddress);\n//Search for audit events showing MFA registrations, deletions or changes in the last day\nAuditLogs\n| where TimeGenerated > ago(10d)\n| where OperationName in (\"User registered security info\", \"User deleted security info\", \"User registered all required security info\")\n| where Result == \"success\"\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend UserId = tostring(TargetResources[0].id)\n| project UserPrincipalName, UserId, IPAddress, OperationName\n//Join those events back to our summarized sign in data looking for users who register MFA from an IP they have never signed in from\n| where isnotempty(IPAddress)\n| join kind=leftanti (signindata) on IPAddress, UserId\n| distinct UserPrincipalName, IPAddress, OperationName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MFAChangesfromunknownIP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b1119c2a-e828-47cf-8d4f-90adbd5f7ff2",
        "query_hash": "1858de64bbb70bce90d6aa981bb1938046f24cda76c58546a1acaf62d0475a78",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MFACountPerUser.kql",
        "query": "//Calculate how often your users are actively challenged for MFA vs when it was previously satisfied per day\n//Return users who are challenged over the threshold per day\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet threshold = 5;\nSigninLogs\n| where TimeGenerated > ago(90d)\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| extend x=todynamic(AuthenticationDetails)\n| mv-expand x\n| project TimeGenerated, x, UserPrincipalName\n| extend MFAResultStep = tostring(x.authenticationStepResultDetail)\n| summarize MFARequired=countif(MFAResultStep == \"MFA completed in Azure AD\"), PreviouslySatisfied=countif(MFAResultStep == \"MFA requirement satisfied by claim in the token\") by UserPrincipalName, startofday(TimeGenerated)\n| where MFARequired >= threshold",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MFACountPerUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0bee3b4c-9e95-43e3-b19e-c00a3ea67417",
        "query_hash": "121380cf82a170b9763fdc4a23b1257858255a49156455b626953dda8e3186a3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MFAMethodsPivotTable.kql",
        "query": "//Create a pivot table of all non password authentication methods by user. This is useful to migrate users from less secure methods like text message to more secure methods.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nSigninLogs\n| where TimeGenerated > ago(30d)\n| mv-expand todynamic(AuthenticationDetails)\n| extend ['Authentication Method'] = tostring(AuthenticationDetails.authenticationMethod)\n//Exclude previously satisifed, passwords and other data and any UserPrincipalName that comes through as a guid\n| where ['Authentication Method'] !in (\"Previously satisfied\", \"Password\", \"Other\")\n    and isnotempty(['Authentication Method'])\n    and not(UserPrincipalName matches regex isGUID)\n//Create pivot table of each method and the count by user\n| evaluate pivot(['Authentication Method'], count(), UserPrincipalName)\n| sort by UserPrincipalName asc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MFAMethodsPivotTable",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f1fac7e7-5f1f-4a71-b84b-ecceaec917bd",
        "query_hash": "6ac6485deb14e3083b4003a52099c357087bfefd5f90d5f337f7fb4f99517520",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MFANewLocationandMethod.kql",
        "query": "//Alert when a user successfully signs in from both a new location and using a new MFA method\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Cache all authentication methods and locations to memory using the materialize function for the last 6 months\nlet mfahistory = materialize  (\n    SigninLogs\n    | where TimeGenerated > ago (180d) and TimeGenerated < ago(1d)\n    | where ResultType == 0\n    | where AuthenticationRequirement == \"multiFactorAuthentication\"\n    | extend AuthMethod = tostring(MfaDetail.authMethod)\n    | where isnotempty(AuthMethod)\n    | distinct UserPrincipalName, AuthMethod, Location);\n//Find sign ins from the last day that have both a new location and MFA method\nmfahistory\n| join kind=rightanti  (\n    SigninLogs\n    | where TimeGenerated > ago (1d)\n    | where ResultType == 0\n    | where AuthenticationRequirement == \"multiFactorAuthentication\"\n    | extend AuthMethod = tostring(MfaDetail.authMethod)\n    | where isnotempty(AuthMethod)\n    | distinct \n        UserPrincipalName,\n        AuthMethod,\n        AppDisplayName,\n        Location,\n        IPAddress)\n    on UserPrincipalName, Location",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MFANewLocationandMethod",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d59c2cb8-8904-4aab-8d7a-620d91e2b37e",
        "query_hash": "61358302ab7aa5c7ceb34a50d59b62c56efc700d1405bea0598be198292de82f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MFAPercentageperapp.kql",
        "query": "//Calculate the percentage of signins to each of your Azure AD applications that used MFA\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| summarize\n    ['Total Signin Count']=count(),\n    ['Total MFA Count']=countif(AuthenticationRequirement == \"multiFactorAuthentication\"),\n    ['Total non MFA Count']=countif(AuthenticationRequirement == \"singleFactorAuthentication\")\n    by AppDisplayName\n| project\n    AppDisplayName,\n    ['Total Signin Count'],\n    ['Total MFA Count'],\n    ['Total non MFA Count'],\n    MFAPercentage=(todouble(['Total MFA Count']) * 100 / todouble(['Total Signin Count']))\n| sort by ['Total Signin Count'] desc, MFAPercentage asc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MFAPercentageperapp",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "206e3cb9-053c-4a69-9a33-558da15ebf07",
        "query_hash": "e3d0870a09b13cc96e559145c414add90c7935cb2496806213ceec6677a9cf9c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MFARegistrationfollowedbySSPR.kql",
        "query": "//Detects when a user registers MFA details on their account and then completes self service password reset with a short timeframe\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet timeframe=4h;\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName in (\"User changed default security info\", \"User registered all required security info\", \"User registered security info\")\n| extend User = tostring(TargetResources[0].userPrincipalName)\n| project SecurityInfoTime=TimeGenerated, User, OperationName\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(1d)\n    | where OperationName in (\"Reset password (self-service)\", \"Change password (self-service)\")\n    | where Result == \"success\"\n    | extend User = tostring(TargetResources[0].userPrincipalName)\n    | project PasswordResetTime=TimeGenerated, OperationName, User)\n    on User\n| where (PasswordResetTime - SecurityInfoTime) between (0min .. timeframe)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MFARegistrationfollowedbySSPR",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d21c6c0e-cfbc-489c-923b-4d0592533ef1",
        "query_hash": "82e13d8afaf4bae8e8c4bb5f6464f57292c24ad7c71cb44a84e87d1e966e7f8e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MuiltipleConditionalAccessFailures.kql",
        "query": "//Alert when a user fails Azure AD Conditional Access policies to 5 or more unique applications within a short time period, this example uses 1 hour.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (1d)\n| project TimeGenerated, ConditionalAccessPolicies, UserPrincipalName, AppDisplayName\n| mv-expand ConditionalAccessPolicies\n| extend CAResult = tostring(ConditionalAccessPolicies.result)\n| extend CAPolicyName = tostring(ConditionalAccessPolicies.displayName)\n| where CAResult == \"failure\"\n| summarize\n    ['List of Failed Application']=make_set(AppDisplayName),\n    ['Count of Failed Application']=dcount(AppDisplayName)\n    by UserPrincipalName, bin(TimeGenerated, 1h)\n| where ['Count of Failed Application'] >= 5",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MuiltipleConditionalAccessFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c83a4104-06a8-4a86-9191-01352037b884",
        "query_hash": "ab23ea28fe4b2a51006c89fce8ced5561a671f9bdd99966bb046c98c20cba304",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MultipleCAFailures.kql",
        "query": "//Detect when a user is blocked by Conditional Access after failing 3 unique CA policies or 3 unique applications over a 2 hour period\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == \"53003\"\n| mv-expand ConditionalAccessPolicies\n| extend ['CA Policy Name'] = tostring(ConditionalAccessPolicies.displayName)\n| where ConditionalAccessPolicies.result == \"failure\"\n| summarize\n    ['Total count of logon failures']=count(),\n    ['Count of failed applications']=dcount(AppDisplayName),\n    ['List of failed applications']=make_set(AppDisplayName),\n    ['Count of failed policy names']=dcount(['CA Policy Name']),\n    ['List of failed policy names']=make_set(['CA Policy Name'])\n    by UserPrincipalName, bin(TimeGenerated, 2h)\n| where ['Count of failed applications'] >= 3 or ['Count of failed policy names'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MultipleCAFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a1cb4050-09cd-4909-a230-4e8b0fdc042f",
        "query_hash": "dbc181d5a3fe776184db45a814123deae62dccd75d95bc72f05857369de11e63",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-MultipleMFAFailuresPrivUsers.kql",
        "query": "//Detect when a user who holds an Azure AD privilege role fails MFA multiple times in a short time period. This example uses 2 failures within 20 minutes.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\nSigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == \"500121\"\n| where UserPrincipalName in (privusers)\n| mv-expand todynamic(AuthenticationDetails)\n| extend ['MFA Failure Type'] = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n| where ['MFA Failure Type'] startswith \"MFA denied\"\n| summarize\n    ['MFA Failure Count']=count(),\n    ['MFA Failure Reasons']=make_list(['MFA Failure Type'])\n    by UserPrincipalName, bin(TimeGenerated, 20m)\n| where ['MFA Failure Count'] >= 2",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-MultipleMFAFailuresPrivUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "77e8f8e3-88f4-4db8-8327-2e283a818882",
        "query_hash": "96e2279dee64619c2aa583cb9b991d50dd20ab54f6f8b652edec7da0d419518a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ParseIPInfofromSecurityAlert.kql",
        "query": "//Query to parse IP information from Security Alerts\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where AlertName in (\"Impossible travel activity\", \"Atypical Travel\", \"Anonymous IP address\", \"Anomalous Token\")\n| parse Entities with * 'AadUserId\": \"' aadid_ '\",' *\n| extend ep_ = parse_json(ExtendedProperties)\n| extend s = tostring(ep_[\"IP Addresses\"])\n| extend ipv4_ = extract_all(@\"(([\\d]{1,3}\\.){3}[\\d]{1,3})\", dynamic([1]), s)\n| extend ipv4Add_ = translate('[\"]', '', tostring(ipv4_))\n| extend ipv6_ = extract_all(@\"(([\\d|\\w]{1,4}\\:){7}[\\d|\\w]{1,4})\", dynamic([1]), s)\n| extend ipv6Add_ = translate('[\"]', '', tostring(ipv6_))\n| project TimeGenerated, AlertName, ipv4Add_, ipv6Add_, CompromisedEntity",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ParseIPInfofromSecurityAlert",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "077a646c-91e4-4324-a68e-a7acbac0f8a1",
        "query_hash": "2557a05421b10379a6355acc885951f538931fbc6be3fbe2b8ecab2011b78e88",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ParseUserAgent.kql",
        "query": "//Parses the user agent into its various components to allow hunting on specific browser versions or patch levels\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| extend UserAgentDetail = todynamic(parse_user_agent(UserAgent, \"browser\"))\n| extend UserAgentFamily = tostring(parse_json(tostring(UserAgentDetail.Browser)).Family)\n| extend UserAgentMajorVersion = toint(parse_json(tostring(UserAgentDetail.Browser)).MajorVersion)\n| extend UserAgentMinorVersion = toint(parse_json(tostring(UserAgentDetail.Browser)).MinorVersion)\n| extend UserAgentPatch = toint(parse_json(tostring(UserAgentDetail.Browser)).Patch)\n| project\n    TimeGenerated,\n    UserPrincipalName,\n    AppDisplayName,\n    ResultType,\n    IPAddress,\n    Location,\n    UserAgentFamily,\n    UserAgentMajorVersion,\n    UserAgentMinorVersion,\n    UserAgentPatch,\n    UserAgent",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ParseUserAgent",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2a480f5c-040c-46d5-bbe4-becae232a38c",
        "query_hash": "ef45ae1b1e7b61668a86904e348fb540d3e6c7d78736701ef11c03ff7c5b6645",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-PotentialMFANumberMatchingAbuse.kql",
        "query": "//Detect when a user has been potentially comrpomised but is stopped by MFA number matching or otherwise denied. Even if stopped by MFA the users credentials need to be rotated.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//This query finds any time a user denies an authentication, enters the wrong number or just doesn't respond three or more times in a single sign in event\nSigninLogs\n| project\n    TimeGenerated,\n    AuthenticationRequirement,\n    AuthenticationDetails,\n    UserPrincipalName,\n    CorrelationId,\n    ResultType\n| where ResultType == 500121\n| mv-expand todynamic(AuthenticationDetails)\n| extend AuthResult = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n| where AuthResult in (\"MFA denied; user did not select the correct number\", \"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n//Create a list of denied MFA challenges by sign in attempt (single CorrelationId)\n| summarize ['Result Types']=make_list(AuthResult) by CorrelationId, UserPrincipalName\n//Find results where there are at least 3 failures within the same sign in, i.e three denies, three did not respond events or three did not select the correct number\n| where array_length( ['Result Types']) > 2\n\n//This is the same query but grouped by username and 10 minute period, in case the attacker is starting a new authentication flow and generates a new CorrelationId\nSigninLogs\n| project\n    TimeGenerated,\n    AuthenticationRequirement,\n    AuthenticationDetails,\n    UserPrincipalName,\n    CorrelationId,\n    ResultType\n| where ResultType == 500121\n| mv-expand todynamic(AuthenticationDetails)\n| extend AuthResult = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n| where AuthResult in (\"MFA denied; user did not select the correct number\", \"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n//Create a list of denied MFA challenges by UserPrincipalName and 10 minute window (to account for multiple sign in attempts)\n| summarize ['Result Types']=make_list(AuthResult) by UserPrincipalName, bin(TimeGenerated, 10m)\n//Find results where there are at least 3 failures within the same sign in, i.e three denies, three did not respond events or three did not select the correct number\n| where array_length( ['Result Types']) > 2",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-PotentialMFANumberMatchingAbuse",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "89e42667-7a69-4c16-b8e9-44c45932f486",
        "query_hash": "ae95d74d2d4f4570681e6145be8cd9f77e9f57b493ebc557bc7b1b92a7bb7238",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-PotentialMFASpam.kql",
        "query": "//Detect when a user denies MFA several times within a single sign in attempt and then completes MFA.\n//This could be a sign of someone trying to spam your users with MFA prompts until they accept.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Select your threshold of how many times a user denies MFA before accepting\nlet threshold=2;\nSigninLogs\n| project\n    TimeGenerated,\n    AuthenticationRequirement,\n    AuthenticationDetails,\n    UserPrincipalName,\n    CorrelationId\n//Include only authentications that require MFA\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n//Extend authentication result description\n| extend AuthResult = tostring(parse_json(AuthenticationDetails)[1].authenticationStepResultDetail)\n//Find results that include both denined and completed MFA\n| where AuthResult in (\"MFA completed in Azure AD\", \"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n//Create a list of completed and denied MFA challenges per correlation id\n| summarize ['Result Types']=make_list(AuthResult) by CorrelationId, UserPrincipalName\n//Ensure the list includes both completed and denied MFA challenges\n| where ['Result Types'] has (\"MFA completed in Azure AD\") and ['Result Types'] has_any (\"MFA denied; user declined the authentication\", \"MFA denied; user did not respond to mobile app notification\")\n| mv-expand ['Result Types'] to typeof(string)\n//Expand and count all the denied challenges and then return CorrelationId's where the MFA denied count is greater or equal to your threshold\n| where ['Result Types'] has_any (\"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n| summarize ['Denied MFA Count']=count()by ['Result Types'], CorrelationId, UserPrincipalName\n| where ['Denied MFA Count'] >= threshold\n\n//Alternate query, instead of grouping signins by CorrelationId we group them by UserPrincipalName and 10 minute blocks of time.\n//In case the bad actor is starting a whole new sign in each time and generating a new CorrelationId for each attempt.\n//Select your threshold of how many times a user denies MFA before accepting\nlet threshold=2;\nSigninLogs\n| project\n    TimeGenerated,\n    AuthenticationRequirement,\n    AuthenticationDetails,\n    UserPrincipalName,\n    CorrelationId\n//Include only authentications that require MFA\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n//Extend authentication result description\n| extend AuthResult = tostring(parse_json(AuthenticationDetails)[1].authenticationStepResultDetail)\n//Find results that include both denined and completed MFA\n| where AuthResult in (\"MFA completed in Azure AD\", \"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n//Create a list of completed and denied MFA challenges per user principal name over 10 minute periods\n| summarize ['Result Types']=make_list(AuthResult) by UserPrincipalName, bin(TimeGenerated, 10m)\n//Ensure the list includes both completed and denied MFA challenges\n| where ['Result Types'] has (\"MFA completed in Azure AD\") and ['Result Types'] has_any (\"MFA denied; user declined the authentication\", \"MFA denied; user did not respond to mobile app notification\")\n| mv-expand ['Result Types'] to typeof(string)\n//Expand and count all the denied challenges and then return UserPrincipalNames where the MFA denied count is greater or equal to your threshold\n| where ['Result Types'] has_any (\"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n| summarize ['Denied MFA Count']=count()by ['Result Types'], UserPrincipalName\n| where ['Denied MFA Count'] >= threshold\n\n//Simple query to count users being spammed with denies or not responding in one hour time windows\nSigninLogs\n| project\n    TimeGenerated,\n    AuthenticationRequirement,\n    AuthenticationDetails,\n    UserPrincipalName,\n    CorrelationId\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| extend AuthResult = tostring(parse_json(AuthenticationDetails)[1].authenticationStepResultDetail)\n| where AuthResult in (\"MFA denied; user declined the authentication\",\"MFA denied; user did not respond to mobile app notification\")\n| summarize ['Result Types']=make_list(AuthResult), ['Result Count']=count() by UserPrincipalName, bin(TimeGenerated, 60m)\n//Find hits with greater than 3 failures in an hour\n| where ['Result Count'] > 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-PotentialMFASpam",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0c27ce37-4c96-4202-bfa8-e536774b3998",
        "query_hash": "7141549f6a8d0e76667e0c9001cb1de1bb169d778b44ede00f029018284181bb",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-RiskEventfollowedbyMFAchanges.kql",
        "query": "// Detects when a user flags an Azure AD risk event followed by changes to their MFA profile - potentially detecting a bad actor changing MFA details\n\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n// Timeframe = the minutes between flagging a risk event and MFA details being changed\nlet timeframe = 120;\n//Search for real time risk events only and retrieve Correlation Id\nAADUserRiskEvents\n| where TimeGenerated > ago (1d)\n| where DetectionTimingType == \"realtime\"\n| where RiskDetail <> \"aiConfirmedSigninSafe\"\n| project CorrelationId\n//Join Correlation Id back to sign in data to retrieve the initial sign in time that was flagged for risk\n| join kind=inner(\nSigninLogs\n| where TimeGenerated > ago (1d))\non CorrelationId\n| summarize ['Risky Signin Time']=min(TimeGenerated) by CorrelationId, UserPrincipalName\n//Join risky sign in UserPrincipalName to audit log for MFA events\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago (1d)\n    | where OperationName in (\"User registered security info\", \"User deleted security info\",\"User registered all required security info\")\n    | where Result == \"success\"\n    | extend UserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n//Find the latest event in the MFA registration process\n    | summarize arg_max(TimeGenerated, *) by UserPrincipalName\n    | project\n        ['MFA Change Time']=TimeGenerated,\n        OperationName,\n        UserPrincipalName)\n    on UserPrincipalName\n//Calculate the time between the initial sign in event and the MFA change time\n| extend ['Minutes Between Events']=datetime_diff(\"minute\",['MFA Change Time'], ['Risky Signin Time'])\n| project-away UserPrincipalName1\n| project-reorder ['Risky Signin Time'], ['MFA Change Time'], ['Minutes Between Events'], UserPrincipalName, OperationName, CorrelationId\n//Find events where the time between the two events was less than 120 minutes\n| where ['Minutes Between Events'] < timeframe",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-RiskEventfollowedbyMFAchanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a0ee7f1b-bcba-4b76-9bd2-84b639875dde",
        "query_hash": "dc85a5412b1e84bf73a521fd00a0b77968c475834914e51ef299f2eb9c8511cc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-RoleAddedtoServicePrincipal.kql",
        "query": "// Detects when a service principal has been added to an Azure AD role\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Add member to role\"\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend ['Service Principal Object Id'] = tostring(TargetResources[0].id)\n| extend ['Application Display Name'] = tostring(TargetResources[0].displayName) \n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Azure AD Role Added'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| project TimeGenerated, Actor, ['Azure AD Role Added'], ['Service Principal Object Id'], ['Application Display Name']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-RoleAddedtoServicePrincipal",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9a785782-dfc2-426d-8033-743eb484bfac",
        "query_hash": "90022080e0181a2f703d75c06f0ad9b0794d954c5dfbdf4baeb662dccd2b50ac",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SecurityAlertWithNewAgent.kql",
        "query": "//Query to identity Security Alerts where they were triggered by a new user agent not seen for the previous 7 days. Update known IP Addresses from \"1.1.1\" to your corporate IP addresses to exclude\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nlet IPs=\n    SecurityAlert\n    | project\n        TimeGenerated,\n        Status,\n        AlertName,\n        CompromisedEntity,\n        ExtendedProperties,\n        ProviderName\n    | where TimeGenerated > ago (1h)\n    | where ProviderName in ('MCAS', 'IPC')\n    | where AlertName in ('Impossible travel activity', 'Multiple failed login attempts', 'Unfamiliar sign-in properties', 'Anonymous IP address', 'Atypical travel')\n    | where Status contains \"New\"\n    | extend Properties = tostring(parse_json(ExtendedProperties))\n    | extend UserPrincipalName = CompromisedEntity\n    | extend ipv4Addresses = extract_all(@\"(([\\d]{1,3}\\.){3}[\\d]{1,3})\", dynamic([1]), Properties)\n    | extend ipv4Add = translate('[\"]', '', tostring(ipv4Addresses))\n    | extend ipv4Split =split(ipv4Add, \",\")\n    | mv-expand ipv4Split\n    | extend ipv4Split_s = tostring(ipv4Split);\nSigninLogs\n| project\n    TimeGenerated,\n    UserPrincipalName,\n    IPAddress,\n    AppDisplayName,\n    ResultType,\n    UserAgent,\n    Location\n| where TimeGenerated > ago(7d)\n| where IPAddress !startswith \"1.1.1.\"\n| where ResultType == 0 or ResultType == 50158\n| join kind=inner IPs on UserPrincipalName, $left.IPAddress == $right.ipv4Split_s\n| summarize AgentCount = count()by UserPrincipalName, UserAgent\n| where AgentCount == 1",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SecurityAlertWithNewAgent",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "04d59311-a260-475b-98da-cc3aa9ed082c",
        "query_hash": "c5a0653b50b8aceeaf83b5fcde065d5b7bf785547e919a209d1c09714ad49baf",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalCreatedbyManagedIdentity.kql",
        "query": "//Detect when an Azure AD service principal is created for a managed identity\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"Add service principal\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Service Principal DisplayName'] = tostring(TargetResources[0].displayName)\n| extend ['Service Principal Id'] = tostring(TargetResources[0].id)\n| where Actor == \"Managed Service Identity\"\n| project TimeGenerated, ['Service Principal DisplayName'], ['Service Principal Id']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalCreatedbyManagedIdentity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4b506da6-6ddd-4079-af9b-a14afc135a85",
        "query_hash": "4f4ec3f47b0b044a94c5892e546060c2728539ebdb03d61bb933ec5fa555de5d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalExpiredSecret.kql",
        "query": "//Find Azure AD service principals that have both successful and failed sign ins because of an expired secret. For both results, find the IP addresses.\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\n//If you are seeing results then the old secret is still in use somewhere and requires updating.\n//Microsoft Sentinel query\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(1d)\n| summarize\n    ['All Error Codes']=make_set(ResultType),\n    ['Successful IP Addresses']=make_set_if(IPAddress, ResultType == 0),\n    ['Failed IP Addresses']=make_set_if(IPAddress, ResultType == \"7000222\")\n    by ServicePrincipalId, ServicePrincipalName\n| where ['All Error Codes'] has_all (\"0\", \"7000222\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSpnSignInEventsBeta\n| where Timestamp > ago(1d)\n| summarize\n    ['All Error Codes']=make_set(ErrorCode),\n    ['Successful IP Addresses']=make_set_if(IPAddress, ErrorCode == 0),\n    ['Failed IP Addresses']=make_set_if(IPAddress, ErrorCode == \"7000222\")\n    by ServicePrincipalId, ServicePrincipalName\n| where ['All Error Codes'] has \"0\" and ['All Error Codes'] has \"7000222\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalExpiredSecret",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5bb1888a-57f2-4a7b-b892-bec567c2595b",
        "query_hash": "f5fd8ccf7dff63f46496ebab03aec95a26456d9f3b68152284077b6030efa085",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalSigninErrors.kql",
        "query": "//Adds a friendly error description to the AADServicePrincipalSignInLogs table for any non successful signins\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\nAADServicePrincipalSignInLogs\n| where ResultType != \"0\"\n| extend ErrorDescription = case (\n    ResultType == \"7000215\", strcat(\"Invalid client secret is provided\"),\n    ResultType == \"7000222\", strcat(\"The provided client secret keys are expired\"),\n    ResultType == \"700027\", strcat(\"Client assertion failed signature validation\"),\n    ResultType == \"700024\", strcat(\"Client assertion is not within its valid time range\"),\n    ResultType == \"70021\", strcat(\"No matching federated identity record found for presented assertion\"),\n    ResultType == \"500011\", strcat(\"The resource principal named {name} was not found in the tenant named {tenant}\"),\n    ResultType == \"700082\", strcat(\"The refresh token has expired due to inactivity\"),\n    ResultType == \"90025\", strcat(\"Request processing has exceeded gateway allowance\"),\n    ResultType == \"500341\", strcat(\"The user account {identifier} has been deleted from the {tenant} directory\"),\n    ResultType == \"100007\", strcat(\"AAD Regional ONLY supports auth either for MSIs OR for requests from MSAL using SN+I for 1P apps or 3P apps in Microsoft infrastructure tenants\"),\n    ResultType == \"1100000\", strcat(\"Non-retryable error has occurred\"),\n    ResultType == \"90033\", strcat(\"A transient error has occurred. Please try again\"),\n    ResultType == \"53003\", strcat(\"Access has been blocked by Conditional Access policies. The access policy does not allow token issuance.\"),\n    \"Unknown\"\n    )\n| project\n    TimeGenerated,\n    ServicePrincipalName,\n    ServicePrincipalId,\n    ErrorDescription,\n    ResultType,\n    IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalSigninErrors",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "02c10bff-7a45-4418-a4f9-346c9c330a35",
        "query_hash": "3067c1816da29043e1e7c7df04a576fefe9f7d6846a3058fbff72e9c00f53919",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalSigninfromnewIP.kql",
        "query": "//Detect when an Azure AD service principal signs in from an IP previously not seen\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n| distinct AppId, IPAddress\n| join kind=rightanti\n    (\n    AADServicePrincipalSignInLogs\n    | where TimeGenerated > ago(7d)\n    | project TimeGenerated, AppId, IPAddress, ResultType, ServicePrincipalName\n    )\n    on IPAddress\n| where ResultType == \"0\"\n| distinct ServicePrincipalName, AppId, IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalSigninfromnewIP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cd7163f5-97b6-418c-802a-5f206368e8f7",
        "query_hash": "d07874677c8b3be1f4c0d8f9892562d9ab62dfdfa9e791a883dc22ae0c66e530",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalSigninsbyIP.kql",
        "query": "//Make a set of IP addresses that your Azure AD service principals have signed in from\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(90d)\n| where ResultType == \"0\"\n| summarize ['List of IP Addresses']=make_set(IPAddress), ['Count of Unique IP Addresses']=dcount(IPAddress) by ServicePrincipalName, AppId\n| sort by ['Count of Unique IP Addresses'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalSigninsbyIP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "02d6488d-be65-4707-808a-cb42eca6d8e5",
        "query_hash": "85687122ed6adcb361921c4ea2519a229ff47d7b04a9666080b801d854cb721d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalsMultipleLocations.kql",
        "query": "//Find Azure AD service principals that are logging on from multiple locations, this should be less common than with user accounts\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\n//Return the IP addresses used to sign in and see if you can build conditional access policies around them\n//Microsoft Sentinel Query\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == \"0\"\n| where isnotempty(Location)\n| summarize\n    ['Count of Locations']=dcount(Location),\n    ['List of Locations']=make_set(Location),\n    ['Count of IP Addresses']=dcount(IPAddress),\n    ['List of IP Addresses']=make_set(IPAddress)\n    by ServicePrincipalName, AppId\n| where ['Count of Locations'] >= 2\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSpnSignInEventsBeta\n| where Timestamp > ago(30d)\n| where ErrorCode == \"0\"\n| where isnotempty(Country)\n| summarize\n    ['Count of Locations']=dcount(Country),\n    ['List of Locations']=make_set(Country),\n    ['Count of IP Addresses']=dcount(IPAddress),\n    ['List of IP Addresses']=make_set(IPAddress)\n    by ServicePrincipalName, ApplicationId\n| where ['Count of Locations'] >= 2\n\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalsMultipleLocations",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e339fe69-4bf6-45e8-8574-43a1741c1165",
        "query_hash": "96e6c33393ac74c82d457f1b6accc14c8e0ee22080650eccc2160d77b3fd349f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalsOnlyExpiredSecret.kql",
        "query": "//Find any Azure AD Service Principals with only incorrect or expired secrets being used and no successful signins. These apps may no longer be in use and can be removed.\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\n//Microsoft Sentinel query\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(14d)\n| summarize\n    ['All Error Codes']=make_set(ResultType)\n    by ServicePrincipalId, ServicePrincipalName\n| where ['All Error Codes'] !has \"0\" and ['All Error Codes'] has_any (\"7000222\", \"7000215\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSpnSignInEventsBeta\n| where Timestamp > ago(14d)\n| summarize\n    ['All Error Codes']=make_set(ErrorCode)\n    by ServicePrincipalId, ServicePrincipalName\n| where ['All Error Codes'] !has \"0\" and ['All Error Codes'] has_any (\"7000222\", \"7000215\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalsOnlyExpiredSecret",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ad38e3ec-6373-4154-8136-213749127e17",
        "query_hash": "6a43395c2464c710168c1ec92ceae0e4eac557df4462a93e57586bc33139cd2f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalSummaryofResources.kql",
        "query": "//Create a summary of which resources each of your service principals are connecting to. The higher the count the potential higher blast radius.\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == \"0\"\n| summarize\n    ['List of Azure Resources']=make_set(ResourceDisplayName),\n    ['Count of Azure Resources']=dcount(ResourceDisplayName)\n    by ServicePrincipalName\n| sort by ['Count of Azure Resources'] desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalSummaryofResources",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7fdf27cb-88f2-43de-9b2a-a93723087181",
        "query_hash": "5a67b7cb91eef08a748f44cbae0c02b6dcd3d94dcfb3de1956e42afd72b2dac6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ServicePrincipalswithSingleIP.kql",
        "query": "//Find Azure AD service principals that have only signed in from a single IP address in the last month. You should apply Conditional Access for workloads on them - https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/workload-identity\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\n//Microsoft Sentinel query\n//First create a distinct count of IP addresses for each AppId and return any AppId with only 1 distinct IP\nlet appid=\n    AADServicePrincipalSignInLogs\n    | where TimeGenerated > ago (30d)\n    | where ResultType == 0\n    | summarize dcount(IPAddress) by AppId\n    | where dcount_IPAddress == 1\n    | distinct AppId;\n//Query the same data for only those AppIds and summarize each IP by the AppId and friendly service principal names\nAADServicePrincipalSignInLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where AppId in (appid)\n| summarize ['Application Ids']=make_set(AppId) by IPAddress, ServicePrincipalName\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//First create a distinct count of IP addresses for each AppId and return any AppId with only 1 distinct IP\nlet appid=\n    AADSpnSignInEventsBeta\n    | where Timestamp > ago (30d)\n    | where ErrorCode == 0\n    | where IsManagedIdentity == 0\n    | summarize dcount(IPAddress) by ApplicationId\n    | where dcount_IPAddress == 1\n    | distinct ApplicationId;\n//Query the same data for only those AppIds and summarize each IP by the AppId and friendly service principal names\nAADSpnSignInEventsBeta\n| where Timestamp > ago (30d)\n| where ErrorCode == 0\n| where ApplicationId in (appid)\n| summarize ['Application Ids']=make_set(ApplicationId) by IPAddress, ServicePrincipalName\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ServicePrincipalswithSingleIP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4cb0e673-e05d-4f8c-ac15-79945d70107e",
        "query_hash": "434135c44b676bbf2c67e7ebce37ed2efd1d9960c0cfd9974173b72650b7491e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SingleFactorConnectionstoAzure.kql",
        "query": "//Find any single factor sign ins to Azure resources such as the Azure portal\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(7d)\n| where AppDisplayName has \"Azure\"\n| where ResultType == 0\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| summarize ['Single Factor Authentications']=make_set(UserPrincipalName) by AppDisplayName\n| extend ['User Count'] = array_length(['Single Factor Authentications'])\n| order by ['User Count'] desc\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(7d)\n| where Application has \"Azure\"\n| where ErrorCode == 0\n| where LogonType == @\"[\"\"interactiveUser\"\"]\"\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| summarize ['Single Factor Authentications']=make_set(AccountUpn) by Application\n| extend ['User Count'] = array_length(['Single Factor Authentications'])\n| order by ['User Count'] desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SingleFactorConnectionstoAzure",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d4fc055c-b882-4c50-8c7f-57c53c000b4b",
        "query_hash": "0d991e688805070ea0c11507ce25eddfbb6c1c0f6c295f839e5588a140639a4a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SingleFactorSigninsFromPrivUsers.kql",
        "query": "//Finds users who hold a privileged Azure Active Directory role who are signing into applications using single factor\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | where isnotempty(AssignedRoles)\n    | where AssignedRoles != \"[]\"\n    | distinct AccountUPN;\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where UserPrincipalName in~ (privusers)\n| where ResultType == 0\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| summarize\n    ['List of Applications']=make_set(AppDisplayName),\n    ['Count of Applications']=dcount(AppDisplayName)\n    by UserPrincipalName\n| sort by ['Count of Applications'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SingleFactorSigninsFromPrivUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8281a7f1-b20b-42e3-a04d-59b19a59b5bd",
        "query_hash": "155fa1815fd93a78c8cbbdb217e59e923c0c10293e29c01de63628a4af984819",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeAccountInactivity.kql",
        "query": "//Summarize accounts (both members and guests) that haven't signed on for over 60 days, and summarize them into the month they last signed in\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (365d)\n| where ResultType == 0\n| where isnotempty(UserType)\n| summarize arg_max(TimeGenerated, *) by UserPrincipalName\n| where TimeGenerated < ago(60d)\n| summarize\n    ['Inactive Account List']=make_set(UserPrincipalName),\n    ['Count of Inactive Accounts']=dcount(UserPrincipalName)\n    by UserType, Month=startofmonth(TimeGenerated)\n| sort by Month desc, UserType asc   ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeAccountInactivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c000b153-6ecd-4624-be12-1f2cb706164f",
        "query_hash": "570d3dd8fb6408f8c597eb3592d9d0cc227b2714501b73016064920432f30061",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeAppUsageMonthonMonth.kql",
        "query": "//Summarize the usage of all your applications from last month to this month. Usage is calculated by distinct users per application.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(60d)\n| where ResultType == \"0\"\n| summarize\n    ['Last Month Signins']=dcountif(UserPrincipalName, TimeGenerated > ago(60d) and TimeGenerated < ago(30d)),\n    ['This Month Signins']=dcountif(UserPrincipalName, TimeGenerated > ago(30d))\n    by AppId, AppDisplayName\n| extend ['Percentage Change']=(todouble(['This Month Signins'] - todouble(['Last Month Signins'])) / todouble(['Last Month Signins']) * 100)\n| sort by AppDisplayName asc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeAppUsageMonthonMonth",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "24deacc4-7e89-49c0-ac6c-bb300db624b3",
        "query_hash": "07fe539ae5ffb0886409f4530c15eb2f733458f8db17acdea27403bd2ed7e744",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeConditionalAccessPoliciesfailures.kql",
        "query": "//Create a summary showing which of your Azure AD conditional access policies are preventing the most signins and for what reasons\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (7d)\n| project TimeGenerated, ConditionalAccessPolicies, ResultType, ResultDescription\n| mv-expand ConditionalAccessPolicies\n| extend CAResult = tostring(ConditionalAccessPolicies.result)\n| extend ['Conditional Access Policy Name'] = tostring(ConditionalAccessPolicies.displayName)\n| where CAResult == \"failure\"\n| summarize ['Count of Failures']=count()by ['Conditional Access Policy Name'], ResultType, ResultDescription\n| sort by ['Count of Failures'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeConditionalAccessPoliciesfailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7c8e52c0-def4-4751-a8e9-671eebc20296",
        "query_hash": "1007d7955776d29deb1cfd7ff8ad3ea5ea5e021dd2863238da224c175b376ebd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeGuestConditionalAccess.kql",
        "query": "//Summarize which conditional access policies your inbound guests have logged any successes or failures against.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (90d)\n| where UserType == \"Guest\"\n| where AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId\n| project ConditionalAccessPolicies, UserPrincipalName, HomeTenantId\n| project-rename GuestTenantId=HomeTenantId\n| mv-expand ConditionalAccessPolicies\n| extend CAResult = tostring(ConditionalAccessPolicies.result)\n| extend CAName = tostring(ConditionalAccessPolicies.displayName)\n| where CAResult has_any (\"success\", \"failure\")\n| extend ['Conditional Access Result']=strcat(CAName, \" || \", CAResult)\n| summarize\n    ['Conditional Access Outcomes']=make_set(['Conditional Access Result'])\n    by\n    GuestTenantId\n| order by GuestTenantId asc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeGuestConditionalAccess",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f7ba419a-20b7-4bb7-977f-f0fae2116d54",
        "query_hash": "c9458f3d7c229ad8846070844252e35e7d43776b1a1cab65e576905b7c6cd7b5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeGuestDomainbyType.kql",
        "query": "//Summarize guest activity by external Azure AD guests (those that belong to another Azure AD tenant) vs External Guests (such as Gmail) to your tenant\n//For each domain list the total number of signins and distinct user \n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where UserType == \"Guest\"\n| where ResultType == 0\n| extend ['Guest Domain'] = tostring(split(UserPrincipalName, \"@\")[1])\n| summarize\n    ['External Azure AD Guest Logins']=countif(ResourceTenantId != HomeTenantId),\n    ['External Azure AD Guest Distinct Users']=dcountif(UserPrincipalName, ResourceTenantId != HomeTenantId),\n    ['External Guest Logins']=countif(ResourceTenantId == HomeTenantId),\n    ['External Guest Distinct Users']=dcountif(UserPrincipalName, ResourceTenantId == HomeTenantId)\n    by ['Guest Domain']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeGuestDomainbyType",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "11c1b9ca-6c1c-4bdc-8eaa-a3facc3d3ed6",
        "query_hash": "4a44ca5e719fb084262265a3c617ec7d8f023a19f669ee61b79aa919b28e5fec",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeGuestInactivity.kql",
        "query": "//Group your Azure AD guest accounts into the month they last signed in\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (360d)\n| where UserType == \"Guest\" or UserPrincipalName contains \"#ext#\"\n| where ResultType == 0\n| summarize arg_max(TimeGenerated, *) by UserPrincipalName\n| project TimeGenerated, UserPrincipalName\n| summarize ['Inactive Guest Accounts']=make_set(UserPrincipalName) by Month=startofmonth(TimeGenerated)\n| sort by Month desc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeGuestInactivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "eb56d011-919d-4b13-9323-f58e1d960dca",
        "query_hash": "080d970046a3add54d875fcbad2e54b8e16cd3110c5de22eab655de4d87915de",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeGuestTenantActivity.kql",
        "query": "//Summarize the domain names, the count of users and list of users for each guest tenant connecting to your Azure AD tenant\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| project\n    TimeGenerated,\n    UserPrincipalName,\n    HomeTenantId,\n    AADTenantId,\n    Id,\n    ResourceTenantId,\n    ResourceIdentity,\n    UserId,\n    AppDisplayName\n| where UserId != \"00000000-0000-0000-0000-000000000000\"\n| where ResourceIdentity != ''\n| where HomeTenantId != ''\n| where HomeTenantId != AADTenantId\n| extend GuestDomain = split(UserPrincipalName, '@')[-1]\n| summarize\n    ['Guest Domain Names']=make_set(GuestDomain),\n    ['Distinct User Count']=dcount(UserPrincipalName),\n    ['List of Guest Users']=make_set(UserPrincipalName)\n    by HomeTenantId, AppDisplayName\n| sort by ['Distinct User Count'] desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeGuestTenantActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "782db2c2-8846-4455-bd51-d95c9485a023",
        "query_hash": "add9c3286bc13524781eae433da8d0685dfb204906862dd2c91a548cecddf17b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeInternetExplorerSignins.kql",
        "query": "//Summarize signins to your Azure AD tenant still using Internet Explorer. Data is grouped into each user and which applications they are accessing.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where ResultType == 0\n| extend UserAgentDetail = todynamic(parse_user_agent(UserAgent, \"browser\"))\n| extend UserAgentFamily = tostring(parse_json(tostring(UserAgentDetail.Browser)).Family)\n| extend UserAgentMajorVersion = toint(parse_json(tostring(UserAgentDetail.Browser)).MajorVersion)\n| extend UserAgentMinorVersion = toint(parse_json(tostring(UserAgentDetail.Browser)).MinorVersion)\n| extend UserAgentPatch = toint(parse_json(tostring(UserAgentDetail.Browser)).Patch)\n| project\n    TimeGenerated,\n    UserPrincipalName,\n    AppDisplayName,\n    ResultType,\n    IPAddress,\n    Location,\n    UserAgentFamily,\n    UserAgentMajorVersion,\n    UserAgentMinorVersion,\n    UserAgentPatch,\n    UserAgent\n| where UserAgentFamily == \"IE\"\n| summarize ['Total IE Signins']=count(), ['Count of Applications']=dcount(AppDisplayName), ['List of Applications']=make_set(AppDisplayName) by UserPrincipalName\n| sort by ['Count of Applications'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeInternetExplorerSignins",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cb80a1f4-d507-4fc6-8f0f-08a6f5f96e2e",
        "query_hash": "df839f68b6ce75dd5de549c70ffbc741a8379eb8f8d2cbcca88284c7954540e7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeLegacyAuth.kql",
        "query": "//Summarize legacy auth authentications by type (such as ActiveSync, IMAP etc) and which accounts are using those protocols\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nunion SigninLogs, AADNonInteractiveUserSignInLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where ClientAppUsed in (\"Exchange ActiveSync\", \"Exchange Web Services\", \"AutoDiscover\", \"Unknown\", \"POP3\", \"IMAP4\", \"Other clients\", \"Authenticated SMTP\", \"MAPI Over HTTP\", \"Offline Address Book\")\n| summarize ['Count of legacy auth attempts'] = count()by ClientAppUsed, UserPrincipalName\n| sort by ClientAppUsed asc, ['Count of legacy auth attempts'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(30d)\n| where ErrorCode == 0\n| where ClientAppUsed in (\"Exchange ActiveSync\", \"Exchange Web Services\", \"AutoDiscover\", \"Unknown\", \"POP3\", \"IMAP4\", \"Other clients\", \"Authenticated SMTP\", \"MAPI Over HTTP\", \"Offline Address Book\")\n| summarize ['Count of legacy auth attempts'] = count()by ClientAppUsed, AccountUpn\n| sort by ClientAppUsed asc, ['Count of legacy auth attempts'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeLegacyAuth",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "bd12636a-ddab-44d2-8323-fb05668e17a6",
        "query_hash": "f61209e67b0f5ef15137dcdb8b4ef896b35fc1508b8f640a4c415b9efd4955d4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeLocationSignins.kql",
        "query": "//Summarize sign in activity from a particular country or countries to your tenant over the last week\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nSigninLogs\n| where TimeGenerated > ago(7d)\n//Choose a country code, you could do multiples with | where Location in (\"AU\",\"US\")\n| where Location == \"RU\"\n| extend ['Full Location'] = strcat(LocationDetails.countryOrRegion, '|', LocationDetails.state, '|', LocationDetails.city)\n| where ResultType in(successCodes) or ResultType in(failureCodes)\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(UserPrincipalName, (ResultType in(successCodes))),\n    ['List of successful users']=make_set_if(UserPrincipalName, (ResultType in(successCodes))),\n    ['Successful result codes'] = make_set_if(ResultType, (ResultType in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(UserPrincipalName, (ResultType in(failureCodes))),\n    ['List of failed users'] = make_set_if(UserPrincipalName, (ResultType in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ResultType, (ResultType in(failureCodes)))\n    by ['Full Location'], IPAddress\n\n\n//Summarize Russian sign in activity to your Azure AD tenant\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//Advanced Hunting query\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nAADSignInEventsBeta\n| where Timestamp > ago(7d)\n//Choose a country code, you could do multiples with | where Country in (\"AU\",\"US\")\n| where Country == \"RU\"\n| extend ['Full Location'] = strcat(Country, '|', State, '|', City)\n| where ErrorCode in(successCodes) or ErrorCode in(failureCodes)\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(AccountUpn, (ErrorCode in(successCodes))),\n    ['List of successful users']=make_set_if(AccountUpn, (ErrorCode in(successCodes))),\n    ['Successful result codes'] = make_set_if(ErrorCode, (ErrorCode in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(AccountUpn, (ErrorCode in(failureCodes))),\n    ['List of failed users'] = make_set_if(AccountUpn, (ErrorCode in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ErrorCode, (ErrorCode in(failureCodes)))\n    by ['Full Location'], IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeLocationSignins",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b689dda3-7beb-4361-bae0-e75cc212c497",
        "query_hash": "a7e5cf303e0f5180fa336cbf7fcfbefeebdfd6a082f9378ddf8ee02fc65c33b7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeLoginInfofromMaliciousIP.kql",
        "query": "//When Azure AD Identity Protection flags an IP Address as malicious, find any successful or failed logon events in your tenant from that IP\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\n//First create a list of success and erorr codes in Azure AD\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n//Find the suspicious IP information from the SecurityAlert table, this example looks back 7 days as this is an offline detection\nlet suspiciousip=\n    SecurityAlert\n    | where TimeGenerated > ago (7d)\n    | where AlertName == \"Malicious IP address\"\n    | extend IPAddress = tostring(parse_json(ExtendedProperties).[\"Client IP Address\"])\n    | distinct IPAddress;\n//Look back 21 days for any other sign in data from that IP address\nSigninLogs\n| where TimeGenerated > ago(14d)\n| where IPAddress in (suspiciousip)\n| where ResultType in(successCodes) or ResultType in(failureCodes)\n//Create a summary showing successful and failed logons from that IP address and which users are affected\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(UserPrincipalName, (ResultType in(successCodes))),\n    ['List of successful users']=make_set_if(UserPrincipalName, (ResultType in(successCodes))),\n    ['Successful result codes'] = make_set_if(ResultType, (ResultType in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(UserPrincipalName, (ResultType in(failureCodes))),\n    ['List of failed users'] = make_set_if(UserPrincipalName, (ResultType in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ResultType, (ResultType in(failureCodes)))\n    by IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeLoginInfofromMaliciousIP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "89cc5a60-4e83-4ab8-b26e-87f039412d05",
        "query_hash": "9645ab2811720b3835b8c2babc177c6568c11e3e2c060bca1a0522305c484e2f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeMFAFailures.kql",
        "query": "//Summarize the count of the various types of MFA failures (such as user not responding, invalid codes, user declining the authentication)\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (90d)\n| where ResultType == \"500121\"\n| mv-expand todynamic(AuthenticationDetails)\n| project AuthenticationDetails, ResultType\n| extend ['MFA Failure Type'] = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n| where ['MFA Failure Type'] startswith \"MFA denied\"\n| summarize Count=count()by ['MFA Failure Type']\n| sort by Count\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeMFAFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "676f1f56-4d86-43ee-af31-75acaef56d9f",
        "query_hash": "af95b5d2599361c7ae6ee09fb0e21cc726e2d81144062c698534d6bd0caff687",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeMFATop20Apps.kql",
        "query": "//Summarize the percentage of signins covered by MFA for your top 20 most popular Azure AD apps\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\n//First create a list of your top 20 apps by finding distinct user count by application over 30 days\nlet top20apps=\n    SigninLogs\n    | where TimeGenerated > ago (30d)\n    | summarize UserCount=dcount(UserPrincipalName)by AppDisplayName\n    | sort by UserCount desc \n    | take 20\n    | project AppDisplayName;\n//Use that list to calculate the percentage of signins to those apps that are covered by MFA\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where AppDisplayName in (top20apps)\n| summarize TotalCount=count(),\n    MFACount=countif(AuthenticationRequirement == \"multiFactorAuthentication\"),\n    nonMFACount=countif(AuthenticationRequirement == \"singleFactorAuthentication\")\n    by AppDisplayName\n| project\n    AppDisplayName,\n    TotalCount,\n    MFACount,\n    nonMFACount,\n    MFAPercentage=(todouble(MFACount) * 100 / todouble(TotalCount))\n| sort by MFAPercentage asc  \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//First create a list of your top 20 apps by finding distinct user count by application over 30 days\nlet top20apps=\n    AADSignInEventsBeta\n    | where Timestamp > ago (30d)\n    | where LogonType == @\"[\"\"interactiveUser\"\"]\"\n    | summarize UserCount=dcount(AccountUpn)by Application\n    | sort by UserCount desc \n    | take 20\n    | project Application;\n//Use that list to calculate the percentage of signins to those apps that are covered by MFA\nAADSignInEventsBeta\n| where Timestamp > ago (30d)\n| where LogonType == @\"[\"\"interactiveUser\"\"]\"\n| where Application in (top20apps)\n| summarize TotalCount=count(),\n    MFACount=countif(AuthenticationRequirement == \"multiFactorAuthentication\"),\n    nonMFACount=countif(AuthenticationRequirement == \"singleFactorAuthentication\")\n    by Application\n| project\n    Application,\n    TotalCount,\n    MFACount,\n    nonMFACount,\n    MFAPercentage=(todouble(MFACount) * 100 / todouble(TotalCount))\n| sort by MFAPercentage asc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeMFATop20Apps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6fbf8ddd-f213-433d-ae2d-1421bdfc52e9",
        "query_hash": "22c39e3ba1c6a79724879dcb8bbc3cf343d4c00c39e4ebb30a317efe1df2ad75",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeOutboundGuestActivity.kql",
        "query": "//Summarize outbound (your users connecting to other tenants) activity by listing the users and which applications they are accessing in each remote tenant\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where UserType == \"Guest\"\n| where AADTenantId == HomeTenantId\n| where ResourceTenantId != AADTenantId\n| summarize\n    ['Count of Applications']=dcount(AppDisplayName),\n    ['List of Applications']=make_set(AppDisplayName),\n    ['Count of Users']=dcount(UserPrincipalName),\n    ['List of Users']=make_set(UserPrincipalName)\n    by ResourceTenantId\n| sort by ['Count of Users'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeOutboundGuestActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cbc0e6a2-7004-4ffd-a5f0-320ea88c9a2d",
        "query_hash": "cb05292e368c1f0e0517e35d125a748649c313cccec18195474a00efca42b74b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeSigninInfoafterMFAconfig.kql",
        "query": "//When a user registers or updates MFA details, take that IP address and summarize sign in events for that user and IP address for the last 30 days.\n//If they have never signed in or signed in a few times from that IP it may a sign the account has been compromised and a threat actor has added MFA details\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName in~ (\"Admin registered security info\", \"Admin updated security info\", \"Admin deleted security info\", \"User registered security info\", \"User changed default security info\", \"User deleted security info\")\n| extend UserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project ['MFA Event Time']=TimeGenerated, OperationName, UserPrincipalName, IPAddress\n| join kind=inner(\n    SigninLogs\n    | where TimeGenerated > ago (30d)\n    )\n    on UserPrincipalName, IPAddress\n| project\n    TimeGenerated,\n    ['MFA Event Time'],\n    OperationName,\n    ResultType,\n    UserPrincipalName,\n    IPAddress\n| summarize\n    ['Count of successful sign ins from MFA IP Address'] = countif(ResultType in(successCodes)),\n    ['Count of failed sign ins from MFA IP Address'] = countif(ResultType in(failureCodes))\n    by UserPrincipalName, OperationName, IPAddress, ['MFA Event Time']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeSigninInfoafterMFAconfig",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3d3b01ce-dedf-47b4-bf00-7470a9de63c7",
        "query_hash": "7d3e3428294c0ef7a32a2844f7077e8cd5d8d47980ef9902cb042d62d6039be4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeSuspiciousIPAddresses.kql",
        "query": "//Investigate potentially suspicious IP addresses for your Azure AD signins. This query lists any IP address with more failures than successful connections and provides a summary for each with at least one successful signin.\n//This may uncover password spray attacks that have had a successful connections.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nSigninLogs\n| where TimeGenerated > ago(7d)\n| where ResultType in(successCodes) or ResultType in(failureCodes)\n| summarize\n    ['Count of successful signins'] = countif((ResultType in(successCodes))),\n    ['Count of distinct successful sign ins'] = dcountif(UserPrincipalName, (ResultType in(successCodes))),\n    ['List of successful users']=make_set_if(UserPrincipalName, (ResultType in(successCodes))),\n    ['Successful result codes'] = make_set_if(ResultType, (ResultType in(successCodes))),\n    ['Count of failed signins']=countif((ResultType in(failureCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(UserPrincipalName, (ResultType in(failureCodes))),\n    ['List of failed users'] = make_set_if(UserPrincipalName, (ResultType in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ResultType, (ResultType in(failureCodes))) \n    by IPAddress\n//Exclude IP addresses with more successful signins than failed. This is a good way to exclude known locations as they will have lots of failures too, but they will be balanced by more successes.\n//Then find IP addresses with 5 or more distinct failed signins and at least one successful signin\n| where ['Count of failed signins'] > ['Count of successful signins'] and ['Count of distinct failed sign ins'] > ['Count of distinct successful sign ins'] and ['Count of distinct failed sign ins'] >= 5 and ['Count of distinct successful sign ins'] >= 1\n| order by ['Count of distinct successful sign ins'] desc \n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//Advanced Hunting query\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nAADSignInEventsBeta\n| where Timestamp > ago(7d)\n| where ErrorCode in(successCodes) or ErrorCode in(failureCodes)\n| summarize\n    ['Count of successful signins'] = countif((ErrorCode in(successCodes))),\n    ['Count of distinct successful sign ins'] = dcountif(AccountUpn, (ErrorCode in(successCodes))),\n    ['List of successful users']=make_set_if(AccountUpn, (ErrorCode in(successCodes))),\n    ['Successful result codes'] = make_set_if(ErrorCode, (ErrorCode in(successCodes))),\n    ['Count of failed signins']=countif((ErrorCode in(failureCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(AccountUpn, (ErrorCode in(failureCodes))),\n    ['List of failed users'] = make_set_if(AccountUpn, (ErrorCode in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ErrorCode, (ErrorCode in(failureCodes))) \n    by IPAddress\n//Exclude IP addresses with more successful signins than failed. This is a good way to exclude known locations as they will have lots of failures too, but they will be balanced by more successes.\n//Then find IP addresses with 5 or more distinct failed signins and at least one successful signin\n| where ['Count of failed signins'] > ['Count of successful signins'] and ['Count of distinct failed sign ins'] > ['Count of distinct successful sign ins'] and ['Count of distinct failed sign ins'] >= 5 and ['Count of distinct successful sign ins'] >= 1\n| order by ['Count of distinct successful sign ins'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeSuspiciousIPAddresses",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "793850c6-fe6b-4544-addf-2f5861fdc5dc",
        "query_hash": "cae109f4dc45b0d12d3c4703fe3b9485c632c28e0c85ff6129a65931f81c6a93",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-SummarizeUnknownLocationnoMFA.kql",
        "query": "//Find the applications with the most signins coming from unknown locations (not defined in Conditional Access) and only requiring single factor authentication\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where NetworkLocationDetails == '[]'\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| summarize ['Count of signins']=count(), ['Distinct user count']=dcount(UserPrincipalName) by AppDisplayName\n| sort by ['Distinct user count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-SummarizeUnknownLocationnoMFA",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1609340c-4558-4c66-863c-ccde0dd81d1a",
        "query_hash": "b58e531d106ccadc2b533ec06635a09037950a59f938e3aed1dbbb1ddfb434c4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-ThirdPartyMFAFailures.kql",
        "query": "//Retrieve sign in failures due to third party MFA (Okta/Duo etc). Azure AD handles third party MFA different to native MS MFA. A user is sent to the third party MFA service and generates code 50158.\n//If successful the user then generates a success code 0. When third party MFA fails Azure AD logs the 50158 result code but no corresponding 0 result code.\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n//Create a list of all result codes within a single sign in to Azure AD\n| summarize MFA=make_list(ResultType) by CorrelationId\n//Find correlation ids where the user was sent to third party MFA (ResultType 50158) but there is no subsequent success (ResultType 0)\n| where MFA has \"50158\" and MFA !has \"0\"\n//Join back to SigninLogs table to find the sign in details\n| join kind=inner (SigninLogs) on CorrelationId\n| project\n    TimeGenerated,\n    UserPrincipalName,\n    UserType,\n    AppDisplayName,\n    IPAddress,\n    Location,\n    UserAgent,\n    ResultType\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n//Create a list of all result codes within a single sign in to Azure AD\n| summarize MFA=make_list(ErrorCode) by CorrelationId\n//Find correlation ids where the user was sent to third party MFA (ResultType 50158) but there is no subsequent success (ResultType 0)\n| where MFA has \"50158\" and MFA !has \"0\"\n//Join back to SigninLogs table to find the sign in details\n| join kind=inner (AADSignInEventsBeta) on CorrelationId\n| project\n    Timestamp,\n    AccountUpn,\n    IsGuestUser,\n    Application,\n    IPAddress,\n    Country,\n    UserAgent,\n    ErrorCode",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-ThirdPartyMFAFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3e9e4b63-2786-4d3c-a0b8-7199562fa751",
        "query_hash": "ed5950070f6c3be7824fad9e0c5cf6364fd8198e446b7301c1f2b00d871a215d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-Top20AppswithnoCA.kql",
        "query": "//Find the top 20 most popular applications in your tenant that have had no Conditional Access policies (success or failure) applied\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet apps=\n    SigninLogs\n    | where TimeGenerated > ago (30d)\n    | project TimeGenerated, ConditionalAccessPolicies, AppDisplayName\n//Exclude native Microsoft apps that you can't enforce policy on or that are covered natively in Office 365\n    | where AppDisplayName !in (\"Microsoft Office Web Apps Service\", \"Microsoft App Access Panel\", \"Office Online Core SSO\", \"Microsoft Authentication Broker\", \"Microsoft Account Controls V2\", \"Microsoft 365 Support Service\",\"Office Online Maker SSO\",\"My Apps\",\"My Profile\")\n    | mv-expand ConditionalAccessPolicies\n    | extend CAResult = tostring(ConditionalAccessPolicies.result)\n    | summarize ResultSet=make_set(CAResult) by AppDisplayName\n    | where ResultSet !has \"success\" or ResultSet !has \"failure\"\n    | project AppDisplayName;\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where AppDisplayName in (apps)\n| summarize Count=count()by AppDisplayName\n| top 20 by Count",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-Top20AppswithnoCA",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1582b366-28f0-4b6d-822e-b6c6f5faa11c",
        "query_hash": "cd2bf63d23245e05446f2bcb92ab79dfaa106925fb3f076094dd72977c89dfc0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-Top20RandomStats.kql",
        "query": "//Find the top 20 of a collection of varied data sets, no real detections in here just interesting data that is captured\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\n\n//Top 20 users signing into your tenant\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| summarize Count=count() by UserPrincipalName\n| top 20 by Count\n\n//Top 20 locations signing into your tenant\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| summarize Count=count() by Location\n| where isnotempty(Location)\n| top 20 by Count\n\n//Top 20 users by MFA prompts\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| mv-expand todynamic(AuthenticationDetails)\n| project TimeGenerated, AuthenticationDetails, UserPrincipalName\n| extend AuthenticationMethod = tostring(AuthenticationDetails.authenticationMethod)\n| where AuthenticationMethod in (\"Mobile app notification\",\"Text message\",\"OATH verification code\")\n| summarize Count=count()by UserPrincipalName\n| top 20 by Count\n\n//Top 20 users by distinct applications accessed\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| summarize Count=dcount(AppDisplayName) by UserPrincipalName\n| top 20 by Count\n\n//Top 20 users accessing distinct locations accessed\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| summarize Count=dcount(Location) by UserPrincipalName\n| top 20 by Count\n\n//Top 20 applications by distinct users accessing them\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| summarize Count=dcount(UserPrincipalName) by AppDisplayName\n| where AppDisplayName != \"Windows Sign In\"\n| top 20 by Count\n\n//Top 20 applications by distinct guests accessing them\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Guest\"\n| summarize Count=dcount(UserPrincipalName) by AppDisplayName\n| top 20 by Count\n\n//Top 20 guests by distinct applications accessed by them\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Guest\"\n| summarize Count=dcount(AppDisplayName) by UserPrincipalName\n| top 20 by Count\n\n//Top 20 guest domains accessing your tenant\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Guest\"\n| where AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId\n| extend ['User Domain'] = tostring(split(UserPrincipalName, \"@\")[1])\n| summarize Count=count() by ['User Domain']\n| top 20 by Count\n\n//Top 20 guest domains accessing your tenant by distinct applications accessed\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where ResultType == 0\n| where UserType == \"Guest\"\n| where AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId\n| extend ['User Domain'] = tostring(split(UserPrincipalName, \"@\")[1])\n| summarize Count=dcount(AppDisplayName) by ['User Domain']\n| top 20 by Count",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-Top20RandomStats",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9c870210-2b90-4f2a-ada6-bf47efc1b328",
        "query_hash": "ea22f6179a92b9722d35d8fed45157c90d536b95c6b7e732feef2aacb97a8d00",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-Top20RiskyLocations.kql",
        "query": "//Find the top 20 IP addresses that are unknown to Azure AD, with users using unknown devices and single factor auth\n//Then find the users and applications being accessed from each to help build out conditional access policy\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet top20locations=\n    SigninLogs\n    | where TimeGenerated > ago(30d)\n    | where ResultType == 0\n    | extend DeviceTrustType = tostring(DeviceDetail.trustType)\n    | where NetworkLocationDetails == '[]'\n        and isempty(DeviceTrustType)\n        and AuthenticationRequirement == \"singleFactorAuthentication\"\n    | summarize Count=count()by IPAddress\n    | top 20 by Count;\nSigninLogs\n| where ResultType == 0\n| where IPAddress in (top20locations)\n| summarize\n    ['Total Signin Count']=count(),\n    ['Distinct User Count']=dcount(UserPrincipalName),\n    ['List of Users']=make_set(UserPrincipalName),\n    ['Distinct Application Count']=dcount(AppDisplayName),\n    ['List of Applications']=make_set(AppDisplayName)\n    by IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-Top20RiskyLocations",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "672f28f3-b2d0-4ecf-9f4a-e810e5db13e4",
        "query_hash": "96b57abcb96b7248749bf9e4b5f4e33f9a31fa071500c3e2859b4f175d96e938",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-UserTryingtoAccessMultipleApps.kql",
        "query": "//Detect users trying to access multiple applications they haven't been granted access to over a short period of time\n//In this example alert when a user attempts to access 2 or more unique applications in 30 minutes\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where ResultType == \"50105\"\n| summarize\n    ['Denied Application List']=make_set(AppDisplayName),\n    ['Count of Applications']=dcount(AppDisplayName)\n    by UserPrincipalName, bin(TimeGenerated, 30m)\n| where ['Count of Applications'] >= 2",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-UserTryingtoAccessMultipleApps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "487105cd-4bda-468a-9447-8c8cc2c2963a",
        "query_hash": "ec74ff3c0e0910786d5d0943097d19a3afc0fbce0a880fbce2a1526475bd5cde",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeConditionalAccessFailures.kql",
        "query": "//Visualizes conditional access policy failures over time by policy name\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet start = now(-90d);\nlet end = now();\nlet timeframe= 12h;\nSigninLogs\n| project TimeGenerated, ResultType, ConditionalAccessPolicies\n| where ResultType == 53003\n| mv-expand ConditionalAccessPolicies\n| where ConditionalAccessPolicies.result == \"failure\"\n| extend ['CA Policy Name'] = tostring(ConditionalAccessPolicies.displayName)\n| make-series ['Failure Count'] = count() default=0 on TimeGenerated in range(start, end, timeframe) by ['CA Policy Name']\n| render timechart with (title=\"Conditional access policy failure over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeConditionalAccessFailures",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "27e78e59-1afe-45b7-87ed-8736cb8dbcc4",
        "query_hash": "f65a60f77c603fcfbaad89323be79246dea0d849c6786097e4bff39c50f9fbca",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeControlsvsNoControls.kql",
        "query": "//Visualize signins to your Azure AD tenant with no controls (known device, known location or MFA) vs those with at least one of those controls\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| extend DeviceTrustType = tostring(DeviceDetail.trustType)\n| summarize\n    ['Signins with no controls']=countif(NetworkLocationDetails == '[]' and AuthenticationRequirement == \"singleFactorAuthentication\" and isempty(DeviceTrustType)),\n    ['Signins with one or more controls']=countif(NetworkLocationDetails != '[]' or AuthenticationRequirement == \"multiFactorAuthentication\" or isnotempty(DeviceTrustType)) by\n    bin(TimeGenerated, 1d)\n| render timechart with (title=\"Azure AD signins no controls vs one or more controls\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeControlsvsNoControls",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "161921c4-aa5e-4d68-a050-c7f91f86ff4e",
        "query_hash": "2fb721b360eb97245254e38d2369bd32c696de4d0675321d6629209ddde522ba",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeDistinctInboundGuests.kql",
        "query": "//Visualize distinct inbound guests (guest accounts accessing your tenant) per month\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(365d)\n| where UserType == \"Guest\"\n| where ResultType == 0\n//Find only inbound guests, i.e those guests accessing your tenant.\n| summarize Count=dcountif(UserPrincipalName, AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId) by startofmonth(TimeGenerated)\n| render columnchart with (title=\"Distinct guest accounts accessing your tenant per month\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeDistinctInboundGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "69f4ec72-a601-486f-90a7-44f17191b2eb",
        "query_hash": "877c43142be4716161ed0e2fba2382ef261071111a961f731682ade55073f38e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeExternalAADGuestsvsExternalGuests.kql",
        "query": "//Visualize signins from External Azure AD guests (those that belong to another Azure AD tenant) vs External Guests (such as Gmail) to your tenant\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (45d)\n| where UserType == \"Guest\"\n| summarize\n    ['External Guests']=countif(ResourceTenantId == HomeTenantId),\n    ['External Azure AD Guests']=countif(ResourceTenantId != HomeTenantId)\n    by bin(TimeGenerated, 1d)\n| render timechart with (title=\"External Azure AD Guests vs External Guests\", ytitle=\"Count\")\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeExternalAADGuestsvsExternalGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "da36cf45-4fba-484e-ac9a-a98088b0836a",
        "query_hash": "bd81f7d826576984985f2ab36ac58f2a6e2859e6cf0e358dbd22b6472bf8d86c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeGuestAppAccess.kql",
        "query": "//Visualize the most popular enterprise applications accessed by guest accounts\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet timeframe=45d;\nSigninLogs\n| where TimeGenerated > ago(timeframe)\n| where UserType == \"Guest\" or UserPrincipalName contains \"#ext#\"\n| where ResultType == 0\n// Exclude Microsoft management applications\n| where AppDisplayName !in (\"Microsoft Invitation Acceptance Portal\", \"My Apps\", \"Microsoft App Access Panel\", \"Microsoft Authentication Broker\")\n| summarize AppCount=count()by AppDisplayName\n| sort by AppCount desc \n| render piechart with (title=\"Most Popular Apps Accessed by Guests\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeGuestAppAccess",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "371aab94-fe7c-47a1-9a4f-d9cde8bf371b",
        "query_hash": "c77a3c2046509fb3335a6de8c17549bd5ac86d5190a55f1c5d0636a2431c48b6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeGuestDomains.kql",
        "query": "//Visualize the most popular domains that have redeemed invites to your Azure AD tenant over the last 30 days.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago(30d)\n| where OperationName == \"Redeem external user invite\"\n| extend GuestEmail = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['User Domain'] = tostring(split(GuestEmail, \"@\")[1])\n| where isnotempty(['User Domain'])\n| summarize Count=count()by ['User Domain']\n| sort by Count desc \n| render barchart",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeGuestDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d42ca278-7cce-424e-b79a-8cfdb8ee0c45",
        "query_hash": "935a764708d2f8f3e05b402ffb16dfe00bf1cc8b4120bb73efb19f121152f6d1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeGuestRedemptionswithTrend.kql",
        "query": "//Visualize how many guests are redeeming invites over the time period with trend\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet StartDate = now(-180d);\nlet EndDate = now();\nAuditLogs\n| where OperationName == \"Redeem external user invite\"\n| make-series TotalInvites=count() on TimeGenerated in range(StartDate, EndDate, 1d)\n| extend (RSquare, SplitIdx, Variance, RVariance, TrendLine)=series_fit_2lines(TotalInvites)\n| project TimeGenerated, TotalInvites, TrendLine\n| render timechart with (title=\"Guest Invites redeemed over time with trend\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeGuestRedemptionswithTrend",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1fd31fbd-1408-43ba-bdf3-1edc7e55a193",
        "query_hash": "96ce07853febb897b4e536137eb9e82e65dfe30a6a5869686aa87ce5b81bb7b9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeInboundvsOutboundGuests.kql",
        "query": "//Visualize inbound Azure AD guests (other tenants connecting to your tenant) vs outbound (your users connecting to other tenants)\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where UserType == \"Guest\"\n| where ResultType == 0\n| summarize\n    ['Inbound Guests']=countif(AADTenantId != HomeTenantId and HomeTenantId != ResourceTenantId),\n    ['Outbound Guests']=countif(AADTenantId == HomeTenantId and ResourceTenantId != AADTenantId)\n    by bin(TimeGenerated, 1d)\n| render timechart with (title=\"Inbound Guest vs Outbound Guest Access\", ytitle=\"Number of connections\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeInboundvsOutboundGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "af8db266-2d01-48b1-a490-48be807c4f5c",
        "query_hash": "959d05185a30b7e3465cceb4fbc0c56d0de223db013eaf2b4246c266911d5463",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeKnownvsUnknownLocation.kql",
        "query": "//Visualize sign in attempts to your Azure AD tenant by known or unknown network locations\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n//If a location it will be populated by its name, i.e 'Corporate Internet', if known the NetworkLocationDetails array is empty so we can find it by searching on '[]'\n| summarize\n    ['Known Location']=countif(NetworkLocationDetails != '[]'),\n    ['Unknown Location']=countif(NetworkLocationDetails == '[]')\n    by bin (TimeGenerated, 1d)\n| render timechart with (title=\"Known vs Unknown signins to Azure AD\", ytitle=\"Count\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeKnownvsUnknownLocation",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0453d79b-3d37-4f3c-9e32-8462bd22211c",
        "query_hash": "5349af3165ea216aefdf3a3d1df1c5a5238e3037d65aeca997788294b8dae394",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeLegacyAuth.kql",
        "query": "//Visualize distinct users allowed to connect via legacy auth vs blocked by conditional access\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(180d)\n| where ResultType in (\"0\", \"53003\")\n| where ClientAppUsed in (\"Exchange ActiveSync\", \"Exchange Web Services\", \"AutoDiscover\", \"Unknown\", \"POP3\", \"IMAP4\", \"Other clients\", \"Authenticated SMTP\", \"MAPI Over HTTP\", \"Offline Address Book\")\n| summarize\n    ['Legacy Auth Users Allowed']=dcountif(UserPrincipalName, ResultType == 0),\n    ['Legacy Auth Users Blocked']=dcountif(UserPrincipalName, ResultType == 53003)\n    by bin(TimeGenerated, 1d)\n| render timechart with (title=\"Legacy auth distinct users allowed vs blocked by Conditional Access\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\n//Visualize distinct users allowed to connect via legacy auth vs blocked by conditional access\nAADSignInEventsBeta\n| where Timestamp > ago(180d)\n| where ErrorCode  in (\"0\", \"53003\")\n| where ClientAppUsed in (\"Exchange ActiveSync\", \"Exchange Web Services\", \"AutoDiscover\", \"Unknown\", \"POP3\", \"IMAP4\", \"Other clients\", \"Authenticated SMTP\", \"MAPI Over HTTP\", \"Offline Address Book\")\n| summarize\n    ['Legacy Auth Users Allowed']=dcountif(AccountUpn, ErrorCode == 0),\n    ['Legacy Auth Users Blocked']=dcountif(AccountUpn, ErrorCode == 53003)\n    by bin(Timestamp, 1d)\n| render timechart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeLegacyAuth",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b85b75f3-dac5-4ff5-92e4-a470a63112ec",
        "query_hash": "c9241548758e05975792d5f9c9d9bad37255198493b7845163c52c36e868c979",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeLegacyAuthMethods.kql",
        "query": "//Visualize legacy auth method (i.e Activesync, IMAP etc) by distinct user count over time\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(90d)\n| where ResultType == 0\n| where ClientAppUsed in (\"Exchange ActiveSync\", \"Exchange Web Services\", \"AutoDiscover\", \"Unknown\", \"POP3\", \"IMAP4\", \"Other clients\", \"Authenticated SMTP\", \"MAPI Over HTTP\", \"Offline Address Book\")\n| summarize Count=dcount(UserPrincipalName) by ClientAppUsed, bin (TimeGenerated, 1d)\n| render timechart with (title=\"Legacy auth methods by distinct user over time\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(30d)\n| where ErrorCode == 0\n| where ClientAppUsed in (\"Exchange ActiveSync\", \"Exchange Web Services\", \"AutoDiscover\", \"Unknown\", \"POP3\", \"IMAP4\", \"Other clients\", \"Authenticated SMTP\", \"MAPI Over HTTP\", \"Offline Address Book\")\n| summarize Count=dcount(AccountUpn) by ClientAppUsed, bin (Timestamp, 1d)\n| render timechart",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeLegacyAuthMethods",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "de760a8f-0b8f-42ab-aa9e-5a5c7419d7be",
        "query_hash": "71787e184729e7875b8712a581c1bee309cbd23401b0e4808bb807ad23057725",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeMFAChallengevsPreviouslySatisfied.kql",
        "query": "//Visualize when your users are actively challenged for MFA vs when it was previously satisfied\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(90d)\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| mv-expand todynamic(AuthenticationDetails)\n| project TimeGenerated, AuthenticationDetails\n| extend MFAResultStep = tostring(AuthenticationDetails.authenticationStepResultDetail)\n| summarize\n    MFARequired=countif(MFAResultStep == \"MFA completed in Azure AD\"),\n    PreviouslySatisfied=countif(MFAResultStep == \"MFA requirement satisfied by claim in the token\")\n    by bin(TimeGenerated, 1d)\n| render timechart\n    with (\n    xtitle=\"Day\",\n    ytitle=\"Count\",\n    title=\"MFA challenges vs MFA previously satisfied over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeMFAChallengevsPreviouslySatisfied",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "23609a32-8859-4fa6-b305-6da088cc802a",
        "query_hash": "9e4577a9dcf4a2b3d2fc5089fc2605f6adfb2089d07192577b4a00cb618ff89b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeMFAMethods.kql",
        "query": "//Visualize the MFA types used by your users, i.e text message, mobile app notification, verification code\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| project AuthenticationDetails\n| extend ['MFA Method'] = tostring(parse_json(AuthenticationDetails)[1].authenticationMethod)\n| summarize Count=count()by ['MFA Method']\n| where ['MFA Method'] != \"Previously satisfied\" and isnotempty(['MFA Method'])\n| sort by Count desc\n| render barchart with (title=\"Types of MFA Methods used\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeMFAMethods",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3a32cc45-fce5-4006-a3e5-d41fe86dc231",
        "query_hash": "0317f6a92aec0dfe79efd2f0c798a5a65b1f5611fae065dae33aa3aad9da489a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeMFAMethodsovertime.kql",
        "query": "//Visualize the MFA types used by your users - phone sign in, mobile passcode, push or text message, over time\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (180d)\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n| project TimeGenerated, AuthenticationDetails\n| extend ['MFA Method'] = tostring(parse_json(AuthenticationDetails)[1].authenticationMethod)\n| summarize Count=count()by ['MFA Method'], bin(TimeGenerated, 7d)\n| where ['MFA Method'] != \"Previously satisfied\" and isnotempty(['MFA Method']) \n| render timechart with (ytitle=\"Count\", xtitle=\"Day\", title=\"MFA methods per week over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeMFAMethodsovertime",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7fd94513-165c-4d26-90a5-d7b68a004bc3",
        "query_hash": "70c78bd38655aaaa3ba879e609aa00197bfd20efd911b7e98af0202fb63b4e24",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizePasswordvsPasswordless.kql",
        "query": "//Visualize password vs passwordless signins per day\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago (180d)\n| mv-expand todynamic(AuthenticationDetails)\n| project TimeGenerated, AuthenticationDetails\n| extend AuthMethod = tostring(AuthenticationDetails.authenticationMethod)\n| summarize\n    Passwordless=countif(AuthMethod in (\"Windows Hello for Business\", \"Passwordless phone sign-in\", \"FIDO2 security key\", \"X.509 Certificate\")),\n    Password=countif(AuthMethod == \"Password\")\n    by bin(TimeGenerated, 1d)\n| render timechart with (title=\"Passwordless vs Password Authentication\", ytitle=\"Count\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizePasswordvsPasswordless",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "72394a2d-2981-43dd-92bb-e1dc6c0fd6c7",
        "query_hash": "a6d67902f3bcbad926374fd132a901c9756ac77ca380833f641c51392d65d17a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeRiskEventsoverTime.kql",
        "query": "//Visualize the different risk types (e.g password spray, unlikely travel) per month\n\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n\nAADUserRiskEvents\n| where TimeGenerated > ago (180d)\n| where isnotempty(RiskEventType)\n| summarize Count=count()by RiskEventType, startofmonth(TimeGenerated)\n| render columnchart with (kind=unstacked, title=\"Risk event types per month\", xtitle=\"Month\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeRiskEventsoverTime",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "325b492d-0131-4f8f-8dec-90b5834e39bf",
        "query_hash": "0bb743a579b6492b61ca15b62875e03380c872ac9b676f48107343dee3d40787",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeSigninsbyDeviceTrust.kql",
        "query": "//Visualize sign in attempts to your Azure AD tenant by device trust type\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| extend DeviceTrustType = tostring(DeviceDetail.trustType)\n| extend ['Trust Type']=case(isnotempty(DeviceTrustType), strcat=DeviceTrustType,\n    isempty(DeviceTrustType), strcat=\"Untrusted\",\n    \"unknown\")\n| summarize Count=count()by ['Trust Type'], bin(TimeGenerated, 1d)\n| render timechart with (title=\"Signins to Azure AD by trust type\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeSigninsbyDeviceTrust",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "474f13e4-8c42-451f-872a-a2d344faff48",
        "query_hash": "b0f9b8422c3676e9c41c2b852a85588f923de7e7dd8b572fd843336d0670b156",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeSSPR.kql",
        "query": "//Visualize successful self service password resets and account unlocks over time\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where TimeGenerated > ago (180d)\n| where OperationName in (\"Reset password (self-service)\", \"Unlock user account (self-service)\")\n| summarize\n    ['Password Reset']=countif(OperationName == \"Reset password (self-service)\" and ResultDescription == \"Successfully completed reset.\"),\n    ['Account Unlock']=countif(OperationName == \"Unlock user account (self-service)\" and ResultDescription == \"Success\")\n    by startofweek(TimeGenerated)\n| render timechart\n    with (\n    ytitle=\"Count\",\n    xtitle=\"Day\",\n    title=\"Self Service Password Resets and Account Unlocks over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeSSPR",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "185de391-5332-43d3-88d6-bcd5bee11e75",
        "query_hash": "6920f8948ecf11c01349e3820ee4ed32c903a997f877709d0085ec4feeb2a9a7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-VisualizeTotalvsDistinctsignins.kql",
        "query": "//Visualize the difference been total and distinct user sign ins to an app per day\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Microsoft Sentinel query\nSigninLogs\n| where TimeGenerated > ago(90d)\n| where AppDisplayName == \"Office 365 Exchange Online\"\n| where ResultType == 0\n| summarize ['Total Signins']=count(), ['Distinct user signins']=dcount(UserPrincipalName) by bin(TimeGenerated, 1d)\n| render timechart\n    with (\n    title=\"Total vs Distinct signins to Exchange Online\",\n    xtitle=\"Day\",\n    ytitle=\"Count\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting with Azure AD P2 License\n\nAADSignInEventsBeta\n| where Timestamp > ago(90d)\n| where Application == \"Office 365 Exchange Online\"\n| where ErrorCode == 0\n| summarize ['Total Signins']=count(), ['Distinct user signins']=dcount(AccountUpn) by bin(Timestamp, 1d)\n| render timechart",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-VisualizeTotalvsDistinctsignins",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5bd19629-c290-4eed-9f3d-584df27ca55b",
        "query_hash": "ddcd825b8526e93a0260327b72cd473529148ccc7506c9ae86c29517ebe2a835",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CIdentity-YourUsersSigningIntoOtherTenantsAsGuests.kql",
        "query": "//Find sign ins where your users signed into other Azure AD tenants as outbound guests\n\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where AADTenantId == HomeTenantId\n| where ResourceTenantId != AADTenantId\n| where UserType == \"Guest\"\n| project\n    TimeGenerated,\n    AppDisplayName,\n    UserPrincipalName,\n    ResultType,\n    Location,\n    IPAddress,\n    ['Guest Tenant Id']=ResourceTenantId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Identity-YourUsersSigningIntoOtherTenantsAsGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "67a61dfc-0b1f-42fe-ae40-10e569c046e9",
        "query_hash": "56408db60fa29b722b4f75bd50b5456fe9945df02e38b0f338e31f82dc23d5e3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-ApplicationPermissionsGrant.kql",
        "query": "//Query to find applications that have had application permissions granted to them\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName has \"Add app role assignment to service principal\"\n| extend UpdatedPermission = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend AppName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[4].newValue)))\n| extend User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend AppId = tostring(TargetResources[1].id)\n| project TimeGenerated, OperationName, UpdatedPermission, AppName, AppId, User",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-ApplicationPermissionsGrant",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "084c7adb-f7ad-49ea-89ed-2ee2eaf712ee",
        "query_hash": "63f8730e146eb799007d8382605360f39420216266fcc509a8e113dc9fb1bf73",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-ApporDelegatedAccessGranted.kql",
        "query": "//Detect when either application or delegated access is granted to a service principal in Azure AD\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet delegatedaccess=\n    AuditLogs\n    | where OperationName has \"Add delegated permission grant\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n    | extend Activity = strcat(\"Delegated access added to application\")\n    | project\n        TimeGenerated,\n        Activity,\n        ['Permissions granted'],\n        ['Service Principal ObjectId'],\n        Actor;\nlet appaccess=\n    AuditLogs\n    | where OperationName has \"Add app role assignment to service principal\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Activity = strcat(\"Application access added to application\")\n    | extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n    | project\n        TimeGenerated,\n        Activity,\n        ['Permissions granted'],\n        ['Service Principal ObjectId'],\n        Actor;\nunion delegatedaccess, appaccess\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-ApporDelegatedAccessGranted",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "73cb85c7-c894-46bb-a4e8-b8d7eb0803e7",
        "query_hash": "f7f58df9fde2865bad1ab6fa765ceeec0d1223d7fef426080be5a85736307d41",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-DelegatedPermissionsGrant.kql",
        "query": "//Query to find applications that have had delegated permissions granted to them\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where Category == \"ApplicationManagement\"\n| where OperationName has \"Add delegated permission grant\"\n| extend UpdatedPermissions = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue))) \n| extend AppId = tostring(TargetResources[1].id)\n| project TimeGenerated, UpdatedPermissions, OperationName, AppId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-DelegatedPermissionsGrant",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7e156b69-4f05-454c-bc67-57dcea92bb68",
        "query_hash": "13bbff8f4a78dfcc24ed513b6c2deaf1efe4e69e18293c15dd834ed0ad15eda5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-DetectingFirstTimeCredentialAddition.kql",
        "query": "//Detects users who have added a credential to an Azure AD App for the first time in 90 days, adjust timeframe as needed.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet timeframe = startofday(ago(90d));\nAuditLogs\n| where TimeGenerated > timeframe and TimeGenerated < startofday(now())\n| where OperationName has \"Update application \u2013 Certificates and secrets management\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project Actor\n| join kind=rightanti\n    (\n    AuditLogs\n    | where TimeGenerated > startofday(now())\n    | where OperationName has \"Update application \u2013 Certificates and secrets management\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend AppId = tostring(AdditionalDetails[1].value)\n    | project TimeGenerated, Actor, AppId\n    )\n    on Actor\n| project TimeGenerated, Actor, AppId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-DetectingFirstTimeCredentialAddition",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c00d3cfa-832f-4368-a433-f461f5d725d0",
        "query_hash": "66ad0917f3b9a1f10301c87db4aaa699abdd6e697737af5e642ca374add54086",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-FirstTimeAppConsent.kql",
        "query": "//Detect when a user adds delegated or application permissions to an Azure AD app for the first time.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Look back in the last year to find all users who have added access to an app\nlet newusers=\nAuditLogs\n| where TimeGenerated > ago(365d) and TimeGenerated < ago(1d)\n| where OperationName in (\"Add app role assignment to service principal\",\"Add delegated permission grant\")\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| distinct Actor\n//Find users who add access to an app for the first time in the last day\n| join kind=rightanti (\nAuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName in (\"Add app role assignment to service principal\",\"Add delegated permission grant\")\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| distinct Actor )\non Actor;\n//Retrieve the list of permissions granted by the first time users\nlet delegatedaccess=\n    AuditLogs\n    | where TimeGenerated > ago(1d)\n    | where OperationName has \"Add delegated permission grant\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | where Actor in (newusers)\n    | extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n    | extend Activity = strcat(\"Delegated access added to application\")\n    | project\n        TimeGenerated,\n        Activity,\n        ['Permissions granted'],\n        ['Service Principal ObjectId'],\n        Actor;\nlet appaccess=\n    AuditLogs\n    | where TimeGenerated > ago(1d)\n    | where OperationName has \"Add app role assignment to service principal\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | where Actor in (newusers)\n    | extend Activity = strcat(\"Application access added to application\")\n    | extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n    | project\n        TimeGenerated,\n        Activity,\n        ['Permissions granted'],\n        ['Service Principal ObjectId'],\n        Actor;\nunion delegatedaccess, appaccess\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-FirstTimeAppConsent",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0d024e52-ddbb-4150-8a77-3300b808ebaf",
        "query_hash": "93dfad350267a058724a541d43511f86dd7610f89f9903f131f719cb098b5403",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-InactiveServicePrincipalswithPrivilege.kql",
        "query": "//Find any Azure AD service principals that have been granted any .All access in the last year that haven't signed in for 30 days. May include already deleted service principals.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet delegatedaccess=\n    AuditLogs\n    | where TimeGenerated > ago(365d)\n    | where OperationName has \"Add delegated permission grant\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | extend ['Permission type'] = strcat(\"Delegated\")\n    | summarize arg_max(TimeGenerated, *) by ServicePrincipalId\n    | project\n        TimeGenerated,\n        ['Permission type'],\n        ['Permissions granted'],\n        ServicePrincipalId;\nlet appaccess=\n    AuditLogs\n    | where TimeGenerated > ago(365d)\n    | where OperationName has \"Add app role assignment to service principal\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend ['Permission type'] = strcat(\"Application\")\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | summarize arg_max(TimeGenerated, *) by ServicePrincipalId\n    | project\n        TimeGenerated,\n        ServicePrincipalId,\n        ['Permission type'],\n        ['Permissions granted'];\nunion delegatedaccess, appaccess\n| where ['Permissions granted'] contains \".All\"\n| distinct ServicePrincipalId\n| join kind=leftanti (\n    AADServicePrincipalSignInLogs\n    | where TimeGenerated > ago (30d)\n    | where ResultType == \"0\"\n    | distinct ServicePrincipalName, ServicePrincipalId)\n    on ServicePrincipalId\n\n\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-InactiveServicePrincipalswithPrivilege",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4269a104-dc0c-4cc6-87bd-f5b908ad8b75",
        "query_hash": "c2734e8e4ad8414a2ffc227f94362b1f7bb3bd94d3da2e3ec4ad1a53c43534c3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-PermissionsAddedRemoved.kql",
        "query": "//Query to find OAuth applications where permissions were added and removed within 10 minutes\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nlet PermissionAddedAlert=\n    AuditLogs\n    | where OperationName has \"Add app role assignment to service principal\"\n    | extend UserWhoAdded = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend PermissionAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | extend AppId = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[5].newValue)))\n    | extend TimeAdded = TimeGenerated\n    | project UserWhoAdded, PermissionAdded, AppId, TimeAdded;\nlet PermissionRemovedAlert=\n    AuditLogs\n    | where OperationName has \"Remove app role assignment from service principal\"\n    | extend UserWhoRemoved = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend PermissionRemoved = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].oldValue)))\n    | extend AppId = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[5].newValue)))\n    | extend TimeRemoved = TimeGenerated\n    | project UserWhoRemoved, PermissionRemoved, AppId, TimeRemoved;\nPermissionAddedAlert\n| join kind=inner PermissionRemovedAlert on AppId\n| where abs(datetime_diff('minute', TimeAdded, TimeRemoved)) <= 10\n| extend TimeDiff = TimeAdded - TimeRemoved\n| project\n    TimeAdded,\n    UserWhoAdded,\n    PermissionAdded,\n    AppId,\n    TimeRemoved,\n    UserWhoRemoved,\n    PermissionRemoved,\n    TimeDiff",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-PermissionsAddedRemoved",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "75e73c23-86bd-4627-8819-5796f26bc48c",
        "query_hash": "d37a9031c7981c2d7e96d707650e5b443014442a83b12b9736bd1622ba1d0efd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-SummarizeCurrentAppPermissions.kql",
        "query": "//Summarize your Azure AD apps by what permissions they currently hold\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Find applications that have been deleted\nlet deletedapps=\nAuditLogs\n| where OperationName == \"Remove service principal\"\n| extend ServicePrincipalId = tostring(TargetResources[0].id)\n| project ServicePrincipalId;\nlet delegatedaccess=\n    AuditLogs\n    | where TimeGenerated > ago(365d)\n    | where OperationName has \"Add delegated permission grant\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | extend ['Permission type'] = strcat(\"Delegated\")\n    | summarize arg_max(TimeGenerated, *) by ServicePrincipalId\n//Exclude deleted applications\n    | where ServicePrincipalId !in (deletedapps)\n    | project\n        TimeGenerated,\n        ['Permission type'],\n        ['Permissions granted'],\n        ServicePrincipalId;\nlet appaccess=\n    AuditLogs\n    | where TimeGenerated > ago(365d)\n    | where OperationName has \"Add app role assignment to service principal\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend ['Permission type'] = strcat(\"Application\")\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | summarize arg_max(TimeGenerated, *) by ServicePrincipalId\n//Exclude deleted applications\n    | where ServicePrincipalId !in (deletedapps)\n    | project\n        TimeGenerated,\n        ServicePrincipalId,\n        ['Permission type'],\n        ['Permissions granted'];\nunion delegatedaccess, appaccess\n| mv-expand ['Permissions granted']\n| where isnotempty( ['Permissions granted'])\n//Extend new permission field\n| summarize ['Permission List']=make_set(['Permissions granted']) by ['Permission type'], ServicePrincipalId\n| extend ['Number of Permissions']=array_length(['Permission List']) \n| sort by ServicePrincipalId desc, ['Permission type'] asc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-SummarizeCurrentAppPermissions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0177a001-7145-4317-a064-24ee73de581a",
        "query_hash": "b2b4b47524a7d8e5365dfa0c5419e94b28c611036e4dcae948e3fd0e67bee494",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-SummarizePermissionGrantedtoApps.kql",
        "query": "//Summarize the permissions granted to your Azure AD apps over the last year\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Find applications that have been deleted\nlet deletedapps=\nAuditLogs\n| where OperationName == \"Remove service principal\"\n| extend ServicePrincipalId = tostring(TargetResources[0].id)\n| project ServicePrincipalId;\nlet delegatedaccess=\n    AuditLogs\n    | where TimeGenerated > ago(365d)\n    | where OperationName has \"Add delegated permission grant\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | extend ['Permission type'] = strcat(\"Delegated\")\n    | summarize arg_max(TimeGenerated, *) by ServicePrincipalId\n//Exclude deleted applications\n    | where ServicePrincipalId !in (deletedapps)\n    | project\n        TimeGenerated,\n        ['Permission type'],\n        ['Permissions granted'],\n        ServicePrincipalId;\nlet appaccess=\n    AuditLogs\n    | where TimeGenerated > ago(365d)\n    | where OperationName has \"Add app role assignment to service principal\"\n    | extend x = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | extend ['Permissions granted'] = split(x, ' ')\n    | extend ['Permission type'] = strcat(\"Application\")\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | summarize arg_max(TimeGenerated, *) by ServicePrincipalId\n//Exclude deleted applications\n    | where ServicePrincipalId !in (deletedapps)\n    | project\n        TimeGenerated,\n        ServicePrincipalId,\n        ['Permission type'],\n        ['Permissions granted'];\nunion delegatedaccess, appaccess\n| mv-expand ['Permissions granted']\n| where isnotempty( ['Permissions granted'])\n//Extend new permission field\n| extend Permission = strcat(['Permission type'],\" - \",['Permissions granted'])\n| summarize PermissionCount=count()by Permission\n| sort by PermissionCount desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-SummarizePermissionGrantedtoApps",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fac8b860-a986-4e55-b49e-962ee569bb81",
        "query_hash": "a1c33a6a994a5723c0290721d096f8d4c0e095a38547adc8467f43b0110eb484",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-SummarizeServicePrincipalInactivity.kql",
        "query": "//Summarize your Azure AD service principals by the last time they signed in, grouped by month\n\n//Data connector required for this query - Azure Active Directory - Service Principal Signin Logs\n\nAADServicePrincipalSignInLogs\n| project TimeGenerated, AppId, ResultType, ServicePrincipalName\n| where TimeGenerated > ago (360d)\n| where ResultType == 0\n| summarize arg_max(TimeGenerated, *) by AppId\n| summarize ['Application List']=make_set(ServicePrincipalName) by Month=startofmonth(TimeGenerated)\n| sort by Month asc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-SummarizeServicePrincipalInactivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "dd05f29c-8fd6-466a-9363-2b4c90addf29",
        "query_hash": "c9e586d556f1c3af38f99cc969e56544293b13b18e1c491d71cff9d198cc6f20",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5COAuth-TrackEventsonServicePrincipals.kql",
        "query": "//Tracks privileged post creation events on your Azure AD service principals, such as secrets being generated, permissions being added or an admin consenting.\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\n//Events are then summarized by operation and time. Add a specific Application ID to track events for that one app.\nlet timeframe=60d;\nlet AppAdded=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName == \"Add service principal\"\n    | extend AppId = tostring(AdditionalDetails[1].value)\n    | extend ServicePrincipalId = tostring(TargetResources[0].id)\n    // Optionally add a specific Application ID\n    //| where AppId == \"id\"\n    | extend AppName = tostring(TargetResources[0].displayName)\n    | where isnotempty(AppId)\n    | project TimeGenerated, OperationName, AppId, AppName, ServicePrincipalId;\nlet AppSecretAdded=\n    AuditLogs\n    | where OperationName contains 'Update application \u2013 Certificates and secrets management'\n    | extend AppId = tostring(AdditionalDetails[1].value)\n    | project TimeGenerated, AppId, OperationName\n    | join kind=inner AppAdded on AppId\n    | project TimeGenerated, OperationName, AppId, AppName;\nlet AppApplicationAccess=\n    AuditLogs\n    | where OperationName == \"Add app role assignment to service principal\"\n    | extend AppId = tostring(TargetResources[1].displayName)\n    | project TimeGenerated, AppId, OperationName\n    | join kind=inner AppAdded on AppId\n    | project TimeGenerated, OperationName, AppId, AppName;\nlet AppDelegatedAccess=\n    AuditLogs\n    | where OperationName == \"Add delegated permission grant\"\n    | extend ServicePrincipalId = tostring(TargetResources[1].id)\n    | project TimeGenerated, ServicePrincipalId, OperationName\n    | join kind=inner AppAdded on ServicePrincipalId\n    | project TimeGenerated, OperationName, AppId, AppName;\nlet AppConsentGiven=\n    AuditLogs\n    | where OperationName == \"Consent to application\"\n    | extend AppId = tostring(AdditionalDetails[1].value)\n    | project TimeGenerated, AppId, OperationName\n    | join kind=inner AppAdded on AppId\n    | project TimeGenerated, OperationName, AppId, AppName;\nlet AppDeleted=\n    AuditLogs\n    | where OperationName == \"Delete application\"\n    | extend AppId = tostring(AdditionalDetails[1].value)\n    | project TimeGenerated, AppId, OperationName\n    | join kind=inner AppAdded on AppId\n    | project TimeGenerated, OperationName, AppId, AppName;\nAppAdded\n| union\n    AppSecretAdded,\n    AppApplicationAccess,\n    AppConsentGiven,\n    AppDelegatedAccess,\n    AppDeleted\n| sort by TimeGenerated asc \n| summarize\n    AppOperations=(make_list(OperationName)),\n    AppOperationTime=(make_list(TimeGenerated))\n    by AppId, AppName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OAuth-TrackEventsonServicePrincipals",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "31998c71-2419-4c3e-b719-186298022cb9",
        "query_hash": "b90e9a8e4798e3bc198adc93dbcff51db697f6b40369e1ffe54c15e3b18b846c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CPIM-UserAssignedRolebutHasntActivated.kql",
        "query": "// Find users who are assigned a privileged role in Azure AD but haven't activated a role in the last 45 days\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| where isnotempty(AssignedRoles)\n| where AssignedRoles != \"[]\"\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| join kind=leftanti  (\n    AuditLogs\n    | where TimeGenerated > ago(45d)\n    | where OperationName == \"Add member to role completed (PIM activation)\"\n    | extend AccountUPN = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN)\n    on AccountUPN",
        "source_type": "text",
        "source_index": 0,
        "query_name": "PIM-UserAssignedRolebutHasntActivated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c9179176-bbc0-4843-983a-0b7afb6d3fc8",
        "query_hash": "bead123192145f7d90e423891d0c1e5d457599dd3fb2a9879e296133f8e71885",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Active%20Directory%5CSSPR-PasswordResetInitiatedviaMSGraph.kql",
        "query": "// Detects when a self service password reset has been initiated via MS Graph and is successful\n\n//Data connector required for this query - Azure Active Directory - Audit Logs\n\nAuditLogs\n| where OperationName == \"POST UserAuthMethod.ResetPasswordOnPasswordMethods\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| project TimeGenerated, OperationName, Actor, CorrelationId\n| join kind=inner\n    (AuditLogs\n    | where OperationName == \"Reset password (by admin)\"\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | where Result == \"success\"\n    )\n    on CorrelationId\n| project GraphPostTime=TimeGenerated, PasswordResetTime=TimeGenerated1, Actor, Target",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SSPR-PasswordResetInitiatedviaMSGraph",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9ffe68c5-291f-42a3-89b2-dfe723b2272a",
        "query_hash": "df7de2a690152500135fc7187dbe5196c5ac502d92014fde917004700bae2961",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CAzure-ResourceLockAddedorRemoved.kql",
        "query": "//Detect when a resource lock is added or removed from an Azure resource\n\n//Data connector required for this query - Azure Activity \n\nAzureActivity\n| where OperationNameValue in (\"MICROSOFT.AUTHORIZATION/LOCKS/WRITE\", \"MICROSOFT.AUTHORIZATION/LOCKS/DELETE\")\n| where ActivityStatusValue == \"Success\"\n| extend Activity = case(OperationNameValue == \"MICROSOFT.AUTHORIZATION/LOCKS/WRITE\", strcat(\"Resource Lock Added\"),\n    OperationNameValue == \"MICROSOFT.AUTHORIZATION/LOCKS/DELETE\", strcat(\"Resource Lock Removed\"),\n    \"unknown\")\n| extend ResourceGroup = tostring(parse_json(Properties).resourceGroup)\n| extend AzureResource = tostring(parse_json(Properties).resourceProviderValue)\n| extend x = tostring(parse_json(Properties).resource)\n| parse x with ResourceName \"/\" *\n| parse x with * \"microsoft.authorization/\" LockName\n| project\n    TimeGenerated,\n    Activity,\n    ResourceName,\n    ['Azure Resource']=AzureResource,\n    ['Azure Subscription Id']=SubscriptionId,\n    ['Azure Resource Group']=ResourceGroup,\n    LockName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Azure-ResourceLockAddedorRemoved",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b0fba90e-6fa8-4124-bcc1-f076321d5eb3",
        "query_hash": "88b82e644765270392b56b57febf143a0ca39d784457ade747f97bbe7454d66f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CAzure-ServicePrincipalAddedtoAzure.kql",
        "query": "//Detect when an Azure AD service principal is given access to an Azure RBAC scope, i.e contributor to a subscription or resource group\n\n//Data connector required for this query - Azure Activity \n\nAzureActivity\n| where OperationNameValue == \"MICROSOFT.AUTHORIZATION/ROLEASSIGNMENTS/WRITE\"\n| extend ServicePrincipalObjectId = tostring(parse_json(tostring(parse_json(tostring(Properties_d.requestbody)).Properties)).PrincipalId)\n| extend ServicePrincipalType = tostring(parse_json(tostring(parse_json(tostring(Properties_d.requestbody)).Properties)).PrincipalType)\n| extend Scope = tostring(parse_json(tostring(parse_json(tostring(Properties_d.requestbody)).Properties)).Scope)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).requestbody)).Properties)).RoleDefinitionId)\n| extend Actor = tostring(Properties_d.caller)\n| where ServicePrincipalType == \"ServicePrincipal\"\n| project TimeGenerated, RoleAdded, Scope, ServicePrincipalObjectId, Actor",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Azure-ServicePrincipalAddedtoAzure",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fc16edfd-b9ea-4ebf-a773-2518e9707241",
        "query_hash": "f3020f8ee29731198382dd12ee1f1d5d2d0453f2d07d0ff15f9ed7994a50505e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CAzureLogAnalytics-DetectwhenWorkspaceKeysareRead.kql",
        "query": "//Detect when the workspace keys to an Azure log analytics workspace are read\n\n//Data connector required for this query - Azure Activity \n\nAzureActivity\n| where OperationNameValue == \"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/SHAREDKEYS/ACTION\"\n| extend WorkspaceName = tostring(parse_json(Properties).resource)\n| where ActivityStatusValue == \"Success\"\n| project\n    TimeGenerated,\n    Actor=Caller,\n    ['Log Analytics Workspace Name']=WorkspaceName,\n    ['Actor IP Address']=CallerIpAddress,\n    ['Azure Subscription Id']=SubscriptionId,\n    ['Azure Resource Group']=ResourceGroup",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AzureLogAnalytics-DetectwhenWorkspaceKeysareRead",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4201b7c7-9952-41a7-8a22-b446ea91b353",
        "query_hash": "15f35e552692c8c9d27ed1732a537ae4f5da55fc3cfb6898735bb52bb23fa883",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CAzureStorage-FirstTimeStorageKeyEnumeration.kql",
        "query": "//Detect when a user retrieves keys for Azure storage for the first time compared to the previous time range\n\n//Data connector required for this query - Azure Activity \n\nlet knownusers=\n    AzureActivity\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)\n    | where OperationName == \"List Storage Account Keys\"\n    | where ActivityStatus == \"Succeeded\"\n    | project-rename Actor=Caller\n    | distinct Actor;\nAzureActivity\n| where TimeGenerated > ago(1d)\n| where OperationName == \"List Storage Account Keys\"\n| where ActivityStatus == \"Succeeded\"\n| project-rename Actor=Caller\n| where Actor !in (knownusers)\n| project\n    TimeGenerated,\n    Actor,\n    ['Actor IP Address']=CallerIpAddress,\n    ['Storage Account Name']=Resource,\n    ['Azure Subscription Id']=SubscriptionId,\n    ['Azure Resource Group']=ResourceGroup ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AzureStorage-FirstTimeStorageKeyEnumeration",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "08448746-72ed-4754-8c44-5fb8ff23135f",
        "query_hash": "e2e5ffae2a9a175e96e6266f294e5ef5c576fb82e02d6f043590e257848150f1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CAzureVM-DiskImageURLGenerated.kql",
        "query": "//Detect when a download URL is generated for an Azure virtual machine disk\n\n//Data connector required for this query - Azure Activity \n\nAzureActivity\n| where OperationNameValue == \"MICROSOFT.COMPUTE/DISKS/BEGINGETACCESS/ACTION\"\n| where ActivityStatusValue == \"Success\"\n| extend DiskName = tostring(Properties_d.resource)\n| project\n    TimeGenerated,\n    Actor=Caller,\n    ['Actor IP Address']=CallerIpAddress,\n    ['Azure Subscription Id']=SubscriptionId,\n    ['Azure Resource Group']=ResourceGroup,\n    DiskName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AzureVM-DiskImageURLGenerated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "22202c65-4398-4b5c-b5d0-46374042eea4",
        "query_hash": "f729826369c833e8ca1e724656689bec005050a445c5b24eed9052eb74cd8463",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Activity%5CSentinel-DetectAccessAddedtoWorkspace.kql",
        "query": "//Alerts on users being added to roles on your Azure Sentinel log analytics workspace.\n\n//Data connector required for this query - Azure Activity \n//Data connector required for this query - Microsoft Sentinel UEBA\n\n//Uses a lookup to a GitHub gist to match Azure role ids to friendly role names and the IdentityInfo to retrieve identity details\n\nlet workspaceid=\"your Sentinel workspace id\";\nlet timeframe=1d;\nlet AZRoles = externaldata(Name: string, Id: string) [@\"https://gist.githubusercontent.com/reprise99/363eee70938c9a3d662e3f6da4610fe4/raw/b25b2d7a626396684ab578363888a0e360e7b287/.csv\"] with(ignoreFirstRecord=true, format=\"csv\");\nlet accesschange =AzureActivity\n    | where TimeGenerated > ago(timeframe)\n    | where OperationName == \"Create role assignment\"\n    | where TenantId == workspaceid\n    | extend TargetAADUserId = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).requestbody)).Properties)).PrincipalId)\n    | extend RoleDefinitionId = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).requestbody)).Properties)).RoleDefinitionId)\n    | parse RoleDefinitionId with * '/roleDefinitions/' AzureRoleId\n    | where ActivityStatus == \"Started\"\n    | project\n        AccessChangeTime=TimeGenerated,\n        Actor=Caller,\n        ActorIPAddress=CallerIpAddress,\n        ResourceGroup,\n        WorkspaceId=TenantId,\n        AzureRoleId,\n        TargetAADUserId\n    | join kind=inner (AZRoles \n        )\n        on $left.AzureRoleId == $right.Id\n    | project-away Id;\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| join kind=inner accesschange on $left.AccountObjectId == $right.TargetAADUserId\n| project\n    AccessChangeTime=TimeGenerated,\n    Actor,\n    ActorIPAddress,\n    ResourceGroup,\n    WorkspaceId=TenantId,\n    AzureRoleId,\n    AzureRoleName=Name,\n    TargetAADUserId,\n    AccountUPN",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Sentinel-DetectAccessAddedtoWorkspace",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d3e202ed-b6e5-4e77-aea2-d81c00c8b850",
        "query_hash": "57e48040fabbf518b8d101848c22973705d53ddb6848fc439e2f84da5fc77d11",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Bastion%5CBastion-AuditUsage.kql",
        "query": "//Find which users have attempted to connect to virtual machines using RDP or SSH in Azure Bastion\n\n//Data connector required for this query - Azure Bastion\n\nMicrosoftAzureBastionAuditLogs\n| parse TargetResourceId with * 'VIRTUALMACHINES/' ['Virtual Machine Name']\n| project\n    TimeGenerated,\n    Message,\n    UserName,\n    Protocol,\n    ['Virtual Machine Name'],\n    ['Virtual Machine IP']=TargetVMIPAddress\n| sort by TimeGenerated desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Bastion-AuditUsage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6ac8f179-0439-43fd-8f11-e40e3f883c11",
        "query_hash": "40b1a8faa7141d53c85e0ba0271f728df76a69e32a10bea59b3a07d818329215",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Bastion%5CBastion-SummarizeAccountAccess.kql",
        "query": "//Summarize your Bastion usage by which users are connecting to which devices via which protocl (RDP or SSH)\n\n//Data connector required for this query - Azure Bastion\n\nMicrosoftAzureBastionAuditLogs \n| where TimeGenerated > ago (30d)\n| where Message == \"Successfully Connected.\"\n| summarize\n    ['Count of RDP Devices']=dcountif(TargetVMIPAddress, Protocol == \"rdp\"),\n    ['List of RDP Devices']=make_set_if(TargetVMIPAddress, Protocol == \"rdp\"),\n    ['Count of SSH Devices']=dcountif(TargetVMIPAddress, Protocol == \"ssh\"),\n    ['List of SSH Devices']=make_set_if(TargetVMIPAddress, Protocol == \"ssh\")\n    by UserName\n| sort by ['Count of RDP Devices'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Bastion-SummarizeAccountAccess",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "85278f72-ad14-4406-a22b-96eb13b04a18",
        "query_hash": "03b900bbf73974391c4d527da93d86cb50dabeea7751e7306c240a0052f4eb5b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Diagnostics%5CAppGateway-MostAttackedHostName.kql",
        "query": "//Visualize the most attacked hostname behind an Azure App Gateway/WAF\n\n//Data connector required for this query - Azure Diagnostics (Application Gateways)\n\nAzureDiagnostics\n| where TimeGenerated > ago(30d)\n| where ResourceType == \"APPLICATIONGATEWAYS\"\n| where isnotempty(ruleId_s)\n| summarize ['WAF Hit Count']=count() by hostname_s\n| where isnotempty(hostname_s)\n| sort by ['WAF Hit Count'] desc\n| render barchart with (title=\"Most WAF Hits by Hostname\", xtitle=\"Hostname\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AppGateway-MostAttackedHostName",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8a4e2f0d-66a1-4c6f-b0bf-f1250a06b3c1",
        "query_hash": "65e07992d9667f787d9bfb065f4d6ae2a81d6e4c06f01a6933f1c5a0f6cc6598",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Diagnostics%5CAppGateway-VisualizeWAFTraffic.kql",
        "query": "//Visualize WAF rule actions such as allowed, blocked, detected and matched over time\n\n//Data connector required for this query - Azure Diagnostics (Application Gateways)\n\nAzureDiagnostics\n| where TimeGenerated > ago(30d)\n| where ResourceType == \"APPLICATIONGATEWAYS\"\n| summarize count()by action_s, bin(TimeGenerated, 1h)\n| where isnotempty(action_s)\n| render timechart with (ytitle=\"WAF Hit Count\", title=\"Web application firewall traffic over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "AppGateway-VisualizeWAFTraffic",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a1f092be-02ae-4e4d-b81e-1e16a2e379ef",
        "query_hash": "71ead0299a9c29cc5d8df8c67864e873ded4034ef380c0502153a9149fce6fbc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Diagnostics%5CCVE-2021-44228-2.kql",
        "query": "//Parse all request uris over the last 30 days and create a new column from the string between / and ://\n//Example - from /${jndi:ldap:// we parse ${jndi:ldap: to a new column called HeaderUri\n\n//Data connector required for this query - Azure Diagnostics (Application Gateways)\n\n//Look up the last 3 days of data to find any new HeaderUri strings between / and :// not seen for the previous 30 days\nAzureDiagnostics\n| where TimeGenerated > ago(30d) and TimeGenerated < ago(3d)\n| where ResourceType == \"APPLICATIONGATEWAYS\"\n| project TimeGenerated, host_s, originalRequestUriWithArgs_s, clientIP_s\n| parse-where originalRequestUriWithArgs_s with * '/' HeaderUri '://' *\n| distinct host_s, HeaderUri\n| join kind=rightanti (\n    AzureDiagnostics\n    | where TimeGenerated > ago(3d)\n    | where ResourceType == \"APPLICATIONGATEWAYS\"\n    | project TimeGenerated, host_s, originalRequestUriWithArgs_s, clientIP_s\n    | parse-where originalRequestUriWithArgs_s with * '/' HeaderUri '://' *\n    | project TimeGenerated, originalRequestUriWithArgs_s, host_s, HeaderUri)\n    on host_s, HeaderUri\n| parse-where originalRequestUriWithArgs_s with * '://' MaliciousHost '/' *\n| project TimeGenerated, originalRequestUriWithArgs_s, HeaderUri, MaliciousHost, Target=host_s",
        "source_type": "text",
        "source_index": 0,
        "query_name": "CVE-2021-44228-2",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d5f5f71a-49aa-4b34-9bce-c6beaa82c31e",
        "query_hash": "b509964d70e577409ca282b8ebced8a6d194b1b6bf98aea909f153544027997c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Diagnostics%5CCVE-2021-44228.kql",
        "query": "//Detection rule for App Gateway rule hits for log4j vulnerability. Retrieve attacked host, malicious IP and malicious User Agent\n\n//Data connector required for this query - Azure Diagnostics (Application Gateways)\n\nAzureDiagnostics\n| where details_data_s contains \"jndi\"\n| parse-where details_data_s with * 'User-Agent:' MaliciousHost \n| project TimeGenerated, Target=hostname_s, Actor=clientIp_s, MaliciousHost\n\n//Detect uri directly where starts with /$ or contains ldap\nAzureDiagnostics\n| where TimeGenerated > ago(1d)\n| where ResourceType == \"APPLICATIONGATEWAYS\"\n| project TimeGenerated, host_s, originalRequestUriWithArgs_s, clientIP_s\n| where originalRequestUriWithArgs_s startswith \"/$\" or originalRequestUriWithArgs_s contains \"jndi\"\n| parse-where originalRequestUriWithArgs_s with * '://' MaliciousHost ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "CVE-2021-44228",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ff0877df-ab80-4145-80f3-80d77ba88e7a",
        "query_hash": "a0ef3d2de9635caa01ad8f706222b1d148b7a531b5cbe807be9337ea020c9b98",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Key%20Vault%5CKeyVault-AnomalousKeyVaultAccessbyApp.kql",
        "query": "//Searches for access by applications that have not previously accessed an Azure Key Vault in the last 30 days and returns all actions by those applications\n\n//Data connector required for this query - Azure Key Vault\n\nlet operationlist = dynamic([\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nlet starttime = 30d;\nlet endtime = 1d;\nlet detection=\n    AzureDiagnostics\n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\n    | where ResourceType == \"VAULTS\"\n    | where ResultType == \"Success\"\n    | where OperationName in (operationlist)\n    | where isnotempty(identity_claim_appid_g)\n    | project-rename KeyVaultName=Resource, AppId=identity_claim_appid_g\n    | distinct KeyVaultName, AppId\n    | join kind=rightanti  (\n        AzureDiagnostics\n        | where TimeGenerated > ago(endtime)\n        | where ResourceType == \"VAULTS\"\n        | where ResultType == \"Success\"\n        | where OperationName in (operationlist)\n        | where isnotempty(identity_claim_appid_g)\n        | project-rename\n            KeyVaultName=Resource,\n            AppId=identity_claim_appid_g\n        | distinct KeyVaultName, AppId)\n        on KeyVaultName, AppId;\nAzureDiagnostics\n| where TimeGenerated > ago(endtime)\n| where ResourceType == \"VAULTS\"\n| where ResultType == \"Success\"\n| project-rename\n    KeyVaultName=Resource,\n    AppId=identity_claim_appid_g\n| join kind=inner detection on KeyVaultName, AppId\n| project\n    TimeGenerated,\n    AppId,\n    ResourceGroup,\n    SubscriptionId,\n    KeyVaultName,\n    KeyVaultTarget=id_s,\n    OperationName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "KeyVault-AnomalousKeyVaultAccessbyApp",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "26283c38-aa87-40d0-8e36-d23be1950105",
        "query_hash": "59320c1e85d61dde4d1233cfa0ca27908fe17128cdbda6109cccd46d5f604f62",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Key%20Vault%5CKeyVault-AnomalousKeyVaultAccessbyUser.kql",
        "query": "//Searches for access by users who have not previously accessed an Azure Key Vault in the last 30 days and returns all actions by those users\n\n//Data connector required for this query - Azure Key Vault\n\nlet operationlist = dynamic([\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nlet starttime = 30d;\nlet endtime = 1d;\nlet detection=\n    AzureDiagnostics\n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\n    | where ResourceType == \"VAULTS\"\n    | where ResultType == \"Success\"\n    | where OperationName in (operationlist)\n    | where isnotempty(identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s)\n    | project-rename KeyVaultName=Resource, UserPrincipalName=identity_claim_appid_g\n    | distinct KeyVaultName, UserPrincipalName\n    | join kind=rightanti  (\n        AzureDiagnostics\n        | where TimeGenerated > ago(endtime)\n        | where ResourceType == \"VAULTS\"\n        | where ResultType == \"Success\"\n        | where OperationName in (operationlist)\n        | where isnotempty(identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s)\n        | project-rename\n            KeyVaultName=Resource,\n            UserPrincipalName=identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s\n        | distinct KeyVaultName, UserPrincipalName)\n        on KeyVaultName, UserPrincipalName;\nAzureDiagnostics\n| where TimeGenerated > ago(endtime)\n| where ResourceType == \"VAULTS\"\n| where ResultType == \"Success\"\n| project-rename\n    KeyVaultName=Resource,\n    UserPrincipalName=identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s\n| join kind=inner detection on KeyVaultName, UserPrincipalName\n| project\n    TimeGenerated,\n    UserPrincipalName,\n    ResourceGroup,\n    SubscriptionId,\n    KeyVaultName,\n    KeyVaultTarget=id_s,\n    OperationName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "KeyVault-AnomalousKeyVaultAccessbyUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "85d7f6b0-faa8-4e7b-8fe2-d268097f3ff7",
        "query_hash": "b88eb40b5cbef72e46ed9eced5c741382b44d2014a8caf20dccf8c1e00b0b3af",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Key%20Vault%5CKeyVault-DefaultFirewallRuleSettoAllow.kql",
        "query": "// Detects when an Azure Key Vault firewall is set to allow all by default\n\n//Data connector required for this query - Azure Key Vault\n\nAzureDiagnostics\n| where ResourceType == \"VAULTS\"\n| where OperationName == \"VaultPatch\"\n| where ResultType == \"Success\"\n| project-rename ExistingACL=properties_networkAcls_defaultAction_s, VaultName=Resource\n| where isnotempty(ExistingACL)\n| where ExistingACL == \"Deny\"\n| sort by TimeGenerated desc  \n| project\n    TimeGenerated,\n    SubscriptionId,\n    VaultName,\n    ExistingACL\n| join kind=inner\n(\nAzureDiagnostics\n| project-rename NewACL=properties_networkAcls_defaultAction_s, VaultName=Resource\n| where ResourceType == \"VAULTS\"\n| where OperationName == \"VaultPatch\"\n| where ResultType == \"Success\"\n| summarize arg_max(TimeGenerated, *) by VaultName, NewACL\n) \non VaultName\n| where ExistingACL != NewACL and NewACL == \"Allow\"\n| project DetectionTime=TimeGenerated1, VaultName, ExistingACL, NewACL, SubscriptionId, IPAddressofActor=CallerIPAddress, Actor=identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s",
        "source_type": "text",
        "source_index": 0,
        "query_name": "KeyVault-DefaultFirewallRuleSettoAllow",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "05ad2a9d-23c1-4e44-a25b-724314baf9c1",
        "query_hash": "bc8bedaf9c771cb7340d93f2830fed7bc3b8fc712374f782e9141e1495504b2c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Key%20Vault%5CKeyVault-IPAddedtoFirewall.kql",
        "query": "// Detects when an IP address has been added to an Azure Key Vault firewall allow list\n\n//Data connector required for this query - Azure Key Vault\n\nAzureDiagnostics\n| where ResourceType == \"VAULTS\"\n| where OperationName == \"VaultPatch\"\n| where ResultType == \"Success\"\n| where isnotempty(addedIpRule_Value_s)\n| project\n    TimeGenerated,\n    VaultName=Resource,\n    SubscriptionId,\n    IPAddressofActor=CallerIPAddress,\n    Actor=identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s,\n    IPRangeAdded=addedIpRule_Value_s",
        "source_type": "text",
        "source_index": 0,
        "query_name": "KeyVault-IPAddedtoFirewall",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "bc5232b8-7c62-45f6-a5b9-a7ecaecef1ef",
        "query_hash": "b5b5e348320c701f5c87626e7efd1e3802d79ad989dd9a0f011f6513d9b275bf",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Key%20Vault%5CKeyVault-ObjectIDAddedtoAccessPolicy.kql",
        "query": "// Detects when a service principal (user, group or app) has been granted access to Key Vault data\n\n//Data connector required for this query - Azure Key Vault\n\nAzureDiagnostics\n| where ResourceType == \"VAULTS\"\n| where OperationName == \"VaultPatch\"\n| where ResultType == \"Success\"\n| project-rename ServicePrincipalAdded=addedAccessPolicy_ObjectId_g, Actor=identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_name_s, AddedKeyPolicy = addedAccessPolicy_Permissions_keys_s, AddedSecretPolicy = addedAccessPolicy_Permissions_secrets_s,AddedCertPolicy = addedAccessPolicy_Permissions_certificates_s\n| where isnotempty(AddedKeyPolicy)\n    or isnotempty(AddedSecretPolicy)\n    or isnotempty(AddedCertPolicy)\n| project\n    TimeGenerated,\n    KeyVaultName=Resource,\n    ServicePrincipalAdded,\n    Actor,\n    IPAddressofActor=CallerIPAddress,\n    AddedSecretPolicy,\n    AddedKeyPolicy,\n    AddedCertPolicy\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "KeyVault-ObjectIDAddedtoAccessPolicy",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b52eb10b-0cad-4c8f-876a-2f02626d048a",
        "query_hash": "9cff043e7d558cb4713881b0d8667905e7b7ecbb98bf383d7ceca8bf1a6e4849",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Key%20Vault%5CKeyVault-PotentiallySensitiveOperations.kql",
        "query": "// Detects Key Vault operations that could be malicious\n\n//Data connector required for this query - Azure Key Vault\n\nlet operationlist = dynamic(\n    [\"VaultDelete\", \"KeyDelete\", \"SecretDelete\", \"SecretPurge\", \"KeyPurge\", \"SecretBackup\", \"KeyBackup\", \"SecretListDeleted\", \"CertificateCreate\", \"CertificatePurge\"]);\nAzureDiagnostics\n| where ResourceType == \"VAULTS\" and ResultType == \"Success\" \n| where OperationName in (operationlist)\n| project TimeGenerated,\n    ResourceGroup,\n    SubscriptionId,\n    KeyVaultName=Resource,\n    KeyVaultTarget=id_s,\n    Actor=identity_claim_upn_s,\n    IPAddressofActor=CallerIPAddress,\n    OperationName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "KeyVault-PotentiallySensitiveOperations",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "14cc517e-850b-4d69-9c73-e8dcbea52cd6",
        "query_hash": "d927f369c88c959fb4ceb25dd62090833d85cd6bbfe1cc9c463b2727ceaee08a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Sentinel%20Incidents%5CSecurityIncident-DaysSinceLastIncident.kql",
        "query": "//Calculate how many days since each analytic rule last triggered, useful to determine if rules are still valid\n\n//Data connector required for this query - Microsoft Sentinel Incidents (generated automatically if you create incidents in Sentinel)\n\nSecurityIncident\n| where TimeGenerated > ago(180d)\n| where Status == \"New\" and ModifiedBy == \"Incident created from alert\"\n| summarize arg_max(TimeGenerated, *) by Title\n| extend ['Days Since Last Incident'] = datetime_diff(\"day\", now(), TimeGenerated)\n| project Title, ['Days Since Last Incident']\n| sort by ['Days Since Last Incident'] desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityIncident-DaysSinceLastIncident",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "80632bca-11c5-4145-a075-498785a0accc",
        "query_hash": "04956ca4296d0f3a269163936198406f52350a2887af292cdef39b8defb73d0c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Sentinel%20Incidents%5CSecurityIncident-PlaybookActivities.kql",
        "query": "//Visualize which playbooks are interacting with security incidents\n\n//Data connector required for this query - Microsoft Sentinel Incidents (generated automatically if you create incidents in Sentinel)\n\nlet timeframe=45d;\nSecurityIncident\n| where TimeGenerated > ago (timeframe)\n| where ModifiedBy startswith \"Playbook\"\n| summarize Count=count() by ModifiedBy\n| sort by Count desc \n| render barchart\n    with (\n    title=\"Count of playbooks interacting with Microsoft Sentinel incidents\",\n    ytitle=\"Playbook Name\")  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityIncident-PlaybookActivities",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ddd78da1-a121-431b-b64a-375f7f0666e5",
        "query_hash": "9bb835f707bd635997314a5f35d957d9269b8e92f77b0f9e0f8d22a2427d5c70",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Sentinel%20Incidents%5CSecurityIncident-VisualizeIncidentSeverity.kql",
        "query": "//Visualize the severity of your Microsoft Sentinel incidents per month\n\n//Data connector required for this query - Microsoft Sentinel Incidents (generated automatically if you create incidents in Sentinel)\n\nSecurityIncident\n| where TimeGenerated > ago(365d)\n| summarize Count=dcount(IncidentNumber)by Severity, startofmonth(TimeGenerated)\n| render columnchart with (kind=unstacked, title=\"Microsoft Sentinel Incident Severity\", xtitle=\"Month\") ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityIncident-VisualizeIncidentSeverity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7b59451a-5262-4dee-9895-4e7dc8d5a2e3",
        "query_hash": "1c970495d35145f88ef7f1e3dae191c18625b2ad17b29ad9fb4f10a008e5a7dc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Sentinel%20Incidents%5CSecurityIncident-VisualizeIncidentswithTrend.kql",
        "query": "//Create a visualization showing the total Sentinel incidents and the trend of incidents over time\n\n//Data connector required for this query - Microsoft Sentinel Incidents (generated automatically if you create incidents in Sentinel)\n\nSecurityIncident\n| summarize arg_min(TimeGenerated, *) by IncidentNumber\n| make-series TotalIncidents=count() default=0 on TimeGenerated in range(ago(90d), now(), 1d)\n| extend (RSquare, SplitIdx, Variance, RVariance, TrendLine)=series_fit_2lines(TotalIncidents)\n| project TimeGenerated, TotalIncidents, TrendLine\n| render timechart with (title=\"Microsoft Sentinel incidents over time with trend\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityIncident-VisualizeIncidentswithTrend",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "24e548c6-6911-4a23-8697-aec05ede9b82",
        "query_hash": "1d4af1d421885e7d104fa51cfdd81208babfac37f84f08cdc8a8f5b17c831bf7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20Sentinel%20Incidents%5CSecurityIncident-VisualizeMitreAtt%26ck.kql",
        "query": "//Visualize the incidents generated in Microsoft Sentinel by MITRE ATT&CK tactics\n\n//Data connector required for this query - Microsoft Sentinel Incidents (generated automatically if you create incidents in Sentinel)\n\nSecurityIncident\n| where TimeGenerated > ago(30d)\n| summarize arg_min(TimeGenerated, *) by IncidentNumber\n| extend Tactics = tostring(AdditionalData.tactics)\n| where Tactics != \"[]\"\n| mv-expand todynamic(Tactics)\n| summarize Count=count()by tostring(Tactics)\n| sort by Count\n| render barchart with (title=\"Microsoft Sentinel incidents by MITRE ATT&CK tactic\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityIncident-VisualizeMitreAtt&ck",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8a90782a-baa8-42a8-a34b-ed945796e7d0",
        "query_hash": "61f1af0827ea55d8d126d26cb62e05f5b6da2162afffb24d9f77c96e42077c26",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CData%20Management%5C365-Visualize365DaysofKql.kql",
        "query": "//Visualize the breakdown of 365 days of KQL\nexternaldata(Category: string, Count: int)\n[\nh@'https://gist.githubusercontent.com/reprise99/12487ffefee2c2c417e2706150e25b8e/raw/0679cbb29e43e370c7304bb9b3d0007042a8ad52/365daysofkql.csv'\n] | sort by Count desc | render piechart \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "365-Visualize365DaysofKql",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a9873aa5-b322-4909-b806-842c85a6499a",
        "query_hash": "525c52d77439c88f9567f34f0dcb98a94dca4fe763a7ce2fec39f9aabc2e9022",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CData%20Management%5CData-CalculatePercentageperTable.kql",
        "query": "//Calculate the percentage that each table in your Sentinel workspace is contributing to total ingestion for billable data\n\n//Data connector required for this query - Usage (generated automatically on a log analytics workspace)\n\nUsage\n| where TimeGenerated > ago(30d)\n| where IsBillable = true\n| summarize ['Table size in GB']=sum(Quantity / 1024) by DataType\n| as T\n| extend Percentage = round(100.0 * ['Table size in GB'] / toscalar (T\n    | summarize sum(['Table size in GB'])), 2)\n| project-reorder DataType, ['Table size in GB'], Percentage\n| sort by Percentage desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Data-CalculatePercentageperTable",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "85f42a2b-62aa-4bbc-a6c6-dcccc2041ed3",
        "query_hash": "1d00b4a533d39aac3d829d71a8df836a0731776e6022953c6ae2d1d355cdf82d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CData%20Management%5CData-CalculateTableSizeChanges.kql",
        "query": "//Calculate the change in size of all your tables from last week to this week\n\n//Data connector required for this query - query will automatically union any data you have\n\nlet lastweek=\nunion withsource=_TableName *\n| where TimeGenerated > ago(14d) and TimeGenerated < ago(7d)\n| summarize\n    Entries = count(), Size = sum(_BilledSize) by Type\n| project ['Table Name'] = Type, ['Last Week Table Size'] = Size, ['Last Week Table Entries'] = Entries, ['Last Week Size per Entry'] = 1.0 * Size / Entries\n| order by ['Table Name']  desc;\nlet thisweek=\nunion withsource=_TableName *\n| where TimeGenerated > ago(7d)\n| summarize\n    Entries = count(), Size = sum(_BilledSize) by Type\n| project ['Table Name'] = Type, ['This Week Table Size'] = Size, ['This Week Table Entries'] = Entries, ['This Week Size per Entry'] = 1.0 * Size / Entries\n| order by ['Table Name']  desc;\nlastweek\n| join kind=inner thisweek on ['Table Name']\n| extend PercentageChange=todouble(['This Week Table Size']) * 100 / todouble(['Last Week Table Size'])\n| project ['Table Name'], ['Last Week Table Size'], ['This Week Table Size'], PercentageChange\n| sort by PercentageChange desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Data-CalculateTableSizeChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a9e3e9ba-382d-46c5-9ad0-49069402192d",
        "query_hash": "1dc5bfbf9d701cddc07d2bdb51c48ea3492060c9c6ae78883adfe73ed64c2072",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CData%20Management%5CData-DetectAnomalousDataIngestion.kql",
        "query": "//Detect anomalies in the amount of data being ingested into your Sentinel workspace\n\n//Data connector required for this query - Usage (generated automatically on a log analytics workspace)\n\n//Sensitivity = the lower the number the more sensitive the anomaly detection is, i.e it will find more anomalies, default is 1.5\nlet sensitivity = 1.5;\n//Threshold = set a threshold to account for low volume anomailies, i.e moving from 1 GB of data to 2 GB. This example uses tables larger than 2 GB every 3 hours as a threshold\nlet threshold = 2;\n//First find the anomalies by creating a series of all the data ingestion and using series_decompose_anomalies\nlet outliers=\nUsage\n| where IsBillable = true\n| make-series TableSize=sum(Quantity / 1024) default=0 on TimeGenerated from ago(7d) to now() step 3h by DataType\n| extend outliers=series_decompose_anomalies(TableSize, sensitivity)\n| mv-expand TimeGenerated, TableSize, outliers\n| where outliers == 1 and TableSize > threshold\n//Optionally visualize the anomalies - remove everything below this line to just retrieve the data instead of visualizing\n| distinct DataType;\nUsage\n| where IsBillable = true\n| where DataType in (outliers)\n| make-series TableSize=sum(Quantity / 1024) default=0 on TimeGenerated from ago(7d) to now() step 3h by DataType\n| render timechart with (ytitle=\"Table Size\",title=\"Anomalous data ingestion\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Data-DetectAnomalousDataIngestion",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8ac68b3e-76fc-439d-a899-c15db256877f",
        "query_hash": "1ee04d0a68ca5c9fd33c3e8c3ddcf9bc7735db0415e70c833d482b04b8233706",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CData%20Management%5CData-NewTablesFound.kql",
        "query": "//Detect when new tables have been written to in the last week compared to the last 90 days\n\n//Data connector required for this query - query will automatically union any data you have\n\nlet existingtables=\n    union withsource=_TableName *\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago(7d)\n    | distinct Type;\nlet newtables=\n    union withsource=_TableName *\n    | where TimeGenerated > ago(7d)\n    | summarize ['First Log Received'] = min(TimeGenerated) by Type\n    | project Type, ['First Log Received'];\nexistingtables\n| join kind=rightanti newtables on Type",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Data-NewTablesFound",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5c26b999-ee00-4c82-83d6-c4fbb3e75924",
        "query_hash": "cbe612165b40ae3bfab58717faf9b35243c46593cbb7384f6cc2c07b480ead03",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CData%20Management%5CData-TableSizePerMDEDevice.kql",
        "query": "//Calculate the size of the combined Device* tables from Defender for Endpoint by device name\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nunion withsource=_TableName Device*\n| where TimeGenerated > ago(7d)\n| summarize\n    Entries = count(), Size = sum(_BilledSize)\n    by DeviceName\n| project\n    ['Device Name'] = DeviceName,\n    ['Table Size'] = Size,\n    ['Table Entries'] = Entries,\n    ['Size per Entry'] = 1.0 * Size / Entries\n| order by ['Table Size']  desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Data-TableSizePerMDEDevice",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d093bb6b-6805-4c28-b065-818e2646f064",
        "query_hash": "95a81595ccf106c1bb8e7406c80a6fc95ec9bfb132cc088fbf4c8a462eeb9789",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-DetectAdminGrantingOwnAccesstoMailbox.kql",
        "query": "//Detect when one of your Exchange admins grants themselves access to another users mailbox\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nCloudAppEvents\n| extend Operation= tostring(RawEventData.Operation)\n| where Operation == \"Add-MailboxPermission\"\n| extend TargetMailbox = tostring(parse_json(tostring(RawEventData.Parameters))[2].Value)\n| extend UserAdded = tostring(parse_json(tostring(RawEventData.Parameters))[3].Value)\n| extend AccessGranted = tostring(parse_json(tostring(RawEventData.Parameters))[4].Value)\n| extend Actor = tostring(RawEventData.UserId)\n| where Actor =~ UserAdded \n| project TimeGenerated, Actor, TargetMailbox, UserAdded, AccessGranted\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nCloudAppEvents\n| extend Operation= tostring(RawEventData.Operation)\n| where Operation == \"Add-MailboxPermission\"\n| extend TargetMailbox = tostring(parse_json(tostring(RawEventData.Parameters))[2].Value)\n| extend UserAdded = tostring(parse_json(tostring(RawEventData.Parameters))[3].Value)\n| extend AccessGranted = tostring(parse_json(tostring(RawEventData.Parameters))[4].Value)\n| extend Actor = tostring(RawEventData.UserId)\n| where Actor =~ UserAdded \n| project Timestamp, Actor, TargetMailbox, UserAdded, AccessGranted",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-DetectAdminGrantingOwnAccesstoMailbox",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3ee55182-e928-4d79-b783-94e40a0bbe6f",
        "query_hash": "9568ed655a7c3ce4960c2fd0db38ab61d7db5f9b5e812bf5969ac8b1332035b2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-DetectMailboxForward.kql",
        "query": "//Use the Defender for Cloud Apps logs to detect when a mail forward is created on a mailbox (not an individual mailbox rule). Retrieve the address the mail was forwarded to and whether is both stored and forwarded\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nCloudAppEvents\n| where ActionType == \"Set-Mailbox\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend ForwardingSetting = tostring(parse_json(tostring(RawEventData.Parameters))[1].Name)\n| extend ForwardingAddress = tostring(parse_json(tostring(RawEventData.Parameters))[1].Value)\n| extend StoreandForward = tostring(parse_json(tostring(RawEventData.Parameters))[2].Name)\n| extend ['Email Stored and Forwarded'] = tostring(parse_json(tostring(RawEventData.Parameters))[2].Value)\n| where ForwardingSetting == \"ForwardingSmtpAddress\" and isnotempty(ForwardingAddress)\n| extend ['Forwarding Email Address']=split(ForwardingAddress, \":\")[-1]\n| project-away ForwardingSetting, StoreandForward\n| project\n    TimeGenerated,\n    UserId,\n    IPAddress, \n    ['Forwarding Email Address'], \n    ['Email Stored and Forwarded']\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nCloudAppEvents\n| where ActionType == \"Set-Mailbox\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend ForwardingSetting = tostring(parse_json(tostring(RawEventData.Parameters))[1].Name)\n| extend ForwardingAddress = tostring(parse_json(tostring(RawEventData.Parameters))[1].Value)\n| extend StoreandForward = tostring(parse_json(tostring(RawEventData.Parameters))[2].Name)\n| extend ['Email Stored and Forwarded'] = tostring(parse_json(tostring(RawEventData.Parameters))[2].Value)\n| where ForwardingSetting == \"ForwardingSmtpAddress\" and isnotempty(ForwardingAddress)\n| extend ['Forwarding Email Address']=split(ForwardingAddress, \":\")[-1]\n| project-away ForwardingSetting, StoreandForward\n| project\n    Timestamp,\n    UserId,\n    IPAddress, \n    ['Forwarding Email Address'], \n    ['Email Stored and Forwarded']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-DetectMailboxForward",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2bca7734-9a8d-46fe-a280-af3c3d810698",
        "query_hash": "3cb097ebe775bdc37db6a3ac12c0a7e23726a4ed6d84d4fe3a0520b5d4fc07d9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-ExchangeOnlineEventsduringRiskySignin.kql",
        "query": "//Create a pivot table of all actions taken during a risky sign in\n\n//Data connector required for this query - Advanced Hunting license\n\n//First find the SessionId of any medium or high risk sign ins (where risk level is 50 or 100)\n//Advanced Hunting query, this query doesn't work in Sentinel because SessionId isn't sent over currently\nlet riskysignins=\n    AADSignInEventsBeta\n    | where Timestamp > ago(7d)\n    | where RiskLevelDuringSignIn in (50, 100)\n    | distinct SessionId;\nCloudAppEvents\n| where Timestamp > ago(7d)\n| extend RawEventData = parse_json(RawEventData)\n| extend SessionId = RawEventData.SessionId\n| where isnotempty(SessionId)\n//Match on the risky sign in SessionId from above\n| where SessionId in (riskysignins)\n| extend Activity = strcat(Application, \" - \", ActionType)\n//Create pivot table of all actions by each user\n| evaluate pivot(Activity, count(), AccountDisplayName)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-ExchangeOnlineEventsduringRiskySignin",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2d587869-d662-42be-90d1-57db3c3a32b6",
        "query_hash": "8b2c8e7cb77d4685599a8a656cc7eee71d43097c51bae02379be8af072a0090b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-FindNewEvents.kql",
        "query": "//Find new events in Defender for Cloud Apps seen in the last week vs the previously 90 days\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\n//First find all the activities from the last 90 days prior to this week\nlet knownactivities=\n    CloudAppEvents\n    | where TimeGenerated > ago(90d) and TimeGenerated < ago (7d)\n    | extend Operation = tostring(RawEventData.Operation)\n    | extend UserId = tostring(RawEventData.UserId)\n    | extend Workload = tostring(RawEventData.Workload)\n    //Create a new column that adds workload and operation together to make the events more readable\n    | extend Activity = strcat(Workload, \" - \", Operation)\n    | distinct Activity;\n//Find activities from the last week\nCloudAppEvents\n| where TimeGenerated > ago(7d)\n| extend Operation = tostring(RawEventData.Operation)\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n//Create a new column that adds workload and operation together to make the events more readable\n| extend Activity = strcat(Workload, \" - \", Operation)\n//Exclude activities we have already seen\n| where Activity !in (knownactivities)\n//Find the time the new activity was first seen and how many counts seen this week\n| summarize ['First Time Seen']=min(TimeGenerated), Count=count() by Activity\n| sort by Count desc \n\n\n//Advanced Hunting query, only 30 days of data is retained in Advanced Hunting so we can instead look at events new in the last 3 compared to the prior 30, but you can change the times around if needed\n\n//Data connector required for this query - Advanced Hunting license\n\n//First find all the activities from the last 30 days prior to this week\nlet knownactivities=\n    CloudAppEvents\n    | where Timestamp > ago(30d) and Timestamp < ago (3d)\n    | extend Operation = tostring(RawEventData.Operation)\n    | extend UserId = tostring(RawEventData.UserId)\n    | extend Workload = tostring(RawEventData.Workload)\n    //Create a new column that adds workload and operation together to make the events more readable\n    | extend Activity = strcat(Workload, \" - \", Operation)\n    | distinct Activity;\n//Find activities from the last week\nCloudAppEvents\n| where Timestamp > ago(3d)\n| extend Operation = tostring(RawEventData.Operation)\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n//Create a new column that adds workload and operation together to make the events more readable\n| extend Activity = strcat(Workload, \" - \", Operation)\n//Exclude activities we have already seen\n| where Activity !in (knownactivities)\n//Find the time the new activity was first seen and how many counts seen this week\n| summarize ['First Time Seen']=min(Timestamp), Count=count() by Activity\n| sort by Count desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-FindNewEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9ffb0d68-eccd-472a-ac5f-22a2f4eb86d7",
        "query_hash": "b1425c670bd93cc2567ad5861b1b20090cbb376c67f6ce089afb5c6bf47f781e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-FindUserSubmittedPhishingSpam.kql",
        "query": "//Find emails that have been reported by your users as spam/phishing that have been rescanned and found to be genuine spam or phishing\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nCloudAppEvents\n| where ActionType == \"UserSubmission\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend RescanVerdict = tostring(parse_json(tostring(RawEventData.RescanResult)).RescanVerdict)\n| extend RescanTimeTimestamp = tostring(parse_json(tostring(RawEventData.RescanResult)).Timestamp)\n| extend Subject = tostring(RawEventData.Subject)\n| extend P1Sender = tostring(RawEventData.P1Sender)\n| extend P2Sender = tostring(RawEventData.P2Sender)\n| where RescanVerdict != \"NotSpam\"\n| project\n    TimeGenerated,\n    UserId,\n    P1Sender,\n    P2Sender,\n    Subject,\n    RescanVerdict,\n    RescanTimeTimestamp\n\n//Data connector required for this query - Advanced Hunting license\n\n//Advanced Hunting query\nCloudAppEvents\n| where ActionType == \"UserSubmission\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend RescanVerdict = tostring(parse_json(tostring(RawEventData.RescanResult)).RescanVerdict)\n| extend RescanTimeTimestamp = tostring(parse_json(tostring(RawEventData.RescanResult)).Timestamp)\n| extend Subject = tostring(RawEventData.Subject)\n| extend P1Sender = tostring(RawEventData.P1Sender)\n| extend P2Sender = tostring(RawEventData.P2Sender)\n| where RescanVerdict != \"NotSpam\"\n| project\n    Timestamp,\n    UserId,\n    P1Sender,\n    P2Sender,\n    Subject,\n    RescanVerdict,\n    RescanTimeTimestamp\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-FindUserSubmittedPhishingSpam",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "619267f6-8674-42cd-a9cc-37cab2bf5ece",
        "query_hash": "731dc4cd2a89b6168e33117416db7ee07ed02bf32361fd9d6df4b806953dc2a7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-FormPhishingStatusChanged.kql",
        "query": "//Alert when the phishing status of a Microsoft Form is changed, this could be a sign one of your accounts has been compromised and being used to host malicious Forms\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nCloudAppEvents\n| where TimeGenerated > ago (7d)\n| extend Operation = tostring(RawEventData.Operation)\n| where Operation == \"UpdatePhishingStatus\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n| extend FormStatus = tostring(parse_json(tostring(RawEventData.ActivityParameters)).FormPhishingStatus)\n| extend FormId = tostring(RawEventData.FormId)\n| extend FormName = tostring(RawEventData.FormName)\n| where FormStatus == \"Auto Blocked\"\n| project TimeGenerated, Operation, UserId, FormStatus, FormName, FormId\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nCloudAppEvents\n| where Timestamp > ago (7d)\n| extend Operation = tostring(RawEventData.Operation)\n| where Operation == \"UpdatePhishingStatus\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n| extend FormStatus = tostring(parse_json(tostring(RawEventData.ActivityParameters)).FormPhishingStatus)\n| extend FormId = tostring(RawEventData.FormId)\n| extend FormName = tostring(RawEventData.FormName)\n| where FormStatus == \"Auto Blocked\"\n| project Timestamp, Operation, UserId, FormStatus, FormName, FormId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-FormPhishingStatusChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "36ee5041-d4c7-4e73-a80e-e81ef26a0590",
        "query_hash": "670f99363848eb7b65811fbc5280885d14438bb22e4aa6037b5eecb25caa5d81",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-PaidTrialStarted.kql",
        "query": "//Alert when a user starts a paid trial of a M365 product\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\nCloudAppEvents\n| extend Operation = tostring(RawEventData.Operation)\n| where Operation == \"StartAPaidTrial\"\n| extend UserId = tostring(RawEventData.UserId)\n| extend LicenseDisplayName = tostring(RawEventData.LicenseDisplayName)\n| extend Workload = tostring(RawEventData.Workload)\n| project TimeGenerated, Operation, UserId, LicenseDisplayName, Workload",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-PaidTrialStarted",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "726f31f2-d9fa-4fc8-801f-becfc8a58e21",
        "query_hash": "7448f2daa85e6d7835e76562fcdec840a274f39c5e542b5ea5c5a490721a5b47",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-PivotTableAdminActions.kql",
        "query": "//Create a pivot table of all actions in Defender for Cloud Apps by your privileged users over the last 7 days\n//Lookup the IdentityInfo table for any users holding a privileged role\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nlet privusers=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    //Add any roles that you are interested in auditing\n    | where AssignedRoles has_any (\"Global Administrator\", \"Security Administrator\", \"SharePoint Administrator\")\n    | distinct AccountUPN;\nCloudAppEvents\n| where TimeGenerated > ago(7d)\n| extend Operation = tostring(RawEventData.Operation)\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n//Create a new column that adds workload and operation together to make the events more readable\n| extend Activity = strcat(Workload, \" - \", Operation)\n| where UserId in~ (privusers)\n//Create pivot table of all actions by each user\n| evaluate pivot(Activity, count(), UserId)\n\n//Advanced hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nCloudAppEvents\n| where Timestamp > ago(7d)\n| extend Operation = tostring(RawEventData.Operation)\n| extend UserId = tostring(RawEventData.UserId)\n| extend Workload = tostring(RawEventData.Workload)\n//Advanced hunting doesn't retain role information about users, but you can add a list of users in manually to create a table\n| where UserId in~ (\"admin1@domain.com\", \"admin2@domain.com\")\n//Create a new column that adds workload and operation together to make the events more readable\n| extend Activity = strcat(Workload, \" - \", Operation)\n//Create pivot table of all actions by each user\n| evaluate pivot(Activity, count(), UserId)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-PivotTableAdminActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e0ebd9f6-aab9-4928-b34f-5c8d089b715f",
        "query_hash": "d8eb17f554e939949114f13fb911adb86178861b2a775f952afd9e72b1b6a35b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-PivotTableAdminOperations.kql",
        "query": "//Defender for Cloud Apps tracks administrative actions under the 'isAdminOperation' flag. This query will build a pivot table of all admin operations completed by your users\n//Works in both Sentinel and Advanced Hunting\n\n//Data connector required for this query - Advanced Hunting license or M365 Defender - CloudAppEvents for Sentinel\n\nCloudAppEvents\n| where IsAdminOperation == \"true\"\n| where AccountType == \"Regular\"\n| extend UserPrincipalName = tostring(RawEventData.UserId)\n| evaluate pivot(ActionType, count(), UserPrincipalName)\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-PivotTableAdminOperations",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "62010aaa-4891-499d-83ac-322dfb6a0846",
        "query_hash": "e692801348478bd927cfa195d6f3cae2e8807b97af281abc212782c802ecdb54",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-PotentialConsentPhishing.kql",
        "query": "//Detect when a user flags a risky sign in within 8 hours of installing a service principal, could be a sign of OAuth consent phishing. This example uses 8 hours between events.\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query. This query could also use Azure AD audit logs as a trigger but this example uses Defender for Cloud App logs.\nlet threshold=8;\nCloudAppEvents\n| where ActionType == \"Add service principal.\"\n| where AccountType == \"Regular\"\n| extend UserId = tostring(RawEventData.UserId)\n| project\n    ['Service Principal Install Time']=TimeGenerated,\n    UserId,\n    ['Service Principal Name']=ObjectName\n| join kind=inner (\n    AADUserRiskEvents\n    | where DetectionTimingType == \"realtime\"\n    | where RiskDetail !in (\"aiConfirmedSigninSafe\", \"userPerformedSecuredPasswordReset\")\n    | project\n        ['Risk Event Time']=TimeGenerated,\n        UserId=UserPrincipalName,\n        ['Risk Event IP']=IpAddress\n    )\n    on UserId\n| extend ['Minutes Between Events']=datetime_diff(\"hour\", ['Service Principal Install Time'], ['Risk Event Time'])\n| where ['Minutes Between Events'] < threshold\n| project\n    UserId,\n    ['Risk Event Time'],\n    ['Service Principal Install Time'],\n    ['Minutes Between Events'],\n    ['Risk Event IP'],\n    ['Service Principal Name']\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nlet threshold=8;\nCloudAppEvents\n| where ActionType == \"Add service principal.\"\n| where AccountType == \"Regular\"\n| extend UserId = tostring(RawEventData.UserId)\n| project\n    ['Service Principal Install Time']=Timestamp,\n    UserId,\n    ['Service Principal Name']=ObjectName\n| join kind=inner (\n    AADSignInEventsBeta\n    | where RiskLevelDuringSignIn in (50, 100)\n    | project ['Risk Event Time']=Timestamp, UserId=AccountUpn, ['Risk Event IP']=IPAddress\n    )\n    on UserId\n| extend ['Minutes Between Events']=datetime_diff(\"hour\", ['Service Principal Install Time'], ['Risk Event Time'])\n| where ['Minutes Between Events'] < threshold\n| project\n    UserId,\n    ['Risk Event Time'],\n    ['Service Principal Install Time'],\n    ['Minutes Between Events'],\n    ['Risk Event IP'],\n    ['Service Principal Name']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-PotentialConsentPhishing",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0628f14b-8688-4c88-a650-884fbfacc057",
        "query_hash": "d511c7d6e6723ffdffc11cff4a374b020b006f20426e0c0af756349bffc8a4e1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-RiskEventFollowedbyEmailForward.kql",
        "query": "//Alert when a user triggers an Azure AD risk event followed closely by a mail forward being configured on their mailbox\n\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Choose a threshold of the time between events you want to alert one, this example uses 240 minutes between risky event and mail forward creation\nlet threshold=240;\n//First find any real time risk events in Azure AD\nAADUserRiskEvents\n| where TimeGenerated > ago (7d)\n| where DetectionTimingType == \"realtime\"\n| where RiskDetail <> \"aiConfirmedSigninSafe\"\n| project RiskTime=TimeGenerated, UserPrincipalName, RiskEventType, RiskyIP=IpAddress\n| join kind=inner (\n//Join to Defender for Cloud App events looking for email forward creation events\n    CloudAppEvents\n    | where TimeGenerated > ago (7d)\n    | where ActionType == \"Set-Mailbox\"\n    | extend UserId = tostring(RawEventData.UserId)\n    | extend ForwardingSetting = tostring(parse_json(tostring(RawEventData.Parameters))[1].Name)\n    | extend ForwardingAddress = tostring(parse_json(tostring(RawEventData.Parameters))[1].Value)\n    | extend StoreandForward = tostring(parse_json(tostring(RawEventData.Parameters))[2].Name)\n    | extend ['Email Stored and Forwarded'] = tostring(parse_json(tostring(RawEventData.Parameters))[2].Value)\n    | where ForwardingSetting == \"ForwardingSmtpAddress\" and isnotempty(ForwardingAddress)\n    | extend ['Forwarding Email Address']=split(ForwardingAddress, \":\")[-1]\n    | project-away ForwardingSetting, StoreandForward\n    | project\n        MailForwardTime=TimeGenerated,\n        UserId,\n        MailForwardIP=IPAddress, ['Forwarding Email Address'], ['Email Stored and Forwarded']\n    ) \n    on $left.UserPrincipalName == $right.UserId\n//Calculate the time between the two events and alert when less than the threshold\n| extend ['Minutes Between Events']=datetime_diff(\"minute\", MailForwardTime, RiskTime)\n| where ['Minutes Between Events'] < threshold\n| project-away UserId\n| project-reorder\n    UserPrincipalName,\n    RiskTime,\n    MailForwardTime,\n    ['Minutes Between Events'],\n    ['Forwarding Email Address'],\n    ['Email Stored and Forwarded'],\n    RiskyIP,\n    MailForwardIP,\n    RiskEventType",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-RiskEventFollowedbyEmailForward",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c763a74b-b867-42a7-8d34-4febb4f7dd15",
        "query_hash": "c97c653cbad5326926f8e299d0dae1407a73c6622db508bb84671225434f06b4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-RiskEventFollowedbyMailboxRuleChanges.kql",
        "query": "//Alert when a user flags an Azure AD risk event followed by creating or updating inbox rules within a short time frame\n\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//In this example it will detect when the two events are less than 120 minutes apart\nAADUserRiskEvents\n| where TimeGenerated > ago (1d)\n| where DetectionTimingType == \"realtime\"\n| where RiskDetail <> \"aiConfirmedSigninSafe\"\n| project RiskTime=TimeGenerated, UserPrincipalName, RiskEventType, RiskyIP=IpAddress\n| join kind=inner (\n    CloudAppEvents\n    | where TimeGenerated > ago (1d)\n    | extend Operation = tostring(RawEventData.Operation)\n    | where Operation in (\"New-InboxRule\", \"Set-InboxRule\")\n    | extend UserId = tostring(RawEventData.UserId)\n    | project RuleTime=TimeGenerated, UserId, MailForwardIP=IPAddress, ActivityObjects\n    )\n    on $left.UserPrincipalName == $right.UserId\n| extend ['Minutes Between Events']=datetime_diff(\"minute\", RuleTime, RiskTime)\n| where ['Minutes Between Events'] < 120\n| project-away UserId\n| project-reorder\n    UserPrincipalName,\n    RiskTime,\n    RuleTime,\n    ['Minutes Between Events'],\n    RiskyIP,\n    MailForwardIP,\n    RiskEventType,\n    ActivityObjects",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-RiskEventFollowedbyMailboxRuleChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "88aaff03-ce2d-495a-bc53-e1ce3074458a",
        "query_hash": "c4e60779bb4b440e108a0bb5e4fdf1a83f4f7939429b1e746e89e66d8fb4a932",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Cloud%20Apps%5CDCA-TeamsAppInstalled.kql",
        "query": "//Find when an app is installed into Teams using the Defender for Cloud App logs\n\n//Data connector required for this query - M365 Defender - CloudAppEvents\n\n//Microsoft Sentinel query\nCloudAppEvents\n| where Application == \"Microsoft Teams\"\n| where ActionType == \"AppInstalled\"\n| extend AppDistributionMode = tostring(RawEventData.AppDistributionMode)\n| extend AzureADAppId = tostring(RawEventData.AzureADAppId)\n| extend UserId = tostring(RawEventData.UserId)\n| extend AppName = tostring(RawEventData.AddOnName)\n| project TimeGenerated, AppName, AzureADAppId, UserId, AppDistributionMode\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nCloudAppEvents\n| where Application == \"Microsoft Teams\"\n| where ActionType == \"AppInstalled\"\n| extend AppDistributionMode = tostring(RawEventData.AppDistributionMode)\n| extend AzureADAppId = tostring(RawEventData.AzureADAppId)\n| extend UserId = tostring(RawEventData.UserId)\n| extend AppName = tostring(RawEventData.AddOnName)\n| project Timestamp, AppName, AzureADAppId, UserId, AppDistributionMode",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DCA-TeamsAppInstalled",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "042bf877-ced4-4efd-94fe-f0ac5009b835",
        "query_hash": "a7351c9a9659f23d3585a7d005f513bab24fb36b951aac4e369c0d4bbec3ed72",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CAnamoly-USBFileCopiesfromUserswithAnamolousDownloads.kql",
        "query": "//Searches OfficeActivity table for anomalies in download actions and then retrives all USB file copy events by those users over the last week\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Office 365\n\nlet starttime = 7d;\nlet timeframe = 30m;\nlet operations = dynamic([\"FileSyncDownloadedFull\", \"FileDownloaded\"]);\nlet outlierusers=\n    OfficeActivity\n    | where TimeGenerated > ago(starttime)\n    | where Operation in (['operations'])\n    | extend UserPrincipalName = UserId\n    | project TimeGenerated, UserPrincipalName\n    | order by TimeGenerated\n    | summarize Events=count()by UserPrincipalName, bin(TimeGenerated, timeframe)\n    | summarize EventCount=make_list(Events), TimeGenerated=make_list(TimeGenerated) by UserPrincipalName\n    | extend outliers=series_decompose_anomalies(EventCount, 3)\n    | mv-expand TimeGenerated, EventCount, outliers\n    | where outliers == 1\n    | distinct UserPrincipalName;\nlet id=\n    IdentityInfo\n    | where AccountUPN in (outlierusers)\n    | where TimeGenerated > ago (21d)\n    | summarize arg_max(TimeGenerated, *) by AccountName\n    | extend LoggedOnUser = AccountName\n    | project LoggedOnUser, AccountUPN, JobTitle, EmployeeId, Country, City\n    | join kind=inner \n        (\n        DeviceInfo\n        | where TimeGenerated > ago (21d)\n        | summarize arg_max(TimeGenerated, *) by DeviceName\n        | extend LoggedOnUser = tostring(LoggedOnUsers[0].UserName)\n        )\n        on LoggedOnUser\n    | project LoggedOnUser, AccountUPN, JobTitle, Country, DeviceName, EmployeeId;\nDeviceEvents\n| where TimeGenerated > ago(7d)\n| join kind=inner id on DeviceName\n| where ActionType == \"UsbDriveMounted\"\n| extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n| join kind=inner (DeviceFileEvents\n    | where TimeGenerated > ago(7d)\n    | extend FileCopyTime = TimeGenerated\n    | where ActionType == \"FileCreated\"\n    | parse FolderPath with DriveLetter '\\\\' *\n    | extend DriveLetter = tostring(DriveLetter)\n    )\n    on DeviceId, DriveLetter\n| extend FileCopied = FileName1\n| distinct\n    DeviceName,\n    DriveLetter,\n    FileCopied,\n    LoggedOnUser,\n    AccountUPN,\n    JobTitle,\n    EmployeeId,\n    Country",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Anamoly-USBFileCopiesfromUserswithAnamolousDownloads",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ff5f0d2e-8329-45f4-a861-fc03b30a024b",
        "query_hash": "65eb7fb11a3ec99df22f0e1aeeabc16d9b92e0e39b778bc9a779464b7cb13903",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-AccountswithMostLocalAdmin.kql",
        "query": "//Find which of your accounts have logged onto the most devices with local admin credentials. These accounts are potential targets for lateral movement and privilege escalation\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceLogonEvents\n| where TimeGenerated > ago(30d)\n| project DeviceName, ActionType, LogonType, AdditionalFields, InitiatingProcessCommandLine, AccountName, IsLocalAdmin\n| where ActionType == \"LogonSuccess\"\n| where LogonType == \"Interactive\"\n| where AdditionalFields.IsLocalLogon == true\n| where InitiatingProcessCommandLine == \"lsass.exe\"\n| summarize\n    ['Local Admin Count']=dcountif(DeviceName,IsLocalAdmin == \"true\"),\n    ['Local Admins']=make_set_if(DeviceName, IsLocalAdmin == \"true\")\n    by AccountName\n| sort by ['Local Admin Count'] desc  \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceLogonEvents\n| where Timestamp > ago(30d)\n| project DeviceName, ActionType, LogonType, AdditionalFields, InitiatingProcessCommandLine, AccountName, IsLocalAdmin\n| where ActionType == \"LogonSuccess\"\n| where LogonType == \"Interactive\"\n| where IsLocalAdmin == true\n| where InitiatingProcessCommandLine == \"lsass.exe\"\n| summarize\n    ['Local Admin Count']=dcountif(DeviceName,IsLocalAdmin == \"true\"),\n    ['Local Admins']=make_set_if(DeviceName, IsLocalAdmin == \"true\")\n    by AccountName\n| sort by ['Local Admin Count'] desc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-AccountswithMostLocalAdmin",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3244e80f-c27a-4335-85ae-133e18ab71af",
        "query_hash": "893138bde2665d8ae5e4ffd03d5b287a90c2fd6f2601bc1758cc9420048ab70d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-ASRAudit.kql",
        "query": "//Summarize attack surface reduction audit hits for each device\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where TimeGenerated > ago (1d)\n| where ActionType startswith \"Asr\"\n| extend isAudit = tostring(AdditionalFields.IsAudit)\n| where isAudit = true\n| project\n    TimeGenerated,\n    ActionType,\n    DeviceName,\n    FileName,\n    InitiatingProcessAccountDomain,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    InitiatingProcessParentFileName,\n    ProcessTokenElevation\n| summarize\n    ['Total ASR audit hits']=count(),\n    ['Distinct ASR audit rule hits']=dcount(ActionType),\n    ['List of processes']=make_set(InitiatingProcessCommandLine)\n    by DeviceName\n| sort by ['Total ASR audit hits'] desc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ASRAudit",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cd16b0d7-0563-4c68-8dbe-b433dddd618e",
        "query_hash": "b05dcf8f23dd810ad2cadf98f4f32867490ed7390320f31a32b4dfdd79401c65",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-ASRLsassAudit.kql",
        "query": "//Summarize which processes are triggering Lsass credential theft audit alerts in your attack surface reduction rules\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Summarize each device by which processes are triggering the audit alert\nDeviceEvents\n| where TimeGenerated > ago (7d)\n| where ActionType == \"AsrLsassCredentialTheftAudited\"\n| extend isAudit = tostring(AdditionalFields.IsAudit)\n| where isAudit = true\n| summarize LsassAudit=make_set(InitiatingProcessCommandLine) by DeviceName\n| extend ['Count of Processes']=array_length(LsassAudit)\n| sort by ['Count of Processes'] desc \n\n//Change the query to summarize each process by which devices are triggering the audit alert\nDeviceEvents\n| where TimeGenerated > ago (7d)\n| where ActionType == \"AsrLsassCredentialTheftAudited\"\n| extend isAudit = tostring(AdditionalFields.IsAudit)\n| where isAudit = true\n| summarize LsassAudit=make_set(DeviceName) by InitiatingProcessCommandLine\n| extend ['Count of Devices']=array_length(LsassAudit)\n| sort by ['Count of Devices'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ASRLsassAudit",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3a4633a7-27ca-4837-8674-1c73f5d6d777",
        "query_hash": "145b33f942f34c49ad97424833fcf6567100a1dc8ecc5681a9ebf8cefa682276",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-ASROfficeChildProcessAudit.kql",
        "query": "//Detects when you have audit hits on the \"Block all Office applications from creating child processes\" ASR rule. \n//For instance if you want to audit the impact for the MSDT vulnerability - https://msrc-blog.microsoft.com/2022/05/30/guidance-for-cve-2022-30190-microsoft-support-diagnostic-tool-vulnerability/\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType == \"AsrOfficeChildProcessAudited\"\n| where AdditionalFields.IsAudit == true\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    FileName,\n    ProcessCommandLine,\n    InitiatingProcessFileName\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago (30d)\n| where ActionType == \"AsrOfficeChildProcessAudited\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessAccountName,\n    FileName,\n    ProcessCommandLine,\n    InitiatingProcessFileName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ASROfficeChildProcessAudit",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8f213f8b-8b9d-4f35-b523-966270022093",
        "query_hash": "6c3c0c82a3d61d4bd33ae24a62df3f845de16c2193815c2209791d3df4ba13ee",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-ASRSummary.kql",
        "query": "//Provides a summary of Attack Surface Reduction rules, which ASR rules are being hit and by which processes\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where TimeGenerated > ago(30d)\n| where ActionType startswith \"Asr\"\n| where isnotempty(InitiatingProcessCommandLine)\n| summarize ['ASR Hit Count']=count()by ActionType, InitiatingProcessCommandLine\n| sort by ['ASR Hit Count'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where TimeGenerated > ago(30d)\n| where ActionType startswith \"Asr\"\n| where isnotempty(InitiatingProcessCommandLine)\n| summarize ['ASR Hit Count']=count()by ActionType, InitiatingProcessCommandLine\n| sort by ['ASR Hit Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ASRSummary",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f6f1a1ec-6fce-4cfd-96ca-320b908be12e",
        "query_hash": "16a0190d03416d031ae276aa7e54fa15a6174e080ba84f74864902c640a95aea",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-CreateSetofLocalAdminsperDevice.kql",
        "query": "// Searches device info table for non server operating systems then return any users who have logged on interactively as an admin as a set per device. Can add exclusions for known IT admin accounts\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet devices=\n    DeviceInfo\n    | where TimeGenerated > ago(30d)\n    | where OSPlatform !contains \"Server\"\n    | summarize arg_max(TimeGenerated, *) by DeviceName\n    | project DeviceName;\nDeviceLogonEvents\n| where LogonType == \"Interactive\"\n| where IsLocalAdmin == true\n| join kind=inner devices on DeviceName\n| where AccountName !contains \"admin\"\n| summarize make_set(AccountName) by DeviceName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-CreateSetofLocalAdminsperDevice",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "932790ca-102d-4af0-8cb5-fb923a07023e",
        "query_hash": "5eb30870352a9dbf4d11d794932f12079e32f2f4284060400e63ec1d7bd2fb9a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectAnomalousRDPConnections.kql",
        "query": "//Visualizes potentially anomalous RDP connections from your devices.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Starttime and timeframe = how many days of data to look at to build your data set and in what grouping, i.e 30 days of data over 2 hour periods.\n//Threshold = the amount of total RDP connections required to be included in anomaly calculations. Reduces noise from low level anomalies, e.g going from 1 connection to 2.\n//Sensitivity = adjust to make the query more or less sensitive, the higher the value, the greater the anomaly required to be detected.\nlet starttime = 30d;\nlet timeframe = 2h;\nlet sensitivity = 3;\nlet threshold = 5;\nlet outlierdevices=\n    DeviceNetworkEvents\n    | where TimeGenerated > ago(starttime)\n    | where LocalIPType == \"Private\"\n    | where RemotePort == \"3389\"\n    // Exclude Defender for Identity which uses RDP to map your network\n    | where InitiatingProcessFileName <> \"Microsoft.Tri.Sensor.exe\"\n    | project TimeGenerated, DeviceName\n    | order by TimeGenerated\n    | summarize RDPEvents=count()by DeviceName, bin(TimeGenerated, timeframe)\n    | where RDPEvents > threshold\n    | summarize EventCount=make_list(RDPEvents), TimeGenerated=make_list(TimeGenerated) by DeviceName\n    | extend outliers=series_decompose_anomalies(EventCount, sensitivity)\n    | mv-expand TimeGenerated, EventCount, outliers\n    | where outliers == 1\n//Optionally visualize the anomalies, remove everything below this line to just retrieve the data\n    | distinct DeviceName;\nDeviceNetworkEvents\n| where TimeGenerated > ago(starttime)\n| where DeviceName in (outlierdevices)\n| where LocalIPType == \"Private\"\n| where RemotePort == \"3389\"\n| where InitiatingProcessFileName <> \"Microsoft.Tri.Sensor.exe\"\n| summarize RDPCount=count() by DeviceName, bin(TimeGenerated, timeframe)\n| render timechart",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectAnomalousRDPConnections",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b50e0819-c8fe-4c13-949b-7ddd10589580",
        "query_hash": "2e748216c5e50721e522cfb073e3a50e9ff908a0ee2c765927b38bc1f958a284",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectCertUtilConnectingExternally.kql",
        "query": "//Detects when certutil is used to connect to a public IP. This could indicate abuse of cert util, see - https://www.avira.com/en/blog/certutil-abused-by-attackers-to-spread-threats\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIPType,\n    LocalIP,\n    RemoteIPType,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort\n| where InitiatingProcessCommandLine contains \"certutil\"\n| where RemoteIPType == \"Public\"\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIPType,\n    LocalIP,\n    RemoteIPType,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort\n| where InitiatingProcessCommandLine contains \"certutil\"\n| where RemoteIPType == \"Public\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectCertUtilConnectingExternally",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4eb1a989-83d2-44a2-9f6c-f4dfb1f31ee6",
        "query_hash": "c76da23b26d172981b5d324232edae919c14585c8131640566ad5fa7cf6bcbfa",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectCredentialBackup.kql",
        "query": "//Detect when a backup is taken from Windows Credential manager\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where ActionType == \"CredentialsBackup\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    InitiatingProcessFileName,\n    InitiatingProcessFolderPath\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where ActionType == \"CredentialsBackup\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    InitiatingProcessFileName,\n    InitiatingProcessFolderPath",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectCredentialBackup",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "289b79ae-e33d-456a-8c14-cc5aa3747b3e",
        "query_hash": "9792bb396b680a2e46fec940da12bf1481e4e51ac18a1c6e2b2c8a069da00b83",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectEncodedPowershellandDecode.kql",
        "query": "//Finds encoded PowerShell commands and then decodes the encoded string\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Query modified from this post - https://techcommunity.microsoft.com/t5/microsoft-sentinel/finding-base64-encoded-commands/m-p/1891876\nDeviceProcessEvents\n| where ProcessCommandLine contains \"powershell\" or InitiatingProcessCommandLine contains \"powershell\"\n| where ProcessCommandLine contains \"-enc\"\n    or ProcessCommandLine contains \"-encodedcommand\"\n    or InitiatingProcessCommandLine contains \"-enc\"\n    or InitiatingProcessCommandLine contains \"-encodedcommand\"\n//Extract encoded command using regex\n//This query will only return results when the command can be matched via regex and decoded, if you run only the above lines it will return all encoded commands without attempting to match and decode\n| extend EncodedCommand = extract(@'\\s+([A-Za-z0-9+/]{20}\\S+$)', 1, ProcessCommandLine)\n| where EncodedCommand != \"\"\n| extend DecodedCommand = base64_decode_tostring(EncodedCommand)\n| where DecodedCommand != \"\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    ProcessCommandLine,\n    EncodedCommand,\n    DecodedCommand",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectEncodedPowershellandDecode",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5751c718-517a-4183-aa65-4d098cb337d2",
        "query_hash": "feda8ae2459edc93086d60e6d40d99479b8f5543b21d342dc066c599518ca69f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectFirstTimeTeamviewerUsage.kql",
        "query": "//Detects Teamviewer being used for the first time on a device\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Build a list of known devices using Teamviewer over the last 60 days\nlet knowndevices=\nDeviceNetworkEvents\n| where TimeGenerated > ago(60d) and TimeGenerated < ago(1d)\n| project DeviceName, InitiatingProcessFileName, ActionType, LocalIPType, RemoteIPType\n| where InitiatingProcessFileName contains \"teamviewer.exe\"\n| where ActionType == \"ConnectionSuccess\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| distinct DeviceName;\n//Find new devices in the last day not in the known list\n    DeviceNetworkEvents\n    | where TimeGenerated > ago(1d)\n    | where InitiatingProcessFileName contains \"teamviewer.exe\"\n    | where ActionType == \"ConnectionSuccess\"\n    | where LocalIPType == \"Private\"\n    | where RemoteIPType == \"Public\"\n    | where DeviceName !in (knowndevices)\n    | distinct DeviceName\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectFirstTimeTeamviewerUsage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f82f1d20-dd32-4118-899d-2ea9b26e76f0",
        "query_hash": "d68001810bead5aaac414745b60bb2825b5ba0fedbd73d6764994b245e3bb211",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectInternaltoExternalTeamviewer.kql",
        "query": "//Detects successful TeamViewer connections from internal to external IP addresses\n\n//Data connector required for this query - M365 Defender - Device* tables or Advanced Hunting license\n\n//If TeamViewer is a sanctioned app then you will get lots of hits.\n//Works in both Microsoft Sentinel and Advanced Hunting\nDeviceNetworkEvents\n| where InitiatingProcessFileName contains \"teamviewer.exe\"\n| where ActionType == \"ConnectionSuccess\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| project TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessFileName,\n    LocalIP,\n    RemoteIP",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectInternaltoExternalTeamviewer",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9e1032fe-1b75-42c1-950f-d6e9fdf53b57",
        "query_hash": "3e522c878253caf044bef02f14464d9fca1130cffff9af64103f74f19b1f2f60",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectLocalAdminsWhoHaventElevated.kql",
        "query": "// Searches for local admin log on events and then on process events that require full token elevation, query returns users who have logged on as an admin but not required admin access for 30 days\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n// Exclude a list of known processes in your environment that require TokenElevationTypeFull such as conhost, DismHost\nlet process = dynamic([\"conhost.exe\", \"DismHost.exe\", \"git.exe\", \"HPUpdate.exe\"]);\nlet devices =\n    DeviceInfo\n    | where TimeGenerated > ago(30d)\n    | where OSPlatform !contains \"Server\"\n    | summarize arg_max(TimeGenerated, *) by DeviceName\n    | project DeviceName\n    | join kind=inner ( \n        DeviceLogonEvents\n        | where TimeGenerated > ago (14d)\n        | where LogonType == \"Interactive\"\n// Exclude accounts such as service desk users who log on to complete admin work\n        | where AccountName !contains \"admin\"\n        | where IsLocalAdmin == true\n        )\n        on DeviceName\n    | summarize arg_max (TimeGenerated, *) by DeviceName\n    | project DeviceName, AccountName;\nDeviceProcessEvents\n| project\n    TimeGenerated,\n    DeviceName,\n    AccountName,\n    FileName,\n    InitiatingProcessFileName,\n    InitiatingProcessTokenElevation\n| where TimeGenerated > ago(30d)\n| where InitiatingProcessTokenElevation == \"TokenElevationTypeFull\"\n| where FileName !in (process)\n| join kind=rightanti devices on DeviceName, AccountName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectLocalAdminsWhoHaventElevated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0b9f06df-7472-4d60-b09f-b0a479d0435d",
        "query_hash": "186db7293ffe084a693c6becdaef48ae25e215a2c9a8b0a487fa6af388a22bed",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectLocaltoPublicRDP.kql",
        "query": "//Detect allowed RDP connections from private to public networks\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n| where LocalIPType == \"Private\" and RemoteIPType == \"Public\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n| where LocalIPType == \"Private\" and RemoteIPType == \"Public\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectLocaltoPublicRDP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1f47ca85-a399-47b7-8a4d-c535ab1fa08b",
        "query_hash": "4a4d40e81a9dade4b3bb5f35f84e485cb8ed636e3593edd2d192f7d3bb475858",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectLocalUserCreated.kql",
        "query": "//Detect when a local user account is created on an endpoint\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where TimeGenerated > ago(7d)\n| where ActionType == \"UserAccountCreated\"\n//Exclude defaultuser1 which is created by Windows through different processes \n| where AccountName != \"defaultuser1\"\n| project\n    TimeGenerated,\n    DeviceName,\n    ['Account Created Name']=AccountName,\n    Actor=InitiatingProcessAccountName\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"UserAccountCreated\"\n//Exclude defaultuser1 which is created by Windows through different processes \n| where AccountName != \"defaultuser1\"\n| project\n    Timestamp,\n    DeviceName,\n    ['Account Created Name']=AccountName,\n    Actor=InitiatingProcessAccountName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectLocalUserCreated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "31342208-8bb0-428a-b110-e9f949f45641",
        "query_hash": "8e29edb5d4f8569e642500c7d3afa7fd6a64a4790a81167e066c346fc4dca1af",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectLogonsPriortoMDEAlert.kql",
        "query": "//When a Defender for Endpoint alert is triggered, search for the most recent interactive logon to the device prior to the alert.\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\n//Also returns if that user is a local admin on the device.\nlet timeframe = 48h;\nSecurityAlert\n| where TimeGenerated > ago(timeframe)\n| where ProviderName == \"MDATP\"\n| project AlertTime=TimeGenerated, DeviceName=CompromisedEntity, AlertName\n| join kind=inner (\n    DeviceLogonEvents\n    | project\n        TimeGenerated,\n        LogonType,\n        ActionType,\n        InitiatingProcessCommandLine,\n        IsLocalAdmin,\n        AccountName,\n        DeviceName\n    | where LogonType in (\"Interactive\", \"RemoteInteractive\")\n    | where ActionType == \"LogonSuccess\"\n    | where InitiatingProcessCommandLine == \"lsass.exe\"\n    )\n    on DeviceName\n| where (AlertTime - TimeGenerated) between (0min .. timeframe)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| project\n    LogonTime=TimeGenerated,\n    AlertTime,\n    AlertName,\n    DeviceName,\n    AccountName,\n    IsLocalAdmin",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectLogonsPriortoMDEAlert",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0261680b-95bf-408f-b9e3-472f43fd501d",
        "query_hash": "6abb9e9cb3f9beaf14dab335c5fcb0caee89de6b68d6ea8277402a19a23b2b86",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectMacroConnectingtoInternet.kql",
        "query": "//Detect when an Excel macro connects to the internet. \n//Some IPs returned shown may be Microsoft telemetry but these events are still worth investigating.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where InitiatingProcessFileName contains \"excel.exe\"\n| where InitiatingProcessCommandLine contains \".xlsm\" or InitiatingProcessCommandLine contains \".xltm\"\n//Exclude Microsoft telemetry endpoints \n| where RemoteUrl !endswith \"outlook.com\" \n    and RemoteUrl !endswith \"office.com\"\n    and RemoteUrl !endswith \"microsoft.com\"\n    and RemoteUrl !endswith \"office365.com\"\n    and RemoteUrl !endswith \"live.com\"\n    and RemoteUrl !endswith \"office.net\"\n| where RemoteIPType == \"Public\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where InitiatingProcessFileName contains \"excel.exe\"\n| where InitiatingProcessCommandLine contains \".xlsm\" or InitiatingProcessCommandLine contains \".xltm\"\n| where RemoteIPType == \"Public\"\n//Exclude Microsoft telemetry endpoints \n| where RemoteUrl !endswith \"outlook.com\" \n    and RemoteUrl !endswith \"office.com\"\n    and RemoteUrl !endswith \"microsoft.com\"\n    and RemoteUrl !endswith \"office365.com\"\n    and RemoteUrl !endswith \"live.com\"\n    and RemoteUrl !endswith \"office.net\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectMacroConnectingtoInternet",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "803e9ad2-9631-4680-9635-1021e5587cca",
        "query_hash": "7ef10bf87abd4f6ba847ea0c71d3dbc712d3448f338b1750e0b6fbd883ccf7fb",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectMacroUsage.kql",
        "query": "//Lookup Identity info table to find the most recent device a user has logged onto and any macro usage from that device and return identity info\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet id=\n    IdentityInfo\n    | where TimeGenerated > ago (21d)\n    | summarize arg_max(TimeGenerated, *) by AccountName\n    | extend LoggedOnUser = AccountName\n    | project LoggedOnUser, AccountUPN, JobTitle, EmployeeId, Country, City\n    | join kind=inner (\n        DeviceInfo\n        | where TimeGenerated > ago (21d)\n        | summarize arg_max(TimeGenerated, *) by DeviceName\n        | extend LoggedOnUser = tostring(LoggedOnUsers[0].UserName)\n        )\n        on LoggedOnUser\n    | project LoggedOnUser, AccountUPN, JobTitle, Country, DeviceName, EmployeeId;\nDeviceProcessEvents\n| join kind=inner id on DeviceName\n| where TimeGenerated > ago (21d)\n| where InitiatingProcessFileName == \"EXCEL.EXE\"\n| where InitiatingProcessCommandLine contains \".xlsm\" or InitiatingProcessCommandLine contains \".xltm\"\n| extend Process = InitiatingProcessFileName\n| extend Command = InitiatingProcessCommandLine\n| project\n    TimeGenerated,\n    DeviceName,\n    LoggedOnUser,\n    AccountUPN,\n    Process,\n    Command,\n    JobTitle,\n    EmployeeId,\n    SHA1,\n    SHA256",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectMacroUsage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8e41479e-1719-4dd5-af5f-83a70f7d30b7",
        "query_hash": "f79cd768b53bc4b029f1af58ddf1acc8d66548e37d90f885dbd9fc5baf381959",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectMultipleFailedRemoteLogons.kql",
        "query": "//Detect when the same IP attempts to brute force a remote connection or attempts to connect to multiple devices and fails over a short time period\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceLogonEvents\n| where TimeGenerated > ago (1d)\n| where LogonType == \"RemoteInteractive\"\n| where ActionType == \"LogonFailed\"\n| summarize\n    ['Count of logon attempts']=count(),\n    ['Count of distinct devices']=dcount(DeviceName),\n    ['List of devices']=make_set(DeviceName)\n    by RemoteIP, bin(TimeGenerated, 1h)\n| where ['Count of distinct devices'] >= 3 or ['Count of logon attempts'] >= 10\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceLogonEvents\n| where Timestamp > ago (1d)\n| where LogonType == \"RemoteInteractive\"\n| where ActionType == \"LogonFailed\"\n| summarize\n    ['Count of logon attempts']=count(),\n    ['Count of distinct devices']=dcount(DeviceName),\n    ['List of devices']=make_set(DeviceName)\n    by RemoteIP, bin(Timestamp, 1h)\n| where ['Count of distinct devices'] >= 3 or ['Count of logon attempts'] >= 10",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectMultipleFailedRemoteLogons",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "91d87e2a-a2dc-4e7b-9cee-27fd9b246a8b",
        "query_hash": "b54126c369d539b469d3d0f8223d4c9ca8e268812f3334f20de9d93b5eb6c958",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectPotentialNetworkRecon.kql",
        "query": "//Detect when the same device attempts to connect to multiple devices and is denied within a short time frame\n//This example will alert when the same device attempts to connect to three or more different devices in 30 minutes\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where ActionType == \"FirewallInboundConnectionBlocked\"\n| summarize\n    ['Count of Devices']=dcount(DeviceName),\n    ['List of Devices']=make_set(DeviceName)\n    by RemoteIP, bin(TimeGenerated, 30m)\n| where ['Count of Devices'] >= 3\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where ActionType == \"FirewallInboundConnectionBlocked\"\n| summarize\n    ['Count of Devices']=dcount(DeviceName),\n    ['List of Devices']=make_set(DeviceName)\n    by RemoteIP, bin(Timestamp, 30m)\n| where ['Count of Devices'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectPotentialNetworkRecon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a86e3b64-4f6a-43ba-b78c-8677d4325af3",
        "query_hash": "3eb9f2395a93cb93d652fdb75cebb5bf5c4cb02d33566b880d0f6792e0034344",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectPuttyConnectingPublic.kql",
        "query": "//Detect successful internal to public connections using Putty\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where ActionType == \"ConnectionSuccess\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| where InitiatingProcessCommandLine contains \"putty.exe\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where ActionType == \"ConnectionSuccess\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| where InitiatingProcessCommandLine contains \"putty.exe\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessAccountName,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectPuttyConnectingPublic",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "94be4239-5454-4c19-a71a-a767888e6b1b",
        "query_hash": "823851f12413d039311701e98f45426d0f4ae388904296e7613aee8022acefe7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectRDPRecon.kql",
        "query": "//Search for devices connecting to multiple IP addresses via RDP witin a time window and alert when over a particular threshold\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet timerange=1d;\nlet window=20m;\nlet threshold=5;\nDeviceNetworkEvents\n| where TimeGenerated > ago(timerange)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n// Exclude Defender for Identity which uses RDP to map your network\n| where InitiatingProcessFileName <> \"Microsoft.Tri.Sensor.exe\"\n| summarize ['Target Device List']=make_set(RemoteIP), ['Count of Devices']=dcount(RemoteIP) by bin(TimeGenerated, window), DeviceName\n| where ['Count of Devices'] > threshold\n| sort by ['Count of Devices'] desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectRDPRecon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e23a9144-26e7-4b39-bf47-fe71633f1cdd",
        "query_hash": "980ffacf80d53e4b4c5b36916ccc0e286eba68ab496fa6a9f55a9573d413112c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectRegistryTampering.kql",
        "query": "//Detect when a user or process attempts to tamper with Defender for Endpoint registry settings\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where ActionType == \"TamperingAttempt\"\n| extend OriginalRegistryValue = tostring(AdditionalFields.OriginalValue)\n| extend Status = tostring(AdditionalFields.Status)\n| extend TamperingAction = tostring(AdditionalFields.TamperingAction)\n| extend AttemptedRegistryValue = tostring(AdditionalFields.TamperingAttemptedValue)\n| extend TargetRegistryKey = tostring(AdditionalFields.Target)\n| where TamperingAction == \"RegistryModification\"\n| project\n    TimeGenerated,\n    DeviceName,\n    TamperingAction,\n    Status,\n    OriginalRegistryValue,\n    AttemptedRegistryValue,\n    TargetRegistryKey,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectRegistryTampering",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ff77b33d-5c19-43fc-8f61-a8a92a53dcf5",
        "query_hash": "e46234e464d5584b122a822fec0e3de916f204c0c1e075c43cbe7578ad78a3ae",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectSecurityLogCleared.kql",
        "query": "//Detect when a user clears the security event log on one of your devices\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where ActionType == \"SecurityLogCleared\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountDomain,\n    InitiatingProcessAccountName\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where ActionType == \"SecurityLogCleared\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessAccountDomain,\n    InitiatingProcessAccountName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectSecurityLogCleared",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2c798128-d3f0-4a7c-a2f6-8e45420d322f",
        "query_hash": "c4b68cde2a9ec7f19823aa9b5b1a293f2387035d14773f98eb6d58f9c46d1c6d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-DetectURLopenedfromISOfile.kql",
        "query": "//Detect when a user mounts an ISO file and then within 20 minutes launches a browser. These events could be unrelated because a BrowserLaunchedToOpenUrl event doesn't confirm if the lnk file was in the ISO file. \n//The detection is just based on time between mounting an ISO file and then launching a URL.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\n//Find events where an ISO file is mounted by detecting the creation of a .iso.lnk file\nDeviceFileEvents\n| where TimeGenerated > ago(1d)\n| where ActionType == \"FileCreated\"\n//This may create some false positives with files named iso.lnk at the end like summary-ciso.lnk\n| where FileName endswith \"iso.lnk\"\n| project\n    ISOMountTime=TimeGenerated,\n    DeviceName,\n    FileName,\n    FolderPath,\n    InitiatingProcessAccountName\n//Join to our DeviceEvents where a browser is opened to launch a URL\n| join kind=inner(\n    DeviceEvents\n    | where TimeGenerated > ago(1d)\n    | where ActionType == \"BrowserLaunchedToOpenUrl\"\n    //Find only RemoteURLs that are web sites\n    | where RemoteUrl startswith \"http\"\n    | project\n        URLOpenTime=TimeGenerated,\n        DeviceName,\n        InitiatingProcessAccountName,\n        RemoteIP,\n        RemoteUrl,\n        RemotePort\n    )\n    on DeviceName, InitiatingProcessAccountName\n//Find browser opened to URL events that happened within 20 minutes of the ISO file being mounted\n| where URLOpenTime between ((ISOMountTime - timespan(0min)) .. (ISOMountTime + timespan(20min)))\n| extend ['ISO FileName'] = trim(@\".lnk\", FileName)\n| project\n    ISOMountTime,\n    URLOpenTime,\n    ['ISO FileName'],\n    DeviceName,\n    InitiatingProcessAccountName,\n    RemoteUrl,\n    RemoteIP,\n    RemotePort\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceFileEvents\n| where Timestamp > ago(1d)\n| where ActionType == \"FileCreated\"\n//This may create some false positives with files named iso.lnk at the end like summary-ciso.lnk\n| where FileName endswith \"iso.lnk\"\n| project\n    ISOMountTime=Timestamp,\n    DeviceName,\n    FileName,\n    FolderPath,\n    InitiatingProcessAccountName\n//Join to our DeviceEvents where a browser is opened to launch a URL\n| join kind=inner(\n    DeviceEvents\n    | where Timestamp > ago(1d)\n    | where ActionType == \"BrowserLaunchedToOpenUrl\"\n    //Find only RemoteURLs that are web sites\n    | where RemoteUrl startswith \"http\"\n    | project\n        URLOpenTime=Timestamp,\n        DeviceName,\n        InitiatingProcessAccountName,\n        RemoteIP,\n        RemoteUrl,\n        RemotePort\n    )\n    on DeviceName, InitiatingProcessAccountName\n//Find browser opened to URL events that happened within 20 minutes of the ISO file being mounted\n| where URLOpenTime between ((ISOMountTime - timespan(0min)) .. (ISOMountTime + timespan(20min)))\n| extend ['ISO FileName'] = trim(@\".lnk\", FileName)\n| project\n    ISOMountTime,\n    URLOpenTime,\n    ['ISO FileName'],\n    DeviceName,\n    InitiatingProcessAccountName,\n    RemoteUrl,\n    RemoteIP,\n    RemotePort\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DetectURLopenedfromISOfile",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "99876a48-612b-4743-b0c5-467e36695d06",
        "query_hash": "87729b8bb3bf90aab3229855f3daa8f0530d1bac344295044d324262af0fadff",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FileDownloadedfromO365thenCopiedtoUSB.kql",
        "query": "//Detects a user that downloaded a file from O365 and then wrote the same file to USB, matches on both filename and the user\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Office 365\n\nlet filedownloads=\n    OfficeActivity\n    | where TimeGenerated > ago(1d)\n    | extend DownloadTime = TimeGenerated\n    | where Operation in ('FileSyncDownloadedFull', 'FileDownloaded')\n    | project DownloadTime, UserId, SourceFileName\n    | join kind=inner\n        (\n        IdentityInfo\n        | where TimeGenerated > ago (21d)\n        | summarize arg_max(TimeGenerated, *) by AccountUPN) \n        on $left.UserId == $right.AccountUPN\n    | project DownloadTime, SourceFileName, UserId, AccountName\n;\nDeviceEvents\n| where TimeGenerated > ago(1d)\n| where ActionType == \"UsbDriveMounted\"\n| extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n| join kind=inner \n    (\n    DeviceFileEvents\n    | where TimeGenerated > ago(1d)\n    | extend FileCopyTime = TimeGenerated\n    | where ActionType == \"FileCreated\"\n    | join kind=inner filedownloads\n        on\n        $left.FileName == $right.SourceFileName,\n        $left.RequestAccountName == $right.AccountName\n    | parse FolderPath with DriveLetter '\\\\' *\n    | extend DriveLetter = tostring(DriveLetter)\n    ) \n    on DeviceId, DriveLetter\n| extend FileCopied = FileName1\n| extend User = AccountName1\n| distinct DeviceName, DriveLetter, FileCopied, User",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FileDownloadedfromO365thenCopiedtoUSB",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0cdf63db-3400-4de0-b4d1-e4350da45410",
        "query_hash": "01ed54975db79b7ea41b0f0a33144efe2ffc6f86498b1d688f63e956d6254d8b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FilesCopiedtoUSBCertainGroups.kql",
        "query": "//Lookup members of a specific group and find any USB file copies completed by those users\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet id=\n    IdentityInfo\n    | where GroupMembership has \"Group Name\"\n    | where TimeGenerated > ago (21d)\n    | summarize arg_max(TimeGenerated, *) by AccountName\n    | extend LoggedOnUser = AccountName\n    | project LoggedOnUser, AccountUPN, JobTitle, EmployeeId, Country, City\n    | join kind=inner (\n        DeviceInfo\n        | where TimeGenerated > ago (21d)\n        | summarize arg_max(TimeGenerated, *) by DeviceName\n        | extend LoggedOnUser = tostring(LoggedOnUsers[0].UserName)\n        )\n        on LoggedOnUser\n    | project LoggedOnUser, AccountUPN, JobTitle, Country, DeviceName, EmployeeId;\nDeviceEvents\n| where TimeGenerated > ago(30d)\n| join kind=inner id on DeviceName\n| where ActionType == \"UsbDriveMounted\"\n| extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n| join kind=inner (DeviceFileEvents\n    | where TimeGenerated > ago(30d)\n    | extend FileCopyTime = TimeGenerated\n    | where ActionType == \"FileCreated\"\n    | parse FolderPath with DriveLetter '\\\\' *\n    | extend DriveLetter = tostring(DriveLetter)\n    )\n    on DeviceId, DriveLetter\n| distinct\n    TimeGenerated,\n    DeviceName,\n    DriveLetter,\n    FileName1,\n    LoggedOnUser,\n    AccountUPN,\n    JobTitle,\n    EmployeeId,\n    Country",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FilesCopiedtoUSBCertainGroups",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7913af4a-02fb-4d31-b617-5f6a60aed11d",
        "query_hash": "956bd28c323d702f18f5f6b371a6bcb243f9e5a4462e0a9f99c05e93847ed3f4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindDevicesMostASR.kql",
        "query": "//Summarize the machines in your environment that are triggering the most total ASR and distinct ASR rule events\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType startswith \"Asr\"\n| summarize\n    ['Total ASR hit count']=count(),\n    ['Distinct ASR rules count']=dcount(ActionType),\n    ['List of ASR rules triggered']=make_set(ActionType),\n    ['List of processess triggering ASR']=make_set(InitiatingProcessCommandLine)\n    by DeviceName\n| sort by ['Total ASR hit count'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago (30d)\n| where ActionType startswith \"Asr\"\n| summarize\n    ['Total ASR hit count']=count(),\n    ['Distinct ASR rules count']=dcount(ActionType),\n    ['List of ASR rules triggered']=make_set(ActionType),\n    ['List of processess triggering ASR']=make_set(InitiatingProcessCommandLine)\n    by DeviceName\n| sort by ['Total ASR hit count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindDevicesMostASR",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2f57b49a-d6a0-4539-9a04-5813bf28a1ca",
        "query_hash": "8ba8521fa142629df8f04fbf36b660d0db817d037e785651efc44114eacb2f6e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindDevicesNoLongerSendingEvents.kql",
        "query": "//Find devices that have stopped sending network events over the last 30 days, retrieve last event time and calculate the days since last event\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceNetworkEvents\n| project TimeGenerated, DeviceName\n| where TimeGenerated > ago(365d)\n| summarize arg_max(TimeGenerated, DeviceName) by DeviceName\n| project DeviceName, ['Days Since Last Event'] = datetime_diff('day', now(), TimeGenerated), ['Last Event Time']=TimeGenerated\n| where ['Days Since Last Event'] > 30\n| sort by ['Days Since Last Event'] desc   ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindDevicesNoLongerSendingEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0e77ff3a-8e5c-4e19-a06b-9fd5d764d932",
        "query_hash": "4c8e9b4c0dd6a1eb3febc3cf5106a102e074c20fc08b879a639401030c138572",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindDevicesToOnboard.kql",
        "query": "//Find the information of any devices found by Defender network device discovery that are able to onboarded to Defender\n\n//Data connector required for this query - Advanced Hunting license\n\n//This query only works in Advanced Hunting\nDeviceInfo\n| summarize arg_max(Timestamp, *) by DeviceId \n| where OnboardingStatus == \"Can be onboarded\"\n| where isempty(MergedToDeviceId)\n| project ['Time last seen']=Timestamp, DeviceName, DeviceId, OSDistribution, OSVersion, DeviceCategory, IsAzureADJoined, JoinType",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindDevicesToOnboard",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "13240f9f-3141-4724-8fc9-e41bf58d1b32",
        "query_hash": "4462bce6def310ffcf90af85791ac278d63e686b3154a008b27b83228a90e9e6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindDeviceswithmostSmartScreenEvents.kql",
        "query": "//Find the devices in your environment triggering the most Defender SmartScreen events\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType startswith \"SmartScreen\"\n| extend Experience = tostring(AdditionalFields.Experience)\n| where isnotempty(Experience)\n| summarize\n    ['Count of SmartScreen Events']=count(),\n    ['List of SmartScreen Event Types']=make_set(Experience)\n    by DeviceName\n| sort by ['Count of SmartScreen Events'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago(30d)\n| where ActionType startswith \"SmartScreen\"\n| extend AF = parse_json(AdditionalFields)\n| extend Experience = tostring(AF.Experience)\n| where isnotempty(Experience)\n| summarize\n    ['Count of SmartScreen Events']=count(),\n    ['List of SmartScreen Event Types']=make_set(Experience)\n    by DeviceName\n| sort by ['Count of SmartScreen Events'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindDeviceswithmostSmartScreenEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "03437301-8e3a-4b30-86ba-675ae8084111",
        "query_hash": "0ccc162662f2953446ba82a347f2db79d7190bc67263dd0211c00005291dec85",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindDeviceswithnoASR.kql",
        "query": "//Find devices in your environment that have never triggered an ASR rule, you can likely turn on ASR for these devices without causing issues for the users.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\n//First find devices that have triggered an Attack Surface Reduction rule, either block or in audit mode.\nlet asrdevices=\n    DeviceEvents\n    | where TimeGenerated > ago (30d)\n    | where ActionType startswith \"Asr\"\n    | distinct DeviceName;\n//Find all devices and exclude those that have previously triggered a rule\nDeviceInfo\n| where TimeGenerated > ago (30d)\n| where OSPlatform startswith \"Windows\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where DeviceName !in (asrdevices)\n| project\n    ['Time Last Seen']=TimeGenerated,\n    DeviceId,\n    DeviceName,\n    OSPlatform,\n    OSVersion,\n    LoggedOnUsers\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\n//First find devices that have triggered an Attack Surface Reduction rule, either block or in audit mode.\nlet asrdevices=\n    DeviceEvents\n    | where Timestamp > ago (30d)\n    | where ActionType startswith \"Asr\"\n    | distinct DeviceName;\n//Find all devices and exclude those that have previously triggered a rule\nDeviceInfo\n| where Timestamp > ago (30d)\n| where OSPlatform startswith \"Windows\"\n| summarize arg_max(Timestamp, *) by DeviceName\n| where DeviceName  !in (asrdevices)\n| project\n    ['Time Last Seen']=Timestamp,\n    DeviceId,\n    DeviceName,\n    OSPlatform,\n    OSVersion,\n    LoggedOnUsers",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindDeviceswithnoASR",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "769dac36-532a-457a-bc6c-8bdb99e50b1a",
        "query_hash": "aa76046bdc5f9468531da7c9c34834cc61db694742d3d7aa1d500c8ab6e9cfea",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindDeviceWithoutCurrentAVScan.kql",
        "query": "// Devices without successful AV scan in the last n days\n// As of 27.01.2022 only the following platforms are support\n// Windows10, Windows10WVD, Windows11, WindowsServer2012R2, WindowsServer2016, WindowsServer2019, WindowsServer2022\n\n//Data connector required for this query - Advanced Hunting license\n//Query only works in Advanced Hunting\n\nlet Timerange = 14d;\nDeviceInfo\n| where OnboardingStatus == \"Onboarded\"\n| where isnotempty( OSVersion)\n| where Timestamp > ago(Timerange)\n| summarize LastSeen = arg_max(Timestamp, *) by DeviceId\n| extend LastSuccessfulAVScan = strcat(\"Not in the last \",format_timespan(Timerange,'d'),\" days\")\n| project LastSeen, DeviceId, DeviceName, MachineGroup, OSPlatform, OSVersion, DeviceType, LastSuccessfulAVScan, JoinType\n// use rightsemi to return all devices that had a successful AV scan in the last n days\n// use leftanti to return all devices that NOT had a successful AV scan in the last n days\n| join kind=leftanti (\n    DeviceEvents\n    | where ActionType == \"AntivirusScanCompleted\"\n    | where Timestamp > ago(Timerange)\n    | summarize LastSuccessfulAVScan = max(Timestamp) by DeviceName, DeviceId\n    | join kind=innerunique (\n        DeviceInfo\n        | where isnotempty( OSVersion )\n    ) on DeviceId\n    | summarize LastSeen = arg_max(Timestamp,*) by DeviceName\n    | project LastSeen, DeviceId, DeviceName, MachineGroup, OSPlatform, OSVersion, DeviceType, LastSuccessfulAVScan, JoinType\n) on DeviceId\n| where OSPlatform in (\"Windows10\",\"Windows10WVD\",\"Windows11\",\"WindowsServer2012R2\",\"WindowsServer2016\",\"WindowsServer2019\",\"WindowsServer2022\")\n| sort by DeviceType, MachineGroup, OSPlatform",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindDeviceWithoutCurrentAVScan",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e9c19997-d76f-46bb-abbe-1a432b1572ca",
        "query_hash": "aecbb457b8e346096c44a4ec131e663b3ac6d20fff9e3ec180870e836ab15170",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindNetworkRecon.kql",
        "query": "//Find potential network recon on one of your devices by detecting when it connects to more than 10 common ports used to map your network and 10 distinct endpoints within an hour\n//Use that data to then return more details on each IP that device attempted to connect to\n\n//Data connector required for this query - M365 Defender - Device* tables or Advanced Hunting license\n\n//Query works in both Sentinel and Advanced Hunting\n//First look for devices connecting to 10 or more common ports and 10 or more devices within an hour\nlet devices=\n    DeviceNetworkEvents\n    | where ActionType in (\"ConnectionSuccess\", \"ConnectionFailed\")\n    | where RemotePort in (\"21\", \"22\", \"25\", \"53\", \"80\", \"110\", \"123\", \"139\", \"389\", \"443\", \"445\", \"636\", \"993\", \"995\", \"8080\")\n    | where RemoteIPType == \"Private\"\n    | summarize\n        ['Total connection count']=count(),\n        ['Count of distinct ports']=dcount(RemotePort),\n        ['List of ports']=make_set(RemotePort),\n        ['Count of remote IPs']=dcount(RemoteIP),\n        ['List of remote IPs']=make_set(RemoteIP)\n        by DeviceName, bin(TimeGenerated, 1h)\n    | where ['Count of distinct ports'] >= 10 and ['Count of remote IPs'] >= 10\n    | distinct DeviceName;\n//Take those devices and return more detail on each attempt\nDeviceNetworkEvents\n| where ActionType in (\"ConnectionSuccess\", \"ConnectionFailed\")\n| where RemotePort in (\"21\", \"22\", \"25\", \"53\", \"80\", \"110\", \"123\", \"139\", \"389\", \"443\", \"445\", \"636\", \"993\", \"995\", \"8080\")\n| where DeviceName in (devices)\n| where RemoteIPType == \"Private\"\n| summarize\n    ['Total connection count']=count(),\n    ['Count of distinct ports']=dcount(RemotePort),\n    ['List of ports']=make_set(RemotePort)\n    by DeviceName, RemoteIP, ActionType\n| project-reorder\n    DeviceName,\n    ActionType,\n    RemoteIP,\n    ['Total connection count'],\n    ['Count of distinct ports'],\n    ['List of ports']\n| sort by DeviceName desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindNetworkRecon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "836c8b4c-c61f-4eb7-ad5b-a4299e79f2dc",
        "query_hash": "a6afdd9b422df27fb594ecdd3024a90e1db5a21d87879adddae3eaa76999c135",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindNewDevices.kql",
        "query": "//Find new devices onboarded to Defender in the last month\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet knowndevices=\n    DeviceNetworkInfo\n    | where TimeGenerated > ago (180d) and TimeGenerated < ago(30d)\n    | distinct DeviceName;\nDeviceNetworkInfo\n| where TimeGenerated > ago (30d)\n| summarize arg_min(TimeGenerated, *) by DeviceName\n| where DeviceName !in (knowndevices)\n| project TimeGenerated, DeviceName\n| extend ['Days Since First Seen']=datetime_diff(\"day\", now(), TimeGenerated)\n| project ['Time First Seen']=TimeGenerated, ['Days Since First Seen'], DeviceName\n| sort by ['Days Since First Seen'] desc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindNewDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e1b874e9-35b8-4b49-abbb-6cc24260d1b5",
        "query_hash": "2a31052062ac4f7861c6c7cdac004a13a4ade42dc2dc608062fb3082c24a2ea7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindNewEvents.kql",
        "query": "//Find any new DeviceEvents found in your environment over the last week compared to the last 6 months\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//First find existing action types over the six months\nlet knownevents=\n    DeviceEvents\n    | where TimeGenerated > ago (180d) and TimeGenerated < ago(7d)\n    | distinct ActionType;\n//Find new action types in the last week, the time they were first seen and how many counts seen this week\nDeviceEvents\n| where TimeGenerated > ago(7d)\n| where ActionType !in (knownevents)\n| summarize ['First Time Seen']=min(TimeGenerated), Count=count() by ActionType\n| sort by Count desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindNewEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ff8b87df-f784-49c7-a249-163091a07301",
        "query_hash": "2cbba2d6e562143434d0184eb9148606dbc1d2d12dd53ce8a4c9680a753b1ba4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FindUsersWhoClickedonPhishing.kql",
        "query": "//Find which users clicked on a phishing link after it was detected by Defender for Office 365\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where ProviderName == \"OATP\"\n| where AlertName in (\"Email messages containing malicious URL removed after delivery\u200b\",\"Email messages containing phish URLs removed after delivery\")\n| extend x = todynamic(Entities)\n| mv-expand x\n| parse-where x with * '\"Url\":\"' MaliciousURL '\"' *\n| project PhishTime=TimeGenerated, MaliciousURL\n| join kind=inner (\n    DeviceEvents\n    | project TimeGenerated, ActionType, DeviceName, InitiatingProcessAccountName, RemoteUrl\n    | where ActionType == \"BrowserLaunchedToOpenUrl\"\n    | where RemoteUrl startswith \"http\")\n    on $left.MaliciousURL == $right.RemoteUrl\n| project-rename URLOpenTime=TimeGenerated\n| extend TimeDelta = abs(URLOpenTime - PhishTime)\n| project PhishTime, URLOpenTime, TimeDelta, ActionType, RemoteUrl, DeviceName, InitiatingProcessAccountName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FindUsersWhoClickedonPhishing",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ca4f7f93-b2f6-4365-8832-1ec210cfcead",
        "query_hash": "9945465aee6142bc6868c879ae03b13e450c582d48c8ff0c808a53c73c417ff9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-FirstTimeWhoAmI.kql",
        "query": "//Detect when a 'whoami' command is sent for the first time from a device & account combination not seen before\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceProcessEvents\n| where TimeGenerated > ago (30d) and TimeGenerated < ago(1d)\n| project DeviceName, InitiatingProcessAccountName, InitiatingProcessCommandLine\n| where InitiatingProcessCommandLine contains \"whoami\"\n| distinct DeviceName, InitiatingProcessAccountName\n| join kind=rightanti (\n    DeviceProcessEvents\n    | where TimeGenerated > ago(1d)\n    | project\n        TimeGenerated,\n        DeviceName,\n        InitiatingProcessAccountName,\n        InitiatingProcessCommandLine\n    | where InitiatingProcessCommandLine contains \"whoami\"\n    )\n    on DeviceName, InitiatingProcessAccountName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FirstTimeWhoAmI",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cd4c1a82-847e-49a2-9a95-485eb9da8616",
        "query_hash": "53bbf28d862c42001de987f9f04632fd401d762779be3da489bde08dad207bbd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-InterestingPortsOpened.kql",
        "query": "//Use the DeviceNetworkEvents to find what listening ports are being opened on a device and then query that list\n//You can look for SSH, DNS etc being run from your end user devices\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(7d)\n| where ActionType == \"ListeningConnectionCreated\"\n//Exclude high ports\n| where LocalPort < 1025\n| summarize ['Ports Opened']=make_set(LocalPort), ['Count of Ports Opened']=dcount(LocalPort) by DeviceName\n//Look for machines running services such as FTP, SSH, DNS etc\n| where ['Ports Opened'] has_any (\"21\",\"22\",\"53\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"ListeningConnectionCreated\"\n//Exclude high ports\n| where LocalPort < 1025\n| summarize ['Ports Opened']=make_set(LocalPort), ['Count of Ports Opened']=dcount(LocalPort) by DeviceName\n//Look for machines running services such as FTP, SSH, DNS etc\n| where ['Ports Opened'] has_any (\"21\",\"22\",\"53\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-InterestingPortsOpened",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7f79731b-9c9e-4ca6-88ef-d34aba156fa8",
        "query_hash": "7a19e5d4768d4000a0047c06bbe8865e01d0c4b3b15638d7b3f03d1a46458b8a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-LocalUserswithAdmin.kql",
        "query": "//Summarize all local user accounts (non-domain) per device which have logged on with administrative rights\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceLogonEvents\n| where TimeGenerated > ago(7d)\n| project\n    TimeGenerated,\n    AdditionalFields,\n    IsLocalAdmin,\n    LogonType,\n    DeviceName,\n    AccountDomain,\n    AccountName\n| extend LocalLogon = toboolean(AdditionalFields.IsLocalLogon)\n| where LocalLogon == true\n| where IsLocalAdmin == true\n| where LogonType == \"Interactive\"\n| distinct AccountDomain, AccountName, DeviceName\n//Split domain from device name to match for local logons\n| extend Device = split(DeviceName, \".\")[0]\n| where Device == AccountDomain\n| summarize ['Local Accounts with Admin']=make_set(AccountName), ['Count of Admin Accounts']=dcount(AccountName) by DeviceName\n| sort by ['Count of Admin Accounts'] desc   ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-LocalUserswithAdmin",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2be91c09-875a-414f-bbd8-05920609325d",
        "query_hash": "bace5be5878cb2cccecf89eebcbbd0f8d81e4d80fbd666026ebb54297ded75d5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-msdtPotentialExploit.kql",
        "query": "//Detections based on the emerging information found here - https://twitter.com/nao_sec/status/1530196847679401984, https://twitter.com/GossiTheDog/status/1531018365606707206 and https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n//Microsoft Sentinel queries\n//Search your device process events for msdt.exe being generated by Outlook, Word or Excel - should be low noise and high value alerts, seems very rare behaviour\nDeviceProcessEvents\n| where ProcessCommandLine contains \"msdt.exe\" and InitiatingProcessCommandLine has_any (\"outlook.exe\", \"winword.exe\", \"excel.exe\") \n\n//Search your device process events for msdt.exe spawning processes other than itself\nDeviceProcessEvents\n| where InitiatingProcessCommandLine contains \"msdt.exe\" and ProcessCommandLine !contains \"msdt.exe\"\n\n//Likely to get false positives with msdt.exe spawning a process other than itself, so instead look for new events seen today for the first time based on distinct process and parent process\nDeviceProcessEvents\n| where TimeGenerated > ago (30d) and TimeGenerated < ago(1d)\n| project InitiatingProcessCommandLine, ProcessCommandLine\n| where InitiatingProcessCommandLine contains \"msdt.exe\" and ProcessCommandLine !contains \"msdt.exe\"\n| distinct InitiatingProcessCommandLine, ProcessCommandLine\n| join kind=rightanti \n    (\n    DeviceProcessEvents\n    | where TimeGenerated > ago (1d)\n    | where InitiatingProcessCommandLine contains \"msdt.exe\" and ProcessCommandLine !contains \"msdt.exe\"\n    )\n on InitiatingProcessCommandLine, ProcessCommandLine\n | project TimeGenerated, DeviceName, InitiatingProcessAccountName, InitiatingProcessCommandLine, ProcessCommandLine\n\n//Look for new public connections from \"sdiagnhost.exe\" or \"msdt.exe\" as per https://twitter.com/MalwareJake/status/1531088843792957442\n//\"sdiagnhost.exe\" legimitately connects to some internet endpoints as part of Microsoft telemetry so find events new to today to investigate\nlet knownips=\n    DeviceNetworkEvents\n    | where TimeGenerated > ago(30d) and TimeGenerated < ago(1d)\n    | where InitiatingProcessFileName has_any (\"sdiagnhost.exe\", \"msdt.exe\")\n    | where RemoteIPType == \"Public\"\n    | distinct RemoteIP;\nDeviceNetworkEvents\n| where TimeGenerated > ago(1d)\n| where InitiatingProcessFileName has_any (\"sdiagnhost.exe\", \"msdt.exe\")\n| where RemoteIPType == \"Public\"\n| where RemoteIP !in (knownips)\n| project\n    TimeGenerated,\n    ActionType,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessFileName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl\n\n\n\n//Advanced Hunting queries\n//Search your device process events for msdt.exe being generated by Outlook, Word or Excel - should be low noise and high value alerts, seems very rare behaviour\nDeviceProcessEvents\n| where ProcessCommandLine contains \"msdt.exe\" and InitiatingProcessCommandLine has_any (\"outlook.exe\", \"winword.exe\", \"excel.exe\") \n\n//Search your device process events for msdt.exe spawning processes other than itself\nDeviceProcessEvents\n| where InitiatingProcessCommandLine contains \"msdt.exe\" and ProcessCommandLine !contains \"msdt.exe\"\n\n//Likely to get false positives with msdt.exe spawning a process other than itself, so instead look for new events seen today for the first time based on distinct process and parent process\nDeviceProcessEvents\n| where Timestamp > ago (30d) and Timestamp < ago(1d)\n| project InitiatingProcessCommandLine, ProcessCommandLine\n| where InitiatingProcessCommandLine contains \"msdt.exe\" and ProcessCommandLine !contains \"msdt.exe\"\n| distinct InitiatingProcessCommandLine, ProcessCommandLine\n| join kind=rightanti \n    (\n    DeviceProcessEvents\n    | where Timestamp > ago (1d)\n    | where InitiatingProcessCommandLine contains \"msdt.exe\" and ProcessCommandLine !contains \"msdt.exe\"\n    )\n on InitiatingProcessCommandLine, ProcessCommandLine\n | project Timestamp, DeviceName, InitiatingProcessAccountName, InitiatingProcessCommandLine, ProcessCommandLine\n\n//Look for new public connections from \"sdiagnhost.exe\" or \"msdt.exe\" as per https://twitter.com/MalwareJake/status/1531088843792957442\n//\"sdiagnhost.exe\" legimitately connects to some internet endpoints as part of Microsoft telemetry so find events new to today to investigate\nlet knownips=\n    DeviceNetworkEvents\n    | where Timestamp > ago(30d) and Timestamp < ago(1d)\n    | where InitiatingProcessFileName has_any (\"sdiagnhost.exe\", \"msdt.exe\")\n    | where RemoteIPType == \"Public\"\n    | distinct RemoteIP;\nDeviceNetworkEvents\n| where Timestamp > ago(1d)\n| where InitiatingProcessFileName has_any (\"sdiagnhost.exe\", \"msdt.exe\")\n| where RemoteIPType == \"Public\"\n| where RemoteIP !in (knownips)\n| where RemoteUrl !endswith \".visualstudio.com\" and RemoteUrl !endswith \".microsoft.com\"\n| project\n    Timestamp,\n    ActionType,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessFileName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-msdtPotentialExploit",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3e314d12-61f2-47f1-9131-c2d81ff1b281",
        "query_hash": "29422817c01e81c39aa23f2d895674986f3a778ef34b357e9b7e7adf9c997f17",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-NewASREvents.kql",
        "query": "//Retrieve any new ASR alerts in your environment over the last week not previously seen in the prior 90 days and which devices have triggered them\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet timerange=90d;\nlet existingalerts=\nDeviceEvents\n| where TimeGenerated > ago (timerange) and TimeGenerated < ago(7d)\n| where ActionType startswith \"Asr\"\n| distinct ActionType;\n    DeviceEvents\n    | where TimeGenerated > ago(7d)\n    | where ActionType startswith \"Asr\"\n    | where ActionType !in (existingalerts)\n| summarize ['Device List']=make_set(DeviceName) by ActionType",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-NewASREvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "07844979-88d5-49c7-875d-1a12603447ca",
        "query_hash": "e5d3e98dff73ac9a0b0859e8092eed17de8d0c903a7235baf02d1fcd95e6c48c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-NewHashAccessingLSASS.kql",
        "query": "//Detect when a process with a hash not previously seen before in your environment accesses lsass.exe via an open process API call\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nlet knownhashes=\n    DeviceEvents\n    | where TimeGenerated > ago(30d) and TimeGenerated < ago (1d)\n    | where ActionType == \"OpenProcessApiCall\"\n    | where FileName == \"lsass.exe\"\n    | distinct InitiatingProcessSHA256;\nDeviceEvents\n| where TimeGenerated > ago (1d)\n| where ActionType == \"OpenProcessApiCall\"\n| where FileName == \"lsass.exe\"\n| where InitiatingProcessSHA256 !in (knownhashes)\n| extend DesiredAccess = tostring(AdditionalFields.DesiredAccess)\n| distinct\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    DesiredAccess\n\n//Detect when a process with a hash not previously seen before in your environment accesses lsass.exe via an open process API call\n\n//Data connector required for this query - Advanced Hunting license\n\n//Advanced Hunting query\nlet knownhashes=\n    DeviceEvents\n    | where Timestamp > ago(30d) and Timestamp < ago (1d)\n    | where ActionType == \"OpenProcessApiCall\"\n    | where FileName == \"lsass.exe\"\n    | distinct InitiatingProcessSHA256;\nDeviceEvents\n| where Timestamp > ago (1d)\n| where ActionType == \"OpenProcessApiCall\"\n| where FileName == \"lsass.exe\"\n| where InitiatingProcessSHA256 !in (knownhashes)\n| distinct DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    AdditionalFields",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-NewHashAccessingLSASS",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "33805510-309d-467f-b07b-b81174bd3751",
        "query_hash": "b4bc5dbe2500e3416e32ac2055f0380296243193dff3483acdf518783808b48c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-ParseURL.kql",
        "query": "//Use the inbuilt KQL parse_url function to return the various components of a URL\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where ActionType == \"BrowserLaunchedToOpenUrl\"\n| extend Url = parse_url(RemoteUrl)\n| extend Hostname = tostring(Url.Host)\n| extend Fragment = tostring(Url.Fragment)\n| extend Password = tostring(Url.Password)\n| extend Path = tostring(Url.Path)\n| extend Port = tostring(Url.Port)\n| extend Query = tostring(Url.Query)\n| extend Schema = tostring(Url.Scheme)\n| extend Username = tostring(Url.Username)\n| where isnotempty(Hostname)\n| project\n    TimeGenerated,\n    DeviceName,\n    RemoteUrl,\n    Schema,\n    Port,\n    Hostname,\n    Path,\n    Query,\n    Username,\n    Password,\n    Fragment",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ParseURL",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6931579e-227d-4889-a899-4b27b15646ed",
        "query_hash": "465ed7e234672abf9edf66e3a211e00c3966d26e584682ac1000a9f46b909332",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-PotentialDNSTunnelling.kql",
        "query": "//Identifies potential DNS tunnelling over HTTPS \n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where ActionType == \"NetworkSignatureInspected\"\n| extend AF = parse_json(AdditionalFields)\n| extend NetworkSignature = AF.SignatureName\n//Search for network signatures that are DNS but not on regular DNS ports including Netbios & LLMNR if those are in use\n| where NetworkSignature == \"DNS_Request\" and RemotePort !in (\"53\", \"137\", \"5353\", \"5355\")\n//Exclude traffic where the remote IP is a private/local IP address, you can remove this if also interested in that traffic\n| where not(ipv4_is_private(RemoteIP))\n| project\n    TimeGenerated,\n    DeviceName,\n    NetworkSignature,\n    LocalIP,\n    LocalPort,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where ActionType == \"NetworkSignatureInspected\"\n| extend AF = parse_json(AdditionalFields)\n| extend NetworkSignature = AF.SignatureName\n//Search for network signatures that are DNS but not on regular DNS ports including Netbios & LLMNR if those are in use\n| where NetworkSignature == \"DNS_Request\" and RemotePort !in (\"53\", \"137\", \"5353\", \"5355\")\n//Exclude traffic where the remote IP is a private/local IP address, you can remove this if also interested in that traffic\n| where not(ipv4_is_private(RemoteIP))\n| project\n    Timestamp,\n    DeviceName,\n    NetworkSignature,\n    LocalIP,\n    LocalPort,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-PotentialDNSTunnelling",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "71d9289e-f81a-4f82-b1f3-638eeb479c8d",
        "query_hash": "6e6bffc532dbde67b701a8ff54c122bfd079d62a4469ad3964bd5707ef515e64",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-PowershellConnectingtoInternet.kql",
        "query": "//Find users that are connecting to internet endpoints via PowerShell commands\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceNetworkEvents\n| project\n    TimeGenerated,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    DeviceName,\n    LocalIPType,\n    LocalIP,\n    RemoteIPType,\n    RemotePort,\n    RemoteIP,\n    RemoteUrl\n//Exclude system processes\n| where InitiatingProcessAccountName != \"system\"\n| where InitiatingProcessAccountName != \"local service\"\n| where InitiatingProcessCommandLine contains \"powershell\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl\n| sort by TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-PowershellConnectingtoInternet",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "44a8bb56-8987-4cc4-a2a8-acc7aa1f3a5f",
        "query_hash": "bcb34520f8f368f6eb52282281271dd24ce2172ba82523bb13a7a91ba5639ea5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-PowerShellExecutionModeChanged.kql",
        "query": "//Detect when a non system account changes the PowerShell execution policy on a device\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where ActionType == \"PowerShellCommand\"\n| where InitiatingProcessFileName == \"powershell.exe\"\n| where InitiatingProcessAccountName != \"system\"\n| where AdditionalFields.Command == \"Set-ExecutionPolicy\"\n| project TimeGenerated, DeviceName, InitiatingProcessAccountName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-PowerShellExecutionModeChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "097b2d16-f13b-4144-8ecb-3818749771e6",
        "query_hash": "12e6252726f594d3058c28e416a644d6ad13ac114b260f11dc086336593f2be2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-ProcessModifiedPrimaryToken.kql",
        "query": "//Find when a process modifies the primary access token and parse the relevant details such as any privilege attached to the token, whether it is system level and the token integrity level\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where TimeGenerated > ago(30m)\n| project\n    DeviceName,\n    ActionType,\n    AdditionalFields,\n    TimeGenerated,\n    InitiatingProcessParentFileName,\n    InitiatingProcessCommandLine\n| where ActionType == \"ProcessPrimaryTokenModified\"\n| extend TokenModificationProperties = AdditionalFields.TokenModificationProperties\n| where isnotempty(TokenModificationProperties)\n| parse TokenModificationProperties with * 'tokenChangeDescription\":\"' ['Token Change Description'] '\",\"privilegesFlags\":' ['Token Privileges'] ',\"isChangedToSystemToken\":' ['is Changed to System Token'] ',\"originalTokenIntegrityLevelName\":\"' ['Original Token Level'] '\",\"currentTokenIntegrityLevelName\":\"' ['Current Token Level'] '\"' *\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessParentFileName,\n    InitiatingProcessCommandLine,\n    ['Original Token Level'],\n    ['Current Token Level'],\n    ['Token Privileges'],\n    ['is Changed to System Token'],\n    ['Token Change Description']\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago(30m)\n| project\n    DeviceName,\n    ActionType,\n    AdditionalFields,\n    Timestamp,\n    InitiatingProcessParentFileName,\n    InitiatingProcessCommandLine\n| where ActionType == \"ProcessPrimaryTokenModified\"\n| extend AF = parse_json(AdditionalFields)\n| extend OriginalTokenLevel = AF.OriginalTokenIntegrityLevel\n| extend OriginalTokenPriv = AF.OriginalTokenPrivEnabled\n| extend CurrentTokenLevel = AF.CurrentTokenIntegrityLevel\n| extend CurrentTokenPriv = AF.CurrentTokenPrivEnabled\n| extend TokenModification = AF.TokenModificationProperties",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ProcessModifiedPrimaryToken",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6f80193a-1351-46cc-9c4d-a5ec6a69e05c",
        "query_hash": "23ad767912dddf0587e1a2fbcc285e01a2d24f7bf95e1a639f5021a21ef3b295",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-PublicPort22Allowed.kql",
        "query": "//Find successful connections from a private to public network on TCP port 22\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(1d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == 22\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| project\n    TimeGenerated,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(1d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == 22\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| project\n    Timestamp,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-PublicPort22Allowed",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "521b8f0e-bddb-447e-baf9-29e4431ccd00",
        "query_hash": "206161634e71f7160500bbf80194b9602024b2251fa49874e99284f6ae737506",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SSHTrafficOnNonStandardPort.kql",
        "query": "//Detect SSH traffic that isn't on port 22 connecting to public IP addresses\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microosft Sentinel query\nDeviceNetworkEvents\n| where ActionType == \"NetworkSignatureInspected\"\n| extend AF = parse_json(AdditionalFields)\n| extend NetworkSignature = AF.SignatureName\n//Search for network signatures that are SSH but not on port 22\n| where NetworkSignature == \"SSH\" and RemotePort != 22\n//Exclude traffic where the remote IP is a private/local IP address, you can remove this if also interested in that traffic\n| where not(ipv4_is_private(RemoteIP))\n| project\n    TimeGenerated,\n    DeviceName,\n    NetworkSignature,\n    LocalIP,\n    LocalPort,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where ActionType == \"NetworkSignatureInspected\"\n| extend AF = parse_json(AdditionalFields)\n| extend NetworkSignature = AF.SignatureName\n//Search for network signatures that are SSH but not on port 22\n| where NetworkSignature == \"SSH\" and RemotePort != 22\n//Exclude traffic where the remote IP is a private/local IP address, you can remove this if also interested in that traffic\n| where not(ipv4_is_private(RemoteIP))\n| project\n    Timestamp,\n    DeviceName,\n    NetworkSignature,\n    LocalIP,\n    LocalPort,\n    RemoteIP,\n    RemotePort,\n    RemoteUrl",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SSHTrafficOnNonStandardPort",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6c0551df-ff06-4d85-9b6a-35581000ed45",
        "query_hash": "ca61d003d5aeb70a97fcbbb394adbc934daade2279ced53a47e3d2b01a13e049",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeLDAPandLDAPStraffic.kql",
        "query": "//Create a summary of the devices with inbound LDAP and LDAPS connections, sorted by the devices with the most inbound LDAP\n\n//Data connector required for this query - M365 Defender - Device* tables or Advanced Hunting license\n\n//Query works in both Microsoft Sentinel and Advanced Hunting\nDeviceNetworkEvents\n| where ActionType == \"InboundConnectionAccepted\"\n| where LocalPort in (\"389\", \"636\", \"3269\")\n| summarize\n    ['Count of Inbound LDAP Connections']=countif(LocalPort == 389),\n    ['Count of Distinct Inbound LDAP Connections']=dcountif(RemoteIP, LocalPort == 389),\n    ['List of Inbound LDAP Connections']=make_set_if(RemoteIP, LocalPort == 389),\n    ['Count of Inbound LDAPS Connections']=countif(LocalPort in (\"636\", \"3269\")),\n    ['Count of Distinct Inbound LDAPS Connections']=dcountif(RemoteIP, LocalPort in (\"636\", \"3269\")),\n    ['List of Inbound LDAPS Connections']=make_set_if(RemoteIP, LocalPort in (\"636\", \"3269\"))\n    by DeviceName\n| sort by ['Count of Distinct Inbound LDAP Connections'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeLDAPandLDAPStraffic",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f699a3a6-2477-4b6a-b934-6c27fcc7985c",
        "query_hash": "1fb3d2ab30e1d277d458e70957316e7a68d7f82a513c6f6ae20a7c76eb4d9ace",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeLocalGroupAdditions.kql",
        "query": "//Summarize the total count of all local group additions by group name\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType == \"UserAccountAddedToLocalGroup\"\n| summarize ['Local Group Addition Count']=count() by ['Local Group Name']=tostring(AdditionalFields.GroupName)\n| sort by ['Local Group Addition Count']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeLocalGroupAdditions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d75cc603-0536-4dcc-a486-71936e576ea9",
        "query_hash": "b88691dffe1e58b1bd1180c727b54d8333b1fed8b78b32b16a7195a19c9e201b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeLocalLogonActivity.kql",
        "query": "//Summarize the local (non domain) logon activity for your devices for both successful and failed logons. You may have users using a local account to bypass security policy\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceLogonEvents\n| where TimeGenerated > ago(30d)\n//Find logons where AccountDomain == DeviceName indicating a local logon\n| where AccountDomain == DeviceName\n| where AdditionalFields.IsLocalLogon == true\n| where LogonType == \"Interactive\"\n| where RemoteIPType != \"Loopback\"\n| summarize\n    ['Count of successful local logon attempts']=countif(ActionType == \"LogonSuccess\"),\n    ['Distinct count of successful local logon attempts']=dcountif(AccountName, ActionType == \"LogonSuccess\"),\n    ['List of succesful local account logons']=make_set_if(AccountName, ActionType == \"LogonSuccess\"),\n    ['Count of failed local logon attempts']=countif(ActionType == \"LogonFailed\"),\n    ['Distinct count of failed local logon attempts']=dcountif(AccountName, ActionType == \"LogonFailed\"),\n    ['List of failed local account logons']=make_set_if(AccountName, ActionType == \"LogonFailed\")\n    by DeviceName\n| project-reorder\n    DeviceName,\n    ['Count of successful local logon attempts'],\n    ['Distinct count of successful local logon attempts'],\n    ['List of succesful local account logons'],\n    ['Count of failed local logon attempts'],\n    ['Distinct count of failed local logon attempts'],\n    ['List of failed local account logons']\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceLogonEvents\n| where Timestamp > ago(30d)\n| where AccountDomain == DeviceName\n| where LogonType == @\"Interactive\"\n| where RemoteIPType != \"Loopback\"\n| summarize\n    ['Count of successful local logon attempts']=countif(ActionType == \"LogonSuccess\"),\n    ['Distinct count of successful local logon attempts']=dcountif(AccountName, ActionType == \"LogonSuccess\"),\n    ['List of succesful local account logons']=make_set_if(AccountName, ActionType == \"LogonSuccess\"),\n    ['Count of failed local logon attempts']=countif(ActionType == \"LogonFailed\"),\n    ['Distinct count of failed local logon attempts']=dcountif(AccountName, ActionType == \"LogonFailed\"),\n    ['List of failed local account logons']=make_set_if(AccountName, ActionType == \"LogonFailed\")\n    by DeviceName\n| project-reorder\n    DeviceName,\n    ['Count of successful local logon attempts'],\n    ['Distinct count of successful local logon attempts'],\n    ['List of succesful local account logons'],\n    ['Count of failed local logon attempts'],\n    ['Distinct count of failed local logon attempts'],\n    ['List of failed local account logons']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeLocalLogonActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "317bf5ec-bb64-4a5d-aeb7-40c3a808e91d",
        "query_hash": "5d5cb7a4f5e4c194632f2cd1efffbccf0c6acd6667d165768cb13cd86826ea60",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeMacroUsage.kql",
        "query": "//Summarize macro usage on your devies by creating a list all macros used, a count of how many users are using each one and the account names\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Macro usage may be double counted if the same file is executed from two locations, i.e from a network share and a local drive.\n//Microsoft Sentinel query\nunion DeviceFileEvents, DeviceNetworkEvents\n| where TimeGenerated > ago(30d)\n| project InitiatingProcessCommandLine, InitiatingProcessAccountName\n| where InitiatingProcessCommandLine startswith '\"EXCEL.EXE'  \n| where InitiatingProcessCommandLine endswith '.xltm\"' or InitiatingProcessCommandLine endswith '.xlsm\"'\n//Retrieve distinct values for process, hash and account\n| distinct InitiatingProcessCommandLine, InitiatingProcessAccountName\n//Parse the file path and file name from the process\n| parse-where InitiatingProcessCommandLine with * '\"EXCEL.EXE\" \"' ['Macro Filename'] '\"' *\n//Summarize the list of macro files by which users have used them\n| summarize ['List of Users']=make_set(InitiatingProcessAccountName), ['Count of Users']=dcount(InitiatingProcessAccountName) by ['Macro Filename']\n| sort by ['Count of Users'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nunion DeviceFileEvents, DeviceNetworkEvents\n| where Timestamp > ago(30d)\n| project InitiatingProcessCommandLine, InitiatingProcessAccountName\n| where InitiatingProcessCommandLine startswith '\"EXCEL.EXE'  \n| where InitiatingProcessCommandLine endswith '.xltm\"' or InitiatingProcessCommandLine endswith '.xlsm\"'\n//Retrieve distinct values for process, hash and account\n| distinct InitiatingProcessCommandLine, InitiatingProcessAccountName\n//Parse the file path and file name from the process\n| parse-where InitiatingProcessCommandLine with * '\"EXCEL.EXE\" \"' ['Macro Filename'] '\"' *\n//Summarize the list of macro files by which users have used them\n| summarize ['List of Users']=make_set(InitiatingProcessAccountName), ['Count of Users']=dcount(InitiatingProcessAccountName) by ['Macro Filename']\n| sort by ['Count of Users'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeMacroUsage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "10392600-cab0-4794-9c3d-b8f49f26d17c",
        "query_hash": "8b63c551b746a4c8f773af75c7aaf08f2a767e507e45c74052640226a95f3f14",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeRDPConnections.kql",
        "query": "//Summarize your devices by their RDP activity. The data is sorted to show total outbound RDP connections, a count of distinct RDP connections and the list of IP's connected to.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Data is sorted by the devices with the most unique outbound RDP connections. Those devices have the biggest lateral movement blast radius.\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(30d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n//Exclude Defender for Identity that uses an initial RDP connection to map your network\n| where InitiatingProcessCommandLine <> \"\\\"Microsoft.Tri.Sensor.exe\\\"\"\n| summarize\n    ['RDP Outbound Connection Count']=count(),\n    ['RDP Distinct Outbound Endpoint Count']=dcount(RemoteIP),\n    ['RDP Outbound Endpoints']=make_set(RemoteIP)\n    by DeviceName\n| sort by ['RDP Distinct Outbound Endpoint Count'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(30d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n//Exclude Defender for Identity that uses an initial RDP connection to map your network\n| where InitiatingProcessCommandLine <> \"\\\"Microsoft.Tri.Sensor.exe\\\"\"\n| summarize\n    ['RDP Outbound Connection Count']=count(),\n    ['RDP Distinct Outbound Endpoint Count']=dcount(RemoteIP),\n    ['RDP Outbound Endpoints']=make_set(RemoteIP)\n    by DeviceName\n| sort by ['RDP Distinct Outbound Endpoint Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeRDPConnections",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2fa11654-ce7b-4452-9646-700afce24375",
        "query_hash": "8c2fca65cd7884333babfb8166724b4c2c9ecc15d1b16a4e38d4ce285e56fd99",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeSmartScreenPhishingDomains.kql",
        "query": "//Summarize the domains that Smartscreen is blocking as phishing attempts\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType startswith \"SmartScreen\"\n| extend SmartScreenExperience = tostring(AdditionalFields.Experience)\n| where AdditionalFields.Experience == \"Phishing\"\n| parse-where RemoteUrl with * '://' RemoteDomain '/' *\n| summarize Count=count()by RemoteDomain\n| sort by Count",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeSmartScreenPhishingDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "86d2dca4-9a80-40ec-8ddd-169e79dcd1c7",
        "query_hash": "458fa163a6ff1ebc1394b6cc018b00914e28990d668e351c87164346dabae8f6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeSmartScreenUntrustedFiles.kql",
        "query": "//Summarize the most common files in your environment flagging Smartscreen untrusted warnings\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType startswith \"SmartScreen\"\n| extend SmartScreenExperience = tostring(AdditionalFields.Experience)\n| where SmartScreenExperience == \"Untrusted\"\n| summarize Count=count()by FileName\n| sort by Count\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago(30d)\n| where ActionType startswith \"SmartScreen\"\n| where AdditionalFields == @\"{\"\"Experience\"\":\"\"Untrusted\"\"}\"\n| summarize Count=count()by FileName\n| sort by Count",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeSmartScreenUntrustedFiles",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "22cede26-bfa2-4764-ad9b-c9409bd0be9e",
        "query_hash": "0a5331f605f6b227c10456b3cbb19878327fe507660a385515e0c040c4ab374b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummarizeSSHPortOpenedInbound.kql",
        "query": "//Find any devices enrolled into Defender that have created an inbound listening connection on port 22 and retrieve the process command line that opened the connection\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(7d)\n| where ActionType == \"ListeningConnectionCreated\"\n| where LocalPort == 22\n| summarize\n    ['Total count of listening connections opened']=count(),\n    ['List of processes creating listening connections']=make_set(InitiatingProcessCommandLine)\n    by DeviceName\n| sort by ['Total count of listening connections opened'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"ListeningConnectionCreated\"\n| where LocalPort == 22\n| summarize\n    ['Total count of listening connections opened']=count(),\n    ['List of processes creating listening connections']=make_set(InitiatingProcessCommandLine)\n    by DeviceName\n| sort by ['Total count of listening connections opened'] desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummarizeSSHPortOpenedInbound",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "200d85d1-60e0-4fae-a218-b551a509fbdb",
        "query_hash": "795a7c9bad5f3cba4f291c5ba04b46a65cadf65c86cf6a86fde6c56e21450043",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-SummaryofDeviceLogons.kql",
        "query": "//Create a summary of each device showing all users who have logged on, separated into normal and local admin logons\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceLogonEvents\n| where TimeGenerated > ago(30d)\n| project DeviceName, ActionType, LogonType, AdditionalFields, InitiatingProcessCommandLine, AccountName, IsLocalAdmin\n| where ActionType == \"LogonSuccess\"\n| where LogonType == \"Interactive\"\n| where AdditionalFields.IsLocalLogon == true\n| where InitiatingProcessCommandLine == \"lsass.exe\"\n| summarize\n    ['Local Admin Count']=dcountif(AccountName,IsLocalAdmin == \"true\"),\n    ['Local Admins']=make_set_if(AccountName, IsLocalAdmin == \"true\"), \n    ['Standard User Count']=dcountif(AccountName, IsLocalAdmin == \"false\"),\n    ['Standard Users']=make_set_if(AccountName, IsLocalAdmin == \"false\")\n    by DeviceName\n| sort by ['Local Admin Count'] desc  \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceLogonEvents\n| where Timestamp > ago(30d)\n| project DeviceName, ActionType, LogonType, AdditionalFields, InitiatingProcessCommandLine, AccountName, IsLocalAdmin\n| where ActionType == \"LogonSuccess\"\n| where LogonType == \"Interactive\"\n| where InitiatingProcessCommandLine == \"lsass.exe\"\n| summarize\n    ['Local Admin Count']=dcountif(AccountName,IsLocalAdmin == \"true\"),\n    ['Local Admins']=make_set_if(AccountName, IsLocalAdmin == \"true\"), \n    ['Standard User Count']=dcountif(AccountName, IsLocalAdmin == \"false\"),\n    ['Standard Users']=make_set_if(AccountName, IsLocalAdmin == \"false\")\n    by DeviceName\n| sort by ['Local Admin Count'] desc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SummaryofDeviceLogons",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "71430800-af47-4c22-9128-fa05f55c030c",
        "query_hash": "74be4a137b0eb4cf831558e729972ad22cfaf06c00f7da26cfc7ca98e67c8242",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-Top20DepartmentsCopyingDatatoUSBbyCount.kql",
        "query": "//Top 20 departments copying file data to USB drives by file count\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet id=\nIdentityInfo\n| where TimeGenerated > ago (21d)\n| summarize arg_max(TimeGenerated, *) by AccountName\n| extend LoggedOnUser = AccountName\n| project LoggedOnUser, AccountUPN, JobTitle, EmployeeId, Country, City, Department, AccountDisplayName\n| join kind=inner (\nDeviceInfo\n| where TimeGenerated > ago (21d)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| extend LoggedOnUser = tostring(LoggedOnUsers[0].UserName)\n) on LoggedOnUser\n| project LoggedOnUser, AccountUPN, JobTitle, Country, DeviceName, EmployeeId, Department, AccountDisplayName;\nDeviceEvents\n| where TimeGenerated > ago(7d)\n| join kind=inner id on DeviceName\n| where ActionType == \"UsbDriveMounted\"\n| extend Type = tostring(AdditionalFields.Manufacturer)\n| extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n| join kind=inner (DeviceFileEvents\n| where TimeGenerated > ago(7d)\n| extend FileCopyTime = TimeGenerated\n| where ActionType == \"FileCreated\"\n| parse FolderPath with DriveLetter '\\\\' *\n| extend DriveLetter = tostring(DriveLetter)\n) on DeviceId, DriveLetter\n| extend FileSizeGB = FileSize/1024/1024/1000\n| project TimeGenerated, DeviceName, DriveLetter, FileName1, FileSizeGB, LoggedOnUser, AccountUPN, JobTitle,EmployeeId, Country, Department, Type, AccountDisplayName\n| summarize CopyCount=count()by Department\n| order by CopyCount\n| take 20\n| render columnchart \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-Top20DepartmentsCopyingDatatoUSBbyCount",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "08d893c0-6c38-4012-b553-9ae7ff0412b2",
        "query_hash": "9b90f93ea2c43ca4276bc5e1905ab617db2fb556bf552af863487b28b406e664",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-Top20DepartmentsCopyingDatatoUSBbySize.kql",
        "query": "//Top 20 departments copying file data to USB drives by file size\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet id=\nIdentityInfo\n| where TimeGenerated > ago (21d)\n| summarize arg_max(TimeGenerated, *) by AccountName\n| extend LoggedOnUser = AccountName\n| project LoggedOnUser, AccountUPN, JobTitle, EmployeeId, Country, City, Department, AccountDisplayName\n| join kind=inner (\nDeviceInfo\n| where TimeGenerated > ago (21d)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| extend LoggedOnUser = tostring(LoggedOnUsers[0].UserName)\n) on LoggedOnUser\n| project LoggedOnUser, AccountUPN, JobTitle, Country, DeviceName, EmployeeId, Department, AccountDisplayName;\nDeviceEvents\n| where TimeGenerated > ago(7d)\n| join kind=inner id on DeviceName\n| where ActionType == \"UsbDriveMounted\"\n| extend Type = tostring(AdditionalFields.Manufacturer)\n| extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n| join kind=inner (DeviceFileEvents\n| where TimeGenerated > ago(7d)\n| extend FileCopyTime = TimeGenerated\n| where ActionType == \"FileCreated\"\n| parse FolderPath with DriveLetter '\\\\' *\n| extend DriveLetter = tostring(DriveLetter)\n) on DeviceId, DriveLetter\n| extend FileSizeGB = FileSize/1024/1024/1000\n| project TimeGenerated, DeviceName, DriveLetter, FileName1, FileSizeGB, LoggedOnUser, AccountUPN, JobTitle,EmployeeId, Country, Department, Type, AccountDisplayName\n| summarize CopySize=sum(FileSizeGB)by Department\n| order by CopySize\n| take 20\n| render columnchart \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-Top20DepartmentsCopyingDatatoUSBbySize",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "53f3f6f3-2305-4cc9-84fd-f1a9e75aa161",
        "query_hash": "4fe03ea6489d6152ff7afdebe79d95405bed4f8c41804a24b3bc3e6e4c3b7c3b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-Top20RandomActions.kql",
        "query": "//Find the top 20 of a collection of varied data sets, no real detections in here just interesting data that is captured\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsft Sentinel query\n\n//Top 20 USB models plugged in\nDeviceEvents\n| where ActionType == \"UsbDriveMounted\"\n| extend Manufacturer = tostring(AdditionalFields.Manufacturer)\n| extend ProductName = tostring(AdditionalFields.ProductName)\n| where isnotempty(Manufacturer) or isnotempty(Manufacturer)\n| extend ['USB Drive Model']= strcat(Manufacturer, \"-\", ProductName)\n| summarize Count=count()by ['USB Drive Model']\n| top 20 by Count\n\n//Top 20 users taking screenshots\nDeviceEvents\n| where ActionType == \"ScreenshotTaken\"\n| where InitiatingProcessAccountName != \"system\"\n| summarize Count=count() by InitiatingProcessAccountName\n| top 20 by Count\n\n//Top 20 models of monitor being plugged in\nDeviceEvents\n| where ActionType == \"PnpDeviceConnected\"\n| extend ClassName = tostring(AdditionalFields.ClassName)\n| where ClassName == \"Monitor\"\n| extend ['Monitor Type'] = tostring(AdditionalFields.DeviceDescription)\n| summarize Count=count()by ['Monitor Type']\n| top 20 by Count\n\n//Top 20 web shortcuts opened\nDeviceEvents\n| where ActionType == \"BrowserLaunchedToOpenUrl\"\n| summarize Count=count()by RemoteUrl\n| where RemoteUrl startswith \"http\"\n| top 20 by Count\n\n\n//Advanced Hunting queries\n\n//Data connector required for this query - Advanced Hunting license\n\n//Top 20 USB models plugged in\nDeviceEvents\n| where ActionType == \"UsbDriveMounted\"\n| extend AF = parse_json(AdditionalFields)\n| extend Manufacturer = tostring(AF.Manufacturer)\n| extend ProductName = tostring(AF.ProductName)\n| where isnotempty(Manufacturer) or isnotempty(Manufacturer)\n| extend ['USB Drive Model']= strcat(Manufacturer, \"-\", ProductName)\n| summarize Count=count()by ['USB Drive Model']\n| top 20 by Count\n\n//Top 20 users taking screenshots\nDeviceEvents\n| where ActionType == \"ScreenshotTaken\"\n| where InitiatingProcessAccountName != \"system\"\n| summarize Count=count() by InitiatingProcessAccountName\n| top 20 by Count\n\n//Top 20 models of monitor being plugged in\nDeviceEvents\n| where ActionType == \"PnpDeviceConnected\"\n| extend AF = parse_json(AdditionalFields)\n| extend ClassName = tostring(AF.ClassName)\n| where ClassName == \"Monitor\"\n| extend ['Monitor Type'] = tostring(AF.DeviceDescription)\n| summarize Count=count()by ['Monitor Type']\n| top 20 by Count\n\n//Top 20 web shortcuts opened\nDeviceEvents\n| where ActionType == \"BrowserLaunchedToOpenUrl\"\n| summarize Count=count()by RemoteUrl\n| where RemoteUrl startswith \"http\"\n| top 20 by Count",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-Top20RandomActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6158ecb9-4601-49b6-87ad-afb77308f77c",
        "query_hash": "569a15b10dc4625bc4fa8c1c841d131064bdda993336a2db87e78a1e8b465ba8",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-UserAddedasLocalAdmin.kql",
        "query": "//Detect when an admin adds another user to the local administrators group on a device and optionally query IdentityInfo to return the UPN of the user added\n\n//Data connector required for this query - M365 Defender - Device* tables\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nDeviceEvents\n| where TimeGenerated > ago(7d)\n| where ActionType == \"UserAccountAddedToLocalGroup\"\n| where AdditionalFields.GroupName == \"Administrators\"\n// Exclude processes initiated by system as this detection is for end users adding groups\n| where InitiatingProcessAccountSid != \"S-1-5-18\"\n| project\n    TimeGenerated,\n    DeviceName,\n    AccountSid,\n    Actor=InitiatingProcessAccountName\n//Join query to IdentityInfo table to match the AccountSid\n//if you do not use the IdentityInfo table remove everything below this line\n| join kind=inner (\n    IdentityInfo\n    | where TimeGenerated > ago (21d)\n    | summarize arg_max (TimeGenerated, *) by AccountUPN)\n    on $left.AccountSid == $right.AccountSID\n| project\n    TimeGenerated,\n    DeviceName,\n    ['User Added']=AccountUPN,\n    ['User Added Sid']=AccountSID,\n    Actor\n\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceEvents\n| where Timestamp > ago(30d)\n| where ActionType == \"UserAccountAddedToLocalGroup\"\n| where AdditionalFields contains \"Administrator\"\n| where InitiatingProcessAccountSid != \"S-1-5-18\"\n| project DeviceName, Actor=InitiatingProcessAccountName, AccountSid\n| join kind=inner (\nIdentityInfo\n)\non $left.AccountSid==$right.OnPremSid\n| project DeviceName, Actor, AccountSid, UserAdded=AccountUpn",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-UserAddedasLocalAdmin",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ad853cf4-132d-4799-b69d-78ffd9fbdbf1",
        "query_hash": "6bec071153a97168e63308c67933fee5baf08a53bd02bb8735e6c7b047caa11b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeASREventswithtrend.kql",
        "query": "//Visualize your total attack surface reduction rule events over time with trend\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet StartDate = now(-90d);\nlet EndDate = now();\nDeviceEvents\n| where ActionType startswith \"Asr\"\n| make-series ['Total ASR Events']=count() on TimeGenerated in range(StartDate, EndDate, 1d)\n| extend (RSquare, SplitIdx, Variance, RVariance, TrendLine)=series_fit_2lines(['Total ASR Events'])\n| project TimeGenerated, ['Total ASR Events'], Trend=TrendLine\n| render timechart\n    with (\n    xtitle=\"Day\",\n    ytitle=\"Count of ASR Events\",\n    title=\"Attack surface reduction events over time with trend\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeASREventswithtrend",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "905680bf-ca6a-47fa-ac07-3b3f7a868e7c",
        "query_hash": "6564c9134041994dba6a07edc79afe20f75d17711e21e5fc467f3503a140b32f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeMaliciousSmartScreenURLs.kql",
        "query": "//Visualize the most common domains triggering Microsoft Defender SmartScreen warnings\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where TimeGenerated > ago (30d)\n| where ActionType == \"SmartScreenUrlWarning\"\n| parse RemoteUrl with * '://' Domain '/' *\n| where isnotempty(Domain)\n| summarize Count=count()by Domain\n| sort by Count\n| render barchart  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeMaliciousSmartScreenURLs",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8ebed26c-15e3-4df1-bd06-9b7e075929fd",
        "query_hash": "52bd39e8771da65554ba02447671085543753657a98975c550195182c22337c5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeMostCommonISOFiles.kql",
        "query": "//Visualize the most common ISO files being mounted on your devices\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceFileEvents\n| where TimeGenerated > ago(30d)\n| where ActionType == \"FileCreated\"\n//When an ISO file is mounted a .iso.lnk file is created, take that name and trim the .lnk out to retrieve the ISO name\n| where FileName endswith \"iso.lnk\"\n| extend ['ISO FileName'] = trim(@\".lnk\",FileName)\n//Summarize and visualize the files\n| summarize Count=count() by ['ISO FileName']\n| top 20 by Count\n| render barchart with (title=\"Most common ISO files being mounted\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceFileEvents\n| where Timestamp > ago(30d)\n| where ActionType == \"FileCreated\"\n//When an ISO file is mounted a .iso.lnk file is created, take that name and trim the .lnk out to retrieve the ISO name\n| where FileName endswith \"iso.lnk\"\n| extend ['ISO FileName'] = trim(@\".lnk\",FileName)\n//Summarize and visualize the files\n| summarize Count=count() by ['ISO FileName']\n| top 20 by Count\n| render columnchart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeMostCommonISOFiles",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4d19d3dc-0b36-4b6d-b5ac-1f66d51fe0ef",
        "query_hash": "88e376cb3d9d6102fb86a175fa46170033d06464b9aa92b70ba7377c359b304a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeOSBuildspermonth.kql",
        "query": "//Visualize the OS build numbers of your Windows 10 and 11 devices per month over the last year\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceInfo\n| where TimeGenerated > ago(365d)\n| where OSPlatform in (\"Windows10\", \"Windows11\")\n| extend OSBuildNumber=tostring(OSBuild)\n| summarize arg_max(TimeGenerated, *) by DeviceName, startofmonth(TimeGenerated)\n| summarize count()by OSBuildNumber, startofmonth(TimeGenerated)\n| where isnotempty(OSBuildNumber)\n| render areachart \n    with (\n    ytitle=\"Device Count\",\n    xtitle=\"Month\",\n    title=\"Count of Windows 10 and 11 OS Builds per month\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeOSBuildspermonth",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d08a9081-0ae5-4703-976e-7c1e1d7bcdb0",
        "query_hash": "e1ad5f8750f7a1313de4dc4edab2ec223c0ebc1337bfa06601cc5f1a2a9bcbd3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizePort22Proccesses.kql",
        "query": "//Summarize and visualize the different parent filenames initiating TCP port 22 connections\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(30d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == 22\n| where isnotempty(InitiatingProcessFileName)\n| summarize Count=count() by InitiatingProcessFileName\n| top 20 by Count\n| render barchart with (title=\"Proccesses initiating TCP port 22 connections\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(30d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == 22\n| where isnotempty(InitiatingProcessFileName)\n| summarize Count=count() by InitiatingProcessFileName\n| top 20 by Count\n//Advanced hunting doesn't support barcharts, so can render as a piechart or just remove the line below for a table\n| render piechart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizePort22Proccesses",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "53d69d14-e49b-4925-9ff6-3625ca8c4377",
        "query_hash": "3f58cf2c51ccf307998e05e788e98759e85ec51bd6c27c502c2ba04b8cd3fa1e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeRDPClients.kql",
        "query": "//Visualize the different RDP clients, such as rMemoteNG or RoyalTS being used in your environment\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago(7d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n//Exclude Defender for Identity which uses RDP traffic to map your network\n| where InitiatingProcessFileName != \"Microsoft.Tri.Sensor.exe\"\n| summarize ['RDP Client Count']=count()by InitiatingProcessFileName\n| where isnotempty(InitiatingProcessFileName)\n| sort by ['RDP Client Count'] desc\n| render barchart \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"ConnectionSuccess\"\n| where RemotePort == \"3389\"\n//Exclude Defender for Identity which uses RDP traffic to map your network\n| where InitiatingProcessFileName != \"Microsoft.Tri.Sensor.exe\"\n| summarize ['RDP Client Count']=count()by InitiatingProcessFileName\n| where isnotempty(InitiatingProcessFileName)\n| sort by ['RDP Client Count'] desc\n| render barchart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeRDPClients",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "180612d7-745e-46ec-9754-6b6da2ef991c",
        "query_hash": "1c91c26ed73bf682b0334d4428c997f2e611c36a122253bfaa76064f764beb58",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeRemotePowerShellURLs.kql",
        "query": "//Visualize the top 20 remote URLs that your users are connecting to via PowerShell\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n//Exclude system and local service processes as this visualization is user focused\n| where InitiatingProcessAccountName !in~ (\"system\", \"local service\")\n| where InitiatingProcessCommandLine has \"powershell\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| summarize Count=count()by RemoteUrl\n| where isnotempty(RemoteUrl)\n| top 20 by Count\n| render barchart with (title=\"Remote URLs accessed by Powershell\")\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceNetworkEvents\n| where Timestamp > ago (7d)\n//Exclude system and local service processes as this visualization is user focused\n| where InitiatingProcessAccountName !in~ (\"system\", \"local service\")\n| where InitiatingProcessCommandLine has \"powershell\"\n| where LocalIPType == \"Private\"\n| where RemoteIPType == \"Public\"\n| summarize Count=count()by RemoteUrl\n| where isnotempty(RemoteUrl)\n| top 20 by Count\n//Advanced Hunting does not support barcharts so you can visualize as a piechart or simply remove this line for a table\n| render piechart with (title=\"Remote URLs accessed by Powershell\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeRemotePowerShellURLs",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "986ab6ff-b113-49b0-a0e2-7c2b82b523d1",
        "query_hash": "46f5d698c6082ade86c561b2d393c3afea37f7c4f4548b15151ef0fac2bf33a3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-VisualizeVolumeofDataCopiedtoUSB.kql",
        "query": "//Visualize how much data is being copied to USB drives per day in your environment over the time range.\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceEvents\n| where TimeGenerated > ago (21d)\n| project TimeGenerated, ActionType, AdditionalFields, DeviceId, FileName\n| where ActionType == \"UsbDriveMounted\"\n| extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n| join kind=inner (DeviceFileEvents\n    | where TimeGenerated > ago (21d)\n    | project TimeGenerated, ActionType, FolderPath, DeviceId, FileName, FileSize\n    | extend FileCopyTime = TimeGenerated\n    | where ActionType == \"FileCreated\"\n    | parse FolderPath with DriveLetter '\\\\' *\n    | extend DriveLetter = tostring(DriveLetter)\n    )\n    on DeviceId, DriveLetter\n| distinct FileCopyTime, FileName1, FileSize\n| summarize DataCopiedinGB=sum(FileSize / 1024 / 1024 / 1024) by startofday(FileCopyTime)\n| render columnchart\n    with (\n    kind=unstacked,\n    xtitle=\"Data Copied in GB\",\n    ytitle=\"Day\",\n    title=\"Data Copied to USB per day\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeVolumeofDataCopiedtoUSB",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "df5d3687-e67a-49e5-b4ad-64bb9ca74387",
        "query_hash": "8228b341ec3d61668cfacf4124232f1e9d5fef0b6e8a68b28e7c76b7e7d15c3d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-Windows11DevicesandUsers.kql",
        "query": "//Finds Windows 11 devices enrolled in Defender for Endpoint and the last user who logged on interactively\n\n//Data connector required for this query - M365 Defender - Device* tables\n\nDeviceInfo\n| where TimeGenerated > ago(60d)\n| where isnotempty( OSPlatform)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| extend OSBuildString = tostring(OSBuild)\n| where OSPlatform == \"Windows11\" or OSBuildString startswith \"22\" or OSBuildString startswith \"21\"\n| project DeviceName, OSBuild, OSPlatform, OSVersion\n|join kind=inner (\nDeviceLogonEvents\n| where LogonType == \"Interactive\"\n| where ActionType == \"LogonSuccess\"\n| where InitiatingProcessCommandLine == \"lsass.exe\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n) on DeviceName\n| project DeviceName, AccountName, OSBuild, OSPlatform, OSVersion",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-Windows11DevicesandUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4494a571-ea72-436d-abc4-89a564ead139",
        "query_hash": "22e3eebe37f02dbe3044a7dbd08e4d5cb445309e904e31e616637ea20a5c8af2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CDevice-WindowsVersionPivotTable.kql",
        "query": "//Create a pivot table of all Windows OS versions in your environment\n\n//Data connector required for this query - M365 Defender - Device* tables\n\n//Microsoft Sentinel query\nDeviceInfo\n| where TimeGenerated > ago(30d)\n| where isnotempty(OSBuild)\n| summarize arg_max(TimeGenerated, *) by DeviceId\n| where isnotempty(OSPlatform)\n| evaluate pivot(OSBuild, count(), OSPlatform)\n| where OSPlatform contains \"Windows\"\n| sort by OSPlatform desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nDeviceInfo\n| where Timestamp > ago(30d)\n| where isnotempty(OSBuild)\n| summarize arg_max(Timestamp, *) by DeviceName\n| where isnotempty(OSPlatform)\n| evaluate pivot(OSBuild, count(), OSPlatform)\n| where OSPlatform contains \"Windows\"\n| sort by OSPlatform desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-WindowsVersionPivotTable",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5816bd8d-b607-4b22-b0d7-20348ba8bfd0",
        "query_hash": "d8ee72cdb8e4c5274654114eaebae2472d933b2f9cf3ba64fd59df935a19b111",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CVuln-CVE-2021-40444.kql",
        "query": "//CVE-2021-40444 hunting. Find device mshtml image load events initiated by common Office executables, then retrieve process events from the device in the same time period where the initiating process is an Office executable, but the process is different\n\n//Data connector required for this query - M365 Defender - Device* tables or Advanced Hunting license\n\nlet process = dynamic([\"winword.exe\", \"wordview.exe\", \"wordpad.exe\", \"powerpnt.exe\", \"excel.exe\"]);\nDeviceImageLoadEvents\n| where FileName in (\"mshtml.dll\", \"Microsoft.mshtml.dll\")\n| where InitiatingProcessFileName in~ (process) \n| project ImageLoadTime=TimeGenerated, DeviceName, InitiatingProcessFolderPath, \n    InitiatingProcessParentFileName, InitiatingProcessParentCreationTime, \n    InitiatingProcessCommandLine\n| join kind=inner (\n    DeviceProcessEvents)\n    on DeviceName\n| extend ProcessTime = TimeGenerated\n| extend FileNameLower = tolower(FileName)\n| extend InitiatingFileNameLower = tolower(InitiatingProcessFileName)\n| where InitiatingProcessFileName in~ (process)\n| where FileNameLower != InitiatingFileNameLower\n| where ProcessTime between ((ImageLoadTime-timespan(5min)).. (ImageLoadTime+timespan(5min)))\n| project ImageLoadTime, ProcessTime, DeviceName, InitiatingProcessFileName, FileName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Vuln-CVE-2021-40444",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "316be517-95f7-47c5-b630-dddaa8722eed",
        "query_hash": "180c0d9f83a2d7219cec8a5bab262a93e8507db42d100b62c27d240006be3dbb",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CVuln-HighestExposedDevices.kql",
        "query": "//Summarize your devices by which Microsoft CVEs they are vulnerable too. The data is summarized into severity and ordered by the most exposed devices.\n\n//Data connector required for this query - Advanced Hunting license\n\n//This query only works in Advanced Hunting as the DeviceTvm* tables aren't sent to Sentinel yet\nDeviceTvmSoftwareVulnerabilities\n| summarize ['Critical Severity Vulnerabilities']=make_set_if(CveId, SoftwareVendor == \"microsoft\" and VulnerabilitySeverityLevel == \"Critical\"),\n    ['High Severity Vulnerabilities']=make_set_if(CveId, SoftwareVendor == \"microsoft\" and VulnerabilitySeverityLevel == \"High\"),\n    ['Medium Severity Vulnerabilities']=make_set_if(CveId, SoftwareVendor == \"microsoft\" and VulnerabilitySeverityLevel == \"Medium\"), \n    ['Low Severity Vulnerabilities']=make_set_if(CveId, SoftwareVendor == \"microsoft\" and VulnerabilitySeverityLevel == \"Low\")\n    by DeviceName\n| sort by array_length(['Critical Severity Vulnerabilities']) desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Vuln-HighestExposedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8b6bd973-e17b-4c72-9a29-187e3f326edf",
        "query_hash": "577a25c13a58a80c514e5b373e1d594c1fcc65935108c340697983b9629a3413",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CVuln-InternetExposedDevices.kql",
        "query": "//Use logon and network telemetry to find machines exposed to the internet, then count the critical and high severity vulnerabilities on those devices\n//This query only works in Advanced Hunting as the DeviceTvm* tables aren't sent to Sentinel yet\n\n//Data connector required for this query - Advanced Hunting license\n\n//Look for logon events coming from a public IP - query adapted from https://github.com/alexverboon/MDATP/blob/master/AdvancedHunting/Failed%20Logon%20-%20Public%20IP.md\nlet publicips = \n    DeviceLogonEvents\n    | where Timestamp > ago(30d)\n    | where ActionType in (\"LogonFailed\", \"LogonSuccess\")\n    | where RemoteIPType == \"Public\"\n    | distinct RemoteIP;\n//Use that same list of IP addresses to search for network traffic coming from those IP's, suggesting the device is available on the internet\nlet publicdevices=\n    DeviceNetworkEvents\n    | where Timestamp > ago (30d)\n    | where RemoteIPType == \"Public\"\n    | where RemoteIP in (publicips)\n    | distinct DeviceName;\n//Find the high and critical vulnerability count for those devices\nDeviceTvmSoftwareVulnerabilities\n| where DeviceName in (publicdevices)\n| summarize ['Vulnerability Count']=dcountif(CveId, VulnerabilitySeverityLevel in (\"Critical\", \"High\")) by DeviceName\n| sort by ['Vulnerability Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Vuln-InternetExposedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ac983f82-8e46-430b-a46d-07ad53798460",
        "query_hash": "3b52b431cbe9377bfde5fb6b6a1d690b891b28cce5fdc1137c551831f1304c19",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Endpoint%5CVuln-KnownExploitableVuln.kql",
        "query": "//Query the list of Known Exploited Vulnerabilities provided by CISA - https://www.cisa.gov/known-exploited-vulnerabilities-catalog and query your devices for any that are vulnerable\n\n//Data connector required for this query - Advanced Hunting license\n//This query only works in Advanced Hunting as the DeviceTvm* tables aren't sent to Sentinel yet\n\nlet KEV=\nexternaldata(cveID: string, vendorProject: string, product: string, vulnerabilityName: string, dateAdded: datetime, shortDescription: string, requiredAction: string, dueDate: datetime)\n[\nh@'https://www.cisa.gov/sites/default/files/csv/known_exploited_vulnerabilities.csv'\n]\nwith(format='csv',ignorefirstrecord=true);\nDeviceTvmSoftwareVulnerabilities\n| project DeviceName, OSPlatform, cveID=CveId\n| join kind=inner KEV on cveID\n| summarize ['Vulnerabilities']=make_set(cveID) by DeviceName\n| extend ['Count of Known Exploited Vulnerabilities'] = array_length(['Vulnerabilities'])\n| sort by ['Count of Known Exploited Vulnerabilities']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Vuln-KnownExploitableVuln",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5789f385-a47a-4696-ad1d-e0c7f45c2d0f",
        "query_hash": "48c50774c5047e270cda80367102b71e0c0f52aca5c9907ab187c44c4a43d11a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Identity%5CIdentityDirectoryEvents-AccountDelegationChanged.kql",
        "query": "//Alert when Defender for Identity detects a change in kerberos constrained delegation configuration on a device\n\n//Data connector required for this query - M365 Defender - Identity* tables\n\nIdentityDirectoryEvents\n| where ActionType == \"Account Constrained Delegation changed\"\n| extend AF = parse_json(AdditionalFields)\n| extend ['Previous Delegation Setting'] = AF.[\"FROM AccountConstrainedDelegationState\"]\n| extend ['Current Delegation Setting'] = AF.[\"TO AccountConstrainedDelegationState\"]\n| extend ['Device Operating System'] = AF.TargetComputerOperatingSystem\n| project\n    TimeGenerated,\n    TargetDeviceName,\n    ['Device Operating System'],\n    ['Previous Delegation Setting'],\n    ['Current Delegation Setting']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityDirectoryEvents-AccountDelegationChanged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fd776190-d1ae-481f-9756-96de7fd674a7",
        "query_hash": "0c9b722bb0f9e74db5545176a58152a7e767005970fd6527aa20851af7d04267",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Identity%5CIdentityDirectoryEvents-EncryptionChange.kql",
        "query": "//Detect when the encryption types on a device are changed and parse the previous and current encryption types.\n\n//Data connector required for this query - M365 Defender - Identity* tables or Advanced Hunting license\n\n//If you don't send Defender for Id logs to Sentinel you can use the query in M365 Advanced Hunting directly\nIdentityDirectoryEvents\n| where ActionType == \"Account Supported Encryption Types changed\"\n| parse AdditionalFields with * 'FROM AccountSupportedEncryptionTypes\":\"' PreviousEncryption '\"' *\n| parse AdditionalFields with * 'TO AccountSupportedEncryptionTypes\":\"' CurrentEncryption '\"' *\n| project TimeGenerated, TargetDeviceName, PreviousEncryption, CurrentEncryption",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityDirectoryEvents-EncryptionChange",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3b026533-3f64-448c-8f1a-1ec6c696f1df",
        "query_hash": "8dc7ba880d5109228d10f723220a623876cf0fae9ed3800254a8ee478317ae5e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Identity%5CIdentityDirectoryEvents-PasswordSettoNeverExpire.kql",
        "query": "//Alert when Defender for Identity detects an account being set to 'password never expires'\n\n//Data connector required for this query - M365 Defender - Identity* tables\n\n//Microsoft Sentinel query\nIdentityDirectoryEvents\n| where ActionType == \"Account Password Never Expires changed\"\n| extend ['Password never expires previous setting'] = tostring(AdditionalFields.[\"FROM Account Password Never Expires\"])\n| extend ['Password never expires current setting'] = tostring(AdditionalFields.[\"TO Account Password Never Expires\"])\n| project\n    TimeGenerated,\n    TargetAccountUpn,\n    ['Password never expires current setting'],\n    ['Password never expires previous setting']\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nIdentityDirectoryEvents\n| where ActionType == \"Account Password Never Expires changed\"\n| extend ['Password never expires previous setting'] = tostring(AdditionalFields.[\"FROM Account Password Never Expires\"])\n| extend ['Password never expires current setting'] = tostring(AdditionalFields.[\"TO Account Password Never Expires\"])\n| project\n    Timestamp,\n    TargetAccountUpn,\n    ['Password never expires current setting'],\n    ['Password never expires previous setting']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityDirectoryEvents-PasswordSettoNeverExpire",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5048f3cd-7907-4da4-b6e9-5ecd9eea5c7b",
        "query_hash": "a845df9f45e4a89bf286bb3589fa24b0ebe03dfe87c6e1aa5554500e5fccef89",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Identity%5CIdentityLogonEvents-SummarizeClearTextLDAP.kql",
        "query": "//Summarize the accounts in your environment using cleartext LDAP connections\n\n//Data connector required for this query - M365 Defender - Identity* tables\n\n//Microsoft Sentinel query\nIdentityLogonEvents\n| where TimeGenerated > ago (30d)\n| where LogonType == \"LDAP cleartext\"\n| summarize\n    ['Total connection count']=count(),\n    ['Distinct destination device count']=dcount(DestinationDeviceName),\n    ['List of destination devices']=make_set(DestinationDeviceName)\n    by AccountUpn\n| sort by ['Distinct destination device count'] desc \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nIdentityLogonEvents\n| where Timestamp > ago (30d)\n| where LogonType == \"LDAP cleartext\"\n| summarize\n    ['Total connection count']=count(),\n    ['Distinct destination device count']=dcount(DestinationDeviceName),\n    ['List of destination devices']=make_set(DestinationDeviceName)\n    by AccountUpn\n| sort by ['Distinct destination device count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityLogonEvents-SummarizeClearTextLDAP",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "08992aa1-9e60-4415-83a4-f8a45eb92318",
        "query_hash": "38b1a6a24313f6c15f8c9f3a84d3c80a77c186502f7dfa643a42ebcd51be6d75",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDefender%20for%20Identity%5CIdentityLogonEvents-SummarizeNTLM.kql",
        "query": "//Summarize NTLM authentications by which source computers & accounts are connecting to the most destination devices\n\n//Data connector required for this query - M365 Defender - Identity* tables\n\n//Microsoft Sentinel query\nIdentityLogonEvents\n| where TimeGenerated > ago(7d)\n| where ActionType == \"LogonSuccess\"\n| where Protocol == \"Ntlm\"\n| where LogonType == \"Credentials validation\"\n| summarize ['Target Device List']=make_set(DestinationDeviceName), ['Target Device Count']=dcount(DestinationDeviceName) by DeviceName, AccountName\n| sort by ['Target Device Count'] desc \n\n//Advanced Hunting query\nIdentityLogonEvents\n\n//Data connector required for this query - Advanced Hunting license\n\n| where Timestamp > ago(7d)\n| where ActionType == \"LogonSuccess\"\n| where Protocol == \"Ntlm\"\n| where LogonType == \"Credentials validation\"\n| summarize ['Target Device List']=make_set(DestinationDeviceName), ['Target Device Count']=dcount(DestinationDeviceName) by DeviceName, AccountName\n| sort by ['Target Device Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityLogonEvents-SummarizeNTLM",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ff39db29-d274-4b70-aafd-19d37d7a3dc2",
        "query_hash": "4c93027d153ce9bcd3c19f58f516526baae371aad7c983355782f438caecf3f7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDNS%5CDNS-FindDevicesThatHaveQueriedSuspiciousDomains.kql",
        "query": "//When a domain is flagged by Defender for Cloud (Azure Security Center) as suspicious then find any other clients that have queried that domain in DNS events\n\n//Data connector required for this query - DNS\n\nlet suspiciousurl=\nSecurityAlert\n| where AlertName startswith \"Communication with suspicious random domain name\"\n| mv-expand todynamic(Entities)\n| project Entities\n| extend SuspiciousURL = tostring(Entities.DomainName)\n| where isnotempty(SuspiciousURL)\n| distinct SuspiciousURL;\n    DnsEvents\n    | where QueryType == \"A\"\n    | project Name, ClientIP\n    | where Name in (suspiciousurl)\n| summarize ['Client IPs']=make_set(ClientIP) by Name",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DNS-FindDevicesThatHaveQueriedSuspiciousDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "70c42fc9-9efc-4a22-b516-d9728dc4b594",
        "query_hash": "1ac67742139a71ab8ade6bca0e1962f9bf2521809969ff725968e74e4b605853",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CDNS%5CDnsEvents-FindStaleDomains.kql",
        "query": "//Find DNS domains that have not been queried in the last 30 days. These are potentially stale and should be removed.\n\n//Data connector required for this query - DNS\n\nlet domain=\"yourdomain.com\";\nDnsEvents\n| where TimeGenerated > ago(180d)\n| where SubType == \"LookupQuery\"\n| where QueryType == \"A\"\n| where Name endswith domain\n| summarize LookupCount=count()by Name\n//Set a threshold for total lookups to be included, to account for typos and low volume queries\n| where LookupCount > 50\n| join kind=leftanti \n    (\n    DnsEvents\n    | where TimeGenerated > ago(30d)\n    | where SubType == \"LookupQuery\"\n    | where QueryType == \"A\"\n    | where Name endswith domain\n    | summarize arg_max(TimeGenerated, Name) by Name\n    | project TimeGenerated, Name)\n    on Name",
        "source_type": "text",
        "source_index": 0,
        "query_name": "DnsEvents-FindStaleDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0abe868c-a2f1-45b1-8f76-c6494f4a0f33",
        "query_hash": "f436cc3d268026c9d513750abd23611001e0dd81f5741b77cf9162cf77f82cc5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-ADGroupChanges.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as ADGroupChanges\n// ADGroupChanges | where TimeGenerated > ago(1d) | where Action == \"Add\" and GroupName == \"TestGroup1\" // will all group additions to \"TestGroup1\"\n// ADGroupChanges | where TimeGenerated > ago(1d) | where Action == \"Remove\" and Actor == \"User1\" // will find all group removals by \"User1\"\n// This will parse the SecurityEvent log for any group additions or removals.\nSecurityEvent\n| project\n    TimeGenerated,\n    EventID,\n    AccountType,\n    MemberName,\n    SubjectUserName,\n    TargetUserName,\n    Activity,\n    MemberSid\n| where EventID in (4728, 4729, 4732, 4733, 4756, 4757)\n| parse MemberName with * 'CN=' Subject ',OU=' *\n| extend Action = case(EventID in (\"4728\", \"4756\", \"4732\"), strcat(\"Add\"),\n    EventID in (\"4729\", \"4757\", \"4733\"), strcat(\"Remove\"), \"unknown\")\n| project\n    TimeGenerated,\n    Action,\n    AccountType,\n    Actor=SubjectUserName,\n    Subject,\n    GroupName=TargetUserName,\n    Activity",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-ADGroupChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "433e80d3-4360-41f6-9496-813ba814911b",
        "query_hash": "2844e41efcafeb79ee999a54665d32b5bb0eb333b1e4cf7da003c600a360810d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-AzureKeyVaultAccess.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as KeyVaultAccess\n// KeyVaultAccess | where TimeGenerated > ago(30d) | where Actor == \"user@yourdomain.com\" // will find actions taken by that user\n// KeyVaultAccess | where TimeGenerated > ago(30d) | where * contains \"Delete\" // will find when delete access is added or removed\n// This will parse the AzureActivity log for Azure Key Vault access changes.\nAzureDiagnostics\n| where ResourceType == \"VAULTS\"\n| where OperationName == \"VaultPatch\"\n| where ResultType == \"Success\"\n| project-rename\n    ServicePrincipalAdded=addedAccessPolicy_ObjectId_g,\n    Actor=identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_name_s,\n    AddedKeyPolicy = addedAccessPolicy_Permissions_keys_s,\n    AddedSecretPolicy = addedAccessPolicy_Permissions_secrets_s,\n    AddedCertPolicy = addedAccessPolicy_Permissions_certificates_s,\n    RemovedKeyPolicy = removedAccessPolicy_Permissions_keys_s,\n    RemovedSecretPolicy = removedAccessPolicy_Permissions_secrets_s,\n    RemovedCertPolicy = removedAccessPolicy_Permissions_certificates_s,\n    ServicePrincipalRemoved=removedAccessPolicy_ObjectId_g\n| project\n    TimeGenerated,\n    KeyVaultName=Resource,\n    ServicePrincipalAdded,\n    ServicePrincipalRemoved,\n    Actor,\n    IPAddressofActor=CallerIPAddress,\n    AddedSecretPolicy,\n    AddedKeyPolicy,\n    AddedCertPolicy,\n    RemovedSecretPolicy,\n    RemovedKeyPolicy,\n    RemovedCertPolicy\n| where isnotempty(AddedKeyPolicy)\n    or isnotempty(AddedSecretPolicy)\n    or isnotempty(AddedCertPolicy)\n    or isnotempty(RemovedKeyPolicy)\n    or isnotempty(RemovedSecretPolicy)\n    or isnotempty(RemovedCertPolicy)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-AzureKeyVaultAccess",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "00cf1370-8065-4cde-b9ad-9a6aa2dc14a2",
        "query_hash": "e95634672d0a45b710fef9a77e623be7756521e586824296d3af097efd9d2993",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-CiscoASAParser.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as ASALogs\n// ASALogs | where TimeGenerated > ago(30d) | where Action == \"A real IP packet was denied by the ACL\"\n// ASALogs | where TimeGenerated > ago(30d) | where DstIP == \"1.1.1.1\"\n// This will parse the Syslog messages from a Cisco ASA appliance to separate columns\nlet asa106017=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Deny IP due to Land Attack\"\n| where Event == \"ASA-2-106017\"\n| extend Action = Description\n| parse SyslogMessage with * 'ASA-2-106017:' Message 'from' x 'to' y\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, Message, SrcIP, DstIP;\nlet asa210005=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"LU allocate connection failed\"\n| extend Action = Description\n| where Event == \"ASA-3-210005\"\n| parse SyslogMessage with * 'ASA-3-210005:' Message 'from' SrcVlan ':' x 'to' DstVLan ':' y\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, Message, SrcVlan, SrcIP,SrcPort, DstVLan, DstIP, DstPort;\nlet asa106023=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"A real IP packet was denied by the ACL\"\n| extend Action = Description\n| where Event == \"ASA-4-106023\"\n| parse SyslogMessage with * 'ASA-4-106023: Deny ' z ' src ' SrcVlan ':' x 'dst' DstVLan ':' y ' ' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| extend Protocol = toupper(z)\n| project TimeGenerated, Computer, Description, Event, Action, Protocol, SrcVlan, SrcIP, SrcPort, DstVLan, DstIP, DstPort;\nlet asa313005=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"No matching connection for ICMP error message\"\n| extend Action = Description\n| where Event == \"ASA-4-313005\"\n| parse SyslogMessage with * 'ASA-4-313005:' Message 'src' SrcVlan ':' x 'dst' DstVLan ':' y ' ' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * 'connection for ' Protocol ' error' *\n| project TimeGenerated, Computer, Description, Event, Protocol, Action, Message, SrcVlan, SrcIP, DstVLan, DstIP;\nlet asa410001=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Dropped UDP DNS\"\n| extend Action = Description\n| where Event == \"ASA-4-410001\"\n| parse SyslogMessage with * 'ASA-4-410001:' Message 'from' SrcVlan ':' x 'to' DstVLan ':' y ';' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * 'Dropped ' Protocol ' DNS' *\n| project TimeGenerated, Computer, Description, Protocol, Event, Action, Message, SrcVlan, SrcIP, SrcPort, DstVLan, DstIP, DstPort;\nlet asa419002=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Duplicate TCP SYN\"\n| extend Action = Description\n| where Event == \"ASA-4-419002\"\n| parse SyslogMessage with * 'ASA-4-419002:' Message 'from' SrcVlan ':' x 'to' DstVLan ':' y ' ' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * 'Duplicate ' Protocol ' SYN' *\n| project TimeGenerated, Computer, Description, Protocol, Event, Action, Message, SrcVlan, SrcIP,SrcPort, DstVLan, DstIP, DstPort;\nlet asa500004=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Invalid transport field for protocol\"\n| extend Action = Description\n| where Event == \"ASA-4-500004\"\n| parse SyslogMessage with * 'ASA-4-500004:' Message ', from' x 'to' y\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, Message, SrcIP, SrcPort, DstIP, DstPort;\nlet asa733100=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Drop rate exceeded\"\n| where Event == \"ASA-4-733100\"\n| extend Action = Description\n| parse SyslogMessage with * 'ASA-4-733100:' Message\n| project TimeGenerated, Computer, Description, Event, Action, Message;\nlet asa111008=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"User command executed\"\n| extend Action = Description\n| where Event == \"ASA-5-111008\"\n| parse SyslogMessage with * 'ASA-5-111008:' Message\n| project TimeGenerated, Computer, Description, Event, Action, Message;\nlet asa111010=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"User made configuration change\"\n| extend Action = Description\n| where Event == \"ASA-5-111010\"\n| parse SyslogMessage with * 'ASA-5-111010:' Message\n| project TimeGenerated, Computer, Description, Event, Action, Message;\nlet asa611103=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"User logged out\"\n| extend Action = Description\n| where Event == \"ASA-5-611103\"\n| parse SyslogMessage with * 'ASA-5-611103:' Message\n| project TimeGenerated, Computer, Description, Event, Action, Message;\nlet asa106015=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Deny TCP (no connection)\"\n| extend Action = Description\n| where Event == \"ASA-6-106015\"\n| parse SyslogMessage with * 'ASA-6-106015:' Message 'from' x 'to' y 'flags' Flags 'on interface' DstVLan\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * 'Deny ' Protocol ' (' *\n| project TimeGenerated, Computer, Description, Event, Protocol, Action, Message, SrcIP, SrcPort, DstIP, DstPort, Flags, DstVLan;\nlet asa110002=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Failed to locate egress interface\"\n| extend Action = Description\n| where Event == \"ASA-6-110002\"\n| parse SyslogMessage with * 'ASA-6-110002:' Message 'for' Protocol 'from' SrcVlan ':' x 'to' y\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, Message, Protocol, SrcVlan, SrcIP, SrcPort, DstIP, DstPort;\nlet asa113004=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"AAA user authentication Successful\"\n| extend Action = Description\n| where Event == \"ASA-6-113004\"\n| parse SyslogMessage with * 'ASA-6-113004:' Message ': server = ' x ' : user = ' User\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, Message, SrcIP, User;\nlet asa113008=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"AAA transaction status ACCEPT\"\n| extend Action = Description\n| where Event == \"ASA-6-113008\"\n| parse SyslogMessage with * 'ASA-6-113008:' Message ' : user = ' User\n| project TimeGenerated, Computer, Description, Event, Message, Action, User;\nlet asa302010=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Connection stats\"\n| where Event == \"ASA-6-302010\"\n| extend Action = Description\n| parse SyslogMessage with * 'ASA-6-302010:' ConnectionsInUse ' in use, ' ConnectionsMostUsed  ' most used';\nlet asa302013=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Built outbound TCP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-302013\"\n| parse SyslogMessage with * 'connection ' ConnectionId 'for ' DstVlan ':' y ' (' DestNATIp ') to ' SrcVlan ':' x ' (' DstNATIP ')' \n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * ' outbound ' Protocol ' connection' *\n| project TimeGenerated, Computer, Description, Event, Action, Protocol, ConnectionId, DstVlan, DstIP, DstPort, SrcVlan, SrcIP, SrcPort, DstNATIP;\nlet asa302014=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Teardown outbound TCP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-302014\"\n| parse SyslogMessage with * 'connection ' ConnectionId 'for ' DstVlan ':' y ' to ' SrcVlan ':' x ' duration ' Duration ' bytes' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * ' outbound ' Protocol ' connection' *\n| project TimeGenerated, Computer, Description, Event, Action, Protocol, ConnectionId, DstVlan, DstIP, DstPort, SrcVlan, SrcIP, SrcPort, Duration;\nlet asa302015=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Built outbound UDP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-302015\"\n| parse SyslogMessage with * 'connection ' ConnectionId 'for ' DstVlan ':' y ' (' DestNATIp ') to ' SrcVlan ':' x ' (' DstNATIP ')' \n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * ' outbound ' Protocol ' connection' *\n| project TimeGenerated, Computer, Description, Event, Protocol, Action, ConnectionId, DstVlan, DstIP, DstPort, SrcVlan, SrcIP, SrcPort, DstNATIP;\nlet asa302016=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Teardown UDP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-302016\"\n| parse SyslogMessage with * 'connection ' ConnectionId 'for ' DstVlan ':' y ' to ' SrcVlan ':' x ' duration ' Duration ' bytes' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * 'Teardown ' Protocol ' connection' *\n| project TimeGenerated, Computer, Description, Protocol, Event, Action, ConnectionId, DstVlan, DstIP, DstPort, SrcVlan, SrcIP, SrcPort, Duration;\nlet asa302020=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Built outbound ICMP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-302020\"\n| parse SyslogMessage with * 'faddr ' y ' gaddr ' x ' laddr ' SrcNATIP ' type' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * ' outbound ' Protocol ' connection' *\n| project TimeGenerated, Computer, Description, Protocol, Event, Action, DstIP, DstPort, SrcPort, SrcIP, SrcNATIP;\nlet asa302021=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Teardown ICMP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-302021\"\n| parse SyslogMessage with * 'faddr ' y ' gaddr ' x ' laddr ' SrcNATIP ' type' *\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| parse Action with * 'Teardown ' Protocol ' connection' *\n| project TimeGenerated, Computer, Description, Protocol, Event, Action, DstIP, DstPort, SrcIP, SrcPort, SrcNATIP;\nlet asa303002=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"FTP connection\"\n| extend Action = Description\n| where Event == \"ASA-6-303002\"\n| parse SyslogMessage with * 'from ' SrcVlan ':' x ' to ' DstVlan ':' y ',' Message\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, SrcVlan, SrcIP, SrcPort, DstVlan, DstIP, DstPort, Message;\nlet asa305011=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Build Nat Translation\"\n| extend Action = Description\n| where Event == \"ASA-6-305011\"\n| parse SyslogMessage with * 'dynamic ' Protocol ' translation from ' SrcVlan ':' x ' to ' DstVlan ':' y\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, SrcVlan, SrcIP, SrcPort, DstVlan, DstIP, DstPort;\nlet asa305012=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Teardown Nat Translation\"\n| extend Action = Description\n| where Event == \"ASA-6-305012\"\n| parse SyslogMessage with * 'dynamic ' Protocol ' translation from ' SrcVlan ':' x ' to ' DstVlan ':' y ' duration ' Duration\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, SrcVlan, SrcIP, SrcPort, DstVlan, DstIP, DstPort, Duration;\nlet asa315011=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"SSH session\"\n| extend Action = Description\n| where Event == \"ASA-6-315011\"\n| parse SyslogMessage with * 'from ' x 'on interface ' SrcVlan 'for ' Message\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, SrcIP, SrcVlan, Message;\nlet asa605005=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Login permitted\"\n| extend Action = Description\n| where Event == \"ASA-6-605005\"\n| parse SyslogMessage with * 'from ' x ' to ' DstVlan ':' y ' for user ' User\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| extend DstIP = split(y,'/')[0]\n| extend DstPort = split(y,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, SrcIP, SrcPort, DstVlan, DstIP, DstPort, User;\nlet asa611101=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"User authentication succeeded\"\n| extend Action = Description\n| where Event == \"ASA-6-611101\"\n| parse SyslogMessage with * ': IP address: ' x ', Uname: ' User\n| extend SrcIP = split(x,'/')[0]\n| extend SrcPort = split(x,'/')[1]\n| project TimeGenerated, Computer, Description, Event, Action, SrcIP, User;\nlet asa769007=\nSyslog\n| parse SyslogMessage with * '%' Event ':' *\n| project TimeGenerated, Event, SyslogMessage, Computer\n| extend Description = \"Image version\"\n| extend Action = Description\n| where Event == \"ASA-6-769007\"\n| parse SyslogMessage with * 'UPDATE: ' ImageVersion\n| project TimeGenerated, Computer, Description, Event, Action, ImageVersion;\nunion asa106017, asa106023, asa210005, asa313005, asa410001, asa419002, asa500004, asa733100, asa111008, asa111010, asa611103, asa106015, asa110002, asa113004, asa113008, asa302010, asa302013, asa302014, asa302015, asa302016, asa302020, asa302021, asa303002, asa305011, asa305012, asa315011, asa605005, asa611101, asa769007\n| project TimeGenerated, Computer, Event, Action, Protocol, SrcIP, SrcPort, SrcVlan, SrcNATIP, DstIP, DstPort, DstVlan, DstNATIP ,Duration, Message, User, Flags, ImageVersion, ConnectionsInUse, ConnectionsMostUsed, Description",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-CiscoASAParser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "43665631-2f6b-4eae-a881-dbe71018548d",
        "query_hash": "975da149c7ded1e7b6cf1977a168298104522a07a56edc6200457cbad12f619d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-DeviceLookup.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as DeviceLookup\n// DeviceLookup | where IPAddresses has \"10.10.10.10\" // will find all devices that have had the IPAddress 10.10.10.10\n// DeviceLookup | where ['Logged on Admins'] has \"user1\" // will find all devices user1 has logged onto as an admin\n// DeviceLookup | where array_length( ['Logged on Admins']) > 10 // will find devices with more than 10 local admins logged on \n// This will parse the last 14 days of the DeviceInfo, DeviceLogonEvents and DeviceNetworkInfo tables for information\nlet deviceinfo=\n    DeviceInfo\n    | where TimeGenerated > ago (14d)\n    | where isnotempty(OSBuild)\n    | summarize arg_max(TimeGenerated, *) by DeviceId\n    | project DeviceName, DeviceId, OSPlatform, OSBuild;\nlet logons=\n    DeviceLogonEvents\n    | where TimeGenerated > ago(14d)\n    | project\n        DeviceName,\n        ActionType,\n        LogonType,\n        AccountName,\n        DeviceId,\n        InitiatingProcessCommandLine,\n        AdditionalFields,\n        IsLocalAdmin\n    | where ActionType == \"LogonSuccess\"\n    | where LogonType == \"Interactive\"\n    | where AdditionalFields.IsLocalLogon == true\n    | where InitiatingProcessCommandLine == \"lsass.exe\"\n    | summarize\n        ['Logged on Users']=make_set_if(AccountName, IsLocalAdmin == \"false\"),\n        ['Logged on Admins']=make_set_if(AccountName, IsLocalAdmin == \"true\")\n        by DeviceId;\nlet ipaddresses=\n    DeviceNetworkInfo\n    | where TimeGenerated > ago (14d)\n    | mv-expand IPAddresses\n    | extend IPAddress = tostring(IPAddresses.IPAddress)\n    | summarize IPAddresses=make_set(IPAddress) by DeviceId;\ndeviceinfo\n| lookup logons on DeviceId\n| lookup ipaddresses on DeviceId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-DeviceLookup",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7b054187-c7c1-409b-85bc-7b68d075dfb2",
        "query_hash": "1f3ae2ec678d9f061577eb86715e9b58e7fb358f57235fb5cfd6cb387ededb43",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-FailedActiveDirectoryLogons.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as ADFailedLogons\n// ADFailedLogons | where TimeGenerated > ago(30d) | where Account == \"DOMAIN\\username\" // will find logon failures by that user\n// ADFailedLogons | where TimeGenerated > ago(30d) | where ResultReason == \"User logon with expired password\" // will find logon failures from accounts with expired passwords\n// This will parse the SecurityEvent log for logon failures and add the descriptive reason.\nSecurityEvent\n| where EventID == \"4625\"\n| extend ResultReason = case(\n    Status == \"0xc000005e\", strcat(\"There are currently no logon servers available to service the logon request\"),\n    Status == \"0xc0000064\", strcat(\"User logon with misspelled or bad user account\"),\n    Status == \"0xc000006a\", strcat(\"User logon with misspelled or bad password\"),\n    Status == \"0xc000006d\", strcat(\"The cause is either a bad username or authentication information\"),\n    Status == \"0xc000006e\", strcat(\"Indicates a referenced user name and authentication information are valid, but some user account restriction has prevented successful authentication (such as time-of-day restrictions)\"),\n    Status == \"0xc000006f\", strcat(\"User logon outside authorized hours\"),\n    Status == \"0xc0000070\", strcat(\"User logon from unauthorized workstation\"),\n    Status == \"0xc0000071\", strcat(\"User logon with expired password\"),\n    Status == \"0xc0000072\", strcat(\"User logon to account disabled by administrator\"),\n    Status == \"0xc000018b\", strcat(\"Security database on the server does not have a computer account for this workstation trust relationship\"),\n    Status == \"0xc00000dc\", strcat(\"Indicates the Sam Server was in the wrong state to perform the desired operation\"),\n    Status == \"0xc0000133\", strcat(\"Clocks between DC and other computer too far out of sync\"),\n    Status == \"0xc000015b\", strcat(\"The user has not been granted the requested logon type (also called the logon right) at this machine\"),\n    Status == \"0xc000018c\", strcat(\"The logon request failed because the trust relationship between the primary domain and the trusted domain failed\"),\n    Status == \"0xc0000192\", strcat(\"An attempt was made to logon, but the Netlogon service was not started\"),\n    Status == \"0xc0000193\", strcat(\"User logon with expired account\"),\n    Status == \"0xc0000224\", strcat(\"User is required to change password at next logon\"),\n    Status == \"0xc0000225\", strcat(\"Evidently a bug in Windows and not a risk\"),\n    Status == \"0xc0000234\", strcat(\"User logon with account locked\"),\n    Status == \"0xc000015a\", strcat(\"During a logon attempt, the user's security context accumulated too many security IDs\"),\n    Status == \"0xc00002ee\", strcat(\"Failure Reason: An Error occurred during Logon\"),\n    Status == \"0xc0000413\", strcat(\"Logon Failure: The machine you are logging on to is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine\"),\n    Status == \"0x0\", strcat(\"Status OK\"),\n    \"unknown\")\n| project\n    TimeGenerated,\n    Status,\n    ResultReason,\n    Account,\n    AccountType,\n    Computer,\n    AuthenticationPackageName,\n    IpAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-FailedActiveDirectoryLogons",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "bb5c6ca6-4202-4271-bbbf-d17d1c99cf07",
        "query_hash": "d1126b282f0945d6a8f31d749a32f54477c34e183c6ac912d69412d89b1508ae",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-GroupChanges.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as GroupChanges\n// GroupChanges | where TimeGenerated > ago(1d) | where Action == \"Add\" and GroupName == \"TestGroup1\" // Will find all group additions to \"TestGroup1\"\n// GroupChanges | where TimeGenerated > ago(1d) | where Action == \"Remove\" and Actor == \"User1\" and Environment == \"Azure Active Directory\" // will find all group removals by \"User1\" in Azure Active Directory\n// GroupChanges | where TimeGenerated > ago(1d) | where Action == \"Add\" | Will find all Add actions in both Active Directory and Azure Active Directory\nlet aaduseradded=\n    AuditLogs\n    | where OperationName == \"Add member to group\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | where isnotempty(Actor) and isnotempty(Target)\n    | extend Environment = strcat(\"Azure Active Directory\")\n    | extend Action = strcat(\"Add\")\n    | project TimeGenerated, Action, Actor, Target, GroupName, Environment;\nlet aaduserremoved=\n    AuditLogs\n    | where OperationName == \"Remove member from group\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].oldValue)))\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | where isnotempty(Actor) and isnotempty(Target)\n    | extend Action = strcat(\"Remove\")\n    | extend Environment = strcat(\"Azure Active Directory\")\n    | project TimeGenerated, Action, Actor, Target, GroupName, Environment;\nlet adchanges=\n    SecurityEvent\n    | project TimeGenerated, EventID, AccountType, MemberName, SubjectUserName, TargetUserName\n    | where AccountType == \"User\"\n    | where EventID in (4728, 4729, 4732, 4733, 4756, 4757)\n    | extend x = tolower(MemberName)\n    | parse x with * 'cn=' Target ',ou=' *\n    | extend Action = case(EventID in (\"4728\", \"4756\", \"4732\"), strcat(\"Add\"),\n        EventID in (\"4729\", \"4757\", \"4733\"), strcat(\"Remove\"), \"unknown\")\n    | extend Environment = strcat(\"Active Directory\")\n    | project TimeGenerated, Action, Actor=SubjectUserName, Target, GroupName=TargetUserName, Environment;\nunion aaduseradded, aaduserremoved, adchanges",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-GroupChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e6e68bd1-77b7-4129-9d3e-2d5b6720185a",
        "query_hash": "fefdadccaa5332705ca7117333e11d6331b2f250eac5978fc9d30f03d171ba2f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-GuestDomainInfo.kql",
        "query": "//Single function to summarize a single guest domain. It will retrieve the following information about a specific domain.\n//Azure AD Sign in Logs - total sign in count, distinct sign in count, list of applications, count of applications, list of users\n//Azure AD Audit Logs - invites sent and redeemed from this domain\n//Office 365 - total files downloaded, distinct filese downloaded from this domain\n//Office 365 - count of users added to Teams, distinct count of users added to Teams and the list of Teams\n\n//Save as a function in your workspace then invoke via its name, ie UserInvestigation(\"user@domain.com\"). Your function requires a parameter as per https://github.com/reprise99/Sentinel-Queries/tree/main/Functions\n//The function requires a parameter which is a string, with the name domain and a default value of \"gmail.com\" (or any domain you wish)\n\nlet signins=\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where UserPrincipalName endswith (domain)\n| summarize ['Total Signins']=count(), ['Count of Users']=dcount(UserPrincipalName), ['Count of Applications']=dcount(AppDisplayName), ['List of Applications Accessed']=make_set(AppDisplayName), ['List of Users']=make_set(UserPrincipalName), ['List of Locations']=make_set(Location) by Domain=(domain);\nlet invitedusers=\nAuditLogs\n| where TimeGenerated > ago(30d)\n| where OperationName == \"Invite external user\"\n| extend UserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n| where TargetResources contains (domain)\n| summarize ['Invited User Count']=dcount(UserPrincipalName), ['List of Users Invited']=make_set(UserPrincipalName) by Domain=(domain);\nlet redeemedusers=\nAuditLogs\n| where TimeGenerated > ago(30d)\n| where OperationName == \"Redeem external user invite\"\n| extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where UserPrincipalName endswith (domain)\n| summarize ['Invite Redeemed User Count']=dcount(UserPrincipalName), ['List of Redeemed Users']=make_set(UserPrincipalName) by Domain=(domain);\nlet officedownloads=\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| extend ['Guest UserPrincipalName'] = tostring(split(UserId,\"#\")[0])\n| extend ['Guest Domain'] = tostring(split(['Guest UserPrincipalName'],\"_\")[-1])\n| where ['Guest Domain'] =~ (domain)\n| summarize ['Total Guest Download Count']=count(), ['Distinct File Download Count']=dcount(OfficeObjectId) by Domain=(domain);\nlet teamsaccess=\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation == \"MemberAdded\"\n| mv-expand Members\n| extend UserPrincipalName = tostring(Members.UPN)\n| where UserPrincipalName contains \"#EXT#\"\n| where CommunicationType == \"Team\"\n| where UserPrincipalName contains (domain)\n| summarize ['Count of Guests Added to Teams']=count(), ['Distinct Count of Guests Added to Teams']=dcount(UserPrincipalName), ['Count of Teams with Guests Added']=dcount(TeamName), ['List of Teams with Guests Added']=make_set(TeamName) by Domain=(domain);\nsignins\n| lookup invitedusers on Domain\n| lookup redeemedusers on Domain\n| lookup officedownloads on Domain\n| lookup teamsaccess on Domain\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-GuestDomainInfo",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "28b56487-7f3b-42bd-ba98-f0effe9feafd",
        "query_hash": "b1e4cdf1023ffd9cb9d4f539c26440586e6b073ffcc838ad18c86f5226aed582",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-IdentityInfowithSigninRisk.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as SigninRisk\n// SigninRisk | where TimeGenerated > ago(30d) | where UserPrincipalName == \"user@yourdomain.com\"\n// SigninRisk | where TimeGenerated > ago(30d) | where AssignedRoles contains \"Global Administrator\"\n// This will join the users identity information, sign in data and any risky signins for your query\nIdentityInfo\n| where TimeGenerated > ago (21d)\n| summarize arg_max(TimeGenerated,*) by AccountUPN\n| join kind=inner(\nSigninLogs) on $left.AccountUPN==$right.UserPrincipalName\n| project SigninTime=TimeGenerated1, UserPrincipalName, AppDisplayName, ResultType, AssignedRoles, Location, UserAgent, AuthenticationRequirement, Country, City, CorrelationId\n| join kind=inner (\nAADUserRiskEvents) on CorrelationId\n| project SigninTime, UserPrincipalName, AppDisplayName, ResultType, DetectionTimingType, RiskState, RiskLevel, Location, AssignedRoles, UserAgent, AuthenticationRequirement, Country, City",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-IdentityInfowithSigninRisk",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cf556d3a-380a-4d08-b10a-dc9adb82565b",
        "query_hash": "25642244abe0ca376997ee5143bab2791d76efa1df1c30abcb410643776c40d5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-NewDetections.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as NewDetections\n// NewDetections // will find any new detections from your Azure AD Audit logs, Defender for Cloud Apps, Security Alerts, Office Activity and Defender for Endpoint\n// NewDetections | where Source == \"Office 365 Audit Events\" // will find new detections from Office 365\n// NewDetections | where Count > 10 // will find new detections that have been seen more than 10 times\n// This function looks for new events in Azure AD Audit logs, Defender for Cloud Apps, Security Alerts, Office Activity and Defender for Endpoint in the last week compared to the last 180 days\nlet newauditevents=\n    AuditLogs\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n    | distinct OperationName, LoggedByService\n    | join kind=rightanti (\n        AuditLogs\n        | where TimeGenerated > ago(7d)\n        )\n        on OperationName, LoggedByService\n    | summarize ['First Time Seen']=min(TimeGenerated), Count=count() by Activity=OperationName, Application=\"Azure AD\", Source=\"Azure AD Audit Events\";\nlet newdeviceevents=\n    DeviceEvents\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n    | distinct ActionType\n    | join kind=rightanti (\n        DeviceEvents\n        | where TimeGenerated > ago(7d)\n        )\n        on ActionType\n    | summarize ['First Time Seen']=min(TimeGenerated), Count=count()\n        by\n        Activity=ActionType,\n        Application=\"Defender for EndPoint\",\n        Source=\"Defender for Endpoint Device Events\";\nlet newnewofficeactivity=\n    OfficeActivity\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n    | distinct Operation\n    | join kind=rightanti (\n        OfficeActivity\n        | where TimeGenerated > ago(7d)\n        )\n        on Operation\n    | summarize ['First Time Seen']=min(TimeGenerated), Count=count() by Activity=Operation, Application=OfficeWorkload, Source=\"Office 365 Audit Events\";\nlet newcloudappevents=\n    CloudAppEvents\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n    | distinct ActionType\n    | join kind=rightanti (\n        CloudAppEvents\n        | where TimeGenerated > ago(7d)\n        )\n        on ActionType\n    | summarize ['First Time Seen']=min(TimeGenerated), Count=count() by Activity=ActionType, Application, Source=\"Defender for Cloud Apps Events\";\nlet newsecurityalerts=\n    SecurityAlert\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n    | where ProviderName != \"ASI Scheduled Alerts\"\n    | distinct AlertName\n    | join kind=rightanti (\n        SecurityAlert\n        | where TimeGenerated > ago(7d)\n        | where ProviderName != \"ASI Scheduled Alerts\"\n        )\n        on AlertName\n    | summarize ['First Time Seen']=min(TimeGenerated), Count=count() by Activity=AlertName, Application=ProviderName, Source=\"Security Alert Events\";\nunion\n    newauditevents,\n    newdeviceevents,\n    newnewofficeactivity,\n    newcloudappevents,\n    newsecurityalerts\n| sort by Count desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-NewDetections",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "29f257ae-a24f-4ecb-b62d-65ff7d29c7b4",
        "query_hash": "5c70d22d268d1edabc248a20d77c754c9d717d331444dc2824b88d15fa8568a8",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-PrivilegeChanges.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as PrivilegeChanges then call via the same name\n// This function is designed to unify group or privilege changes across on-premises AD and Azure AD\n// It will find changes to privileged AD groups, changes to privileged AAD groups, changes to privileged AAD roles (both directly and via PIM)\n// Default groups and roles have been added, but add your own groups that you wish to monitor unique to your environment\n// By default it will look back one day\n\nlet privADgroups=dynamic([\"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Account Operators\", \"DnsAdmins\", \"Backup Operators\"]);\nlet privAADgroups=dynamic([\"azure.Privileged Group\", \"azure.Privileged App\", \"az.ConditionalAccessBypassGroup\"]);\nlet privAADroles=dynamic([\"Global Administrator\", \"Application Administrator\", \"Privileged Authentication Administrator\", \"Privileged Role Administrator\", \"Security Administrator\" \"Identity Governance Administrator\"]);\nlet timeframe=1d;\nlet adchanges=\n    SecurityEvent\n    | where TimeGenerated > ago (timeframe)\n    | project TimeGenerated, Account, MemberName, TargetAccount, TargetUserName, Activity, EventID\n    | where EventID in (4728, 4729, 4732, 4733, 4756, 4757) and TargetUserName in~ (privADgroups)\n    | project\n        TimeGenerated,\n        Activity,\n        ['Group or Role Name']=TargetUserName,\n        Actor=Account,\n        Target=MemberName,\n        Environment=\"Active Directory\";\nlet aaduseradded=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName == \"Add member to group\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | extend ['Group or Role Name']= tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | where isnotempty(Actor) and isnotempty(Target)\n    | where ['Group or Role Name'] in~ (privAADgroups)\n    | project\n        TimeGenerated,\n        Activity=\"A member was added to a privleged Azure AD Group\",\n        ['Group or Role Name'],\n        Actor,\n        Target,\n        Environment=\"Azure Active Directory\";\nlet aaduserremoved=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName == \"Remove member from group\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend ['Group or Role Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].oldValue)))\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | where isnotempty(Actor) and isnotempty(Target)\n    | where ['Group or Role Name'] in~ (privAADgroups)\n    | extend Environment = strcat(\"Azure Active Directory\")\n    | project\n        TimeGenerated,\n        Activity=\"A member was removed from a privleged Azure AD Group\",\n        ['Group or Role Name'],\n        Actor,\n        Target,\n        Environment=\"Azure Active Directory\";\nlet aadroleadded=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName == \"Add member to role\"\n    //Exclude PIM activations\n    | where Identity != \"MS-PIM\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | extend ['Group or Role Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n    | where isnotempty(Actor) and isnotempty(Target)\n    | where ['Group or Role Name'] in~ (privAADroles)\n    | project\n        TimeGenerated,\n        Activity=\"A member was added to a privleged Azure AD Role\",\n        ['Group or Role Name'],\n        Actor,\n        Target,\n        Environment=\"Azure Active Directory\";\nlet aadroleremoved=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName == \"Remove member from role\"\n   //Exclude PIM activations\n    | where Identity != \"MS-PIM\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Target = tostring(TargetResources[0].userPrincipalName)\n    | extend ['Group or Role Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].oldValue)))\n    | where isnotempty(Actor) and isnotempty(Target)\n    | where ['Group or Role Name'] in~ (privAADroles)\n    | project\n        TimeGenerated,\n        Activity=\"A member was removed from a privleged Azure AD Role\",\n        ['Group or Role Name'],\n        Actor,\n        Target,\n        Environment=\"Azure Active Directory\";\nlet addpim=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName in (\"Add member to role in PIM completed (permanent)\", \"Add member to role in PIM completed (timebound)\", \"Add eligible member to role in PIM completed (timebound)\", \"Add eligible member to role in PIM completed (permanent)\")\n    | where TargetResources[2].type == \"User\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Target = tostring(TargetResources[2].userPrincipalName)\n    | extend ['Group or Role Name'] = tostring(TargetResources[0].displayName)\n    | where isnotempty(Actor) and isnotempty(Target)\n    | where ['Group or Role Name'] in~ (privAADroles)\n    | extend Activity = case(OperationName == \"Add member to role in PIM completed (permanent)\", strcat=\"A member was assigned to a permanent active Azure AD PIM Role\",\n        OperationName == \"Add member to role in PIM completed (timebound)\", strcat=\"A member was assigned to a timebound active Azure AD PIM Role\",\n        OperationName == \"Add eligible member to role in PIM completed (permanent)\", strcat=\"A member was assigned to a permanent eligible Azure AD PIM Role\",\n        OperationName == \"Add eligible member to role in PIM completed (timebound)\", strcat=\"A member was assigned to a timebound eligible Azure AD PIM Role\",\n        \"unknown\")\n    | project\n        TimeGenerated,\n        Activity,\n        ['Group or Role Name'],\n        Actor,\n        Target,\n        Environment=\"Azure Active Directory\";\nlet removepim=\n    AuditLogs\n    | where TimeGenerated > ago (timeframe)\n    | where OperationName in (\"Remove member from role in PIM completed (permanent)\", \"Remove member from role in PIM completed (timebound)\", \"Remove eligible member from role in PIM completed (permanent)\", \"Remove eligible member from role in PIM completed (timebound)\")\n    | where TargetResources[2].type == \"User\"\n    | extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Target = tostring(TargetResources[2].userPrincipalName)\n    | extend ['Group or Role Name'] = tostring(TargetResources[0].displayName)\n    | where isnotempty(Actor) and isnotempty(Target)\n    | where ['Group or Role Name'] in~ (privAADroles)\n    | extend Activity = case(OperationName == \"Remove member from role in PIM completed (permanent)\", strcat=\"A member was removed from a permanent active Azure AD PIM Role\",\n        OperationName == \"Remove member from role in PIM completed (timebound)\", strcat=\"A member was removed from a timebound active Azure AD PIM Role\",\n        OperationName == \"Remove eligible member from role in PIM completed (permanent)\", strcat=\"A member was removed from a permanent eligible Azure AD PIM Role\",\n        OperationName == \"Remove eligible member from role in PIM completed (timebound)\", strcat=\"A member was removed from a timebound eligible Azure AD PIM Role\",\n        \"unknown\")\n    | project\n        TimeGenerated,\n        Activity,\n        ['Group or Role Name'],\n        Actor,\n        Target,\n        Environment=\"Azure Active Directory\";\nunion adchanges, aaduseradded, aaduserremoved, aadroleadded, aadroleremoved, addpim, removepim\n| project-reorder TimeGenerated, Activity, ['Group or Role Name'], Actor, Target, Environment\n| sort by TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-PrivilegeChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1d1fabf6-1171-4225-999a-aa2eebea78e1",
        "query_hash": "9df2d4cdf1df22770500ac05e8fc89aa91dac1d66ccaf36f364f67a9fa30d9a2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-RetrieveAllDCs.kql",
        "query": "//Query several tables to retireve all your DCs - such as kerberos, DNS, replication events\nlet SamrDC=\nIdentityQueryEvents\n| where TimeGenerated > ago (30d)\n| where ActionType == \"SAMR query\"\n| distinct DestinationDeviceName;\nlet DnsDC=\nDnsEvents\n| where TimeGenerated > ago (30d)\n| where Name startswith \"_kerberos.\"\n| distinct Computer\n| extend DestinationDeviceName = tolower(Computer);\nlet SrvDC=\nIdentityQueryEvents\n| where TimeGenerated > ago (30d)\n| where QueryType == \"Srv\"\n| where QueryTarget startswith \"_kerberos.\"\n| distinct DestinationDeviceName;\nlet directoryeventsDC=\nIdentityDirectoryEvents\n| where TimeGenerated > ago (30d)\n| where ActionType in (\"Directory Services replication\")\n// Exclude Azure AD Connect\n| where isnotempty( AccountName) and isnotempty( DestinationDeviceName)\n| distinct DestinationDeviceName;\nunion isfuzzy= true SamrDC, DnsDC, SrvDC, directoryeventsDC \n| distinct DestinationDeviceName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-RetrieveAllDCs",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ffd6acb8-5706-4154-af64-ed612b3bc41a",
        "query_hash": "3805eb486715e15e605d41b6ae23a910be59e5f5493a94edd3ff0e31c1f8eb82",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-TeamsAccess.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as TeamsAccess\n// TeamsAccess | where TeamName == \"Secret Project\"  // will all events, user adds, removes and access changes for the \"Secret Project\" team\n// TeamsAccess | where Actor == \"user1@domain.com\" // will find all events, user adds, removes and changes performed by user1@domain.com\n// TeamsAccess | where TimeGenerated > ago(1d) and Activity == \"User added as guest\" // will find all guests being added in the last day\n// This function makes the data structure for the different events consistent so you can query them quickly\nlet memberadded=\n    OfficeActivity\n    | where Operation == \"MemberAdded\"\n    | where CommunicationType == \"Team\"\n    | mv-expand Members\n    | extend User = tostring(Members.UPN)\n    | extend x = tostring(Members.Role)\n    | extend Activity = case(x == \"1\", strcat(\"User added as member\"),\n        x == \"2\", strcat(\"User added as owner\"), \n        x == \"3\", strcat(\"User added as guest\"),\n        \"unknown\")\n    | extend Action = \"Add\"\n    | project\n        TimeGenerated,\n        Action,\n        Activity,\n        Actor=UserId,\n        User,\n        TeamName,\n        TeamGuid,\n        ActorType=UserType;\nlet memberremoved=\n    OfficeActivity\n    | where Operation == \"MemberRemoved\"\n    | where CommunicationType == \"Team\"\n    | mv-expand Members\n    | extend User = tostring(Members.UPN)\n    | extend Activity = \"User removed from Team\"\n    | extend ActorType = \"User\"\n    | extend Action = \"Remove\"\n    | project\n        TimeGenerated,\n        Action,\n        Activity,\n        Actor=UserId,\n        User,\n        TeamName,\n        TeamGuid,\n        ActorType=UserType;\nlet memberaccesschanged=\n    OfficeActivity\n    | where Operation == \"MemberRoleChanged\"\n    | mv-expand Members\n    | extend User = tostring(Members.UPN)\n    | extend x = tostring(Members.Role)\n    | extend Activity = case(x == \"1\", strcat(\"User changed to member\"),\n        x == \"2\", strcat(\"User changed to owner\"), \"unknown\")\n    | extend Action = \"Change\"\n    | project\n        TimeGenerated,\n        Action,\n        Activity,\n        Actor=UserId,\n        User,\n        TeamName,\n        TeamGuid,\n        ActorType=UserType;\nunion memberadded, memberremoved, memberaccesschanged\n| project-reorder TimeGenerated, Action, Activity, User, Actor, ActorType, TeamName, TeamGuid",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-TeamsAccess",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c709e5c5-d7e5-4ab1-83b1-3d5166b4becb",
        "query_hash": "1185798c191f7c45767e79846ed0bb06241bec0d095c7d39ce2ddc3c7c977cc3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-UserInvestigation.kql",
        "query": "//Single function to investigate potential suspicious activity across several data sources. The function will find the following information.\n//Azure AD Sign in Logs - legacy auth attempts, conditional access failures, new user agents or locations found in the last day\n//Azure AD Audit Logs - add service principals, consent to permissions, add credentials to service principals, any MFA configuration changes\n//Azure AD risk events - any non automatically dismissed risk events\n//Defender for Cloud Apps - mailbox rule changes\n//Security Alert - any alerts from the various products such as Azure AD Identity Protection, Defender for Office 365 etc\n//Save as a function in your workspace then invoke via its name, ie UserInvestigation(\"user@domain.com\"). Your function requires a parameter as per https://github.com/reprise99/Sentinel-Queries/tree/main/Functions\nlet legacyauth=\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where UserPrincipalName =~ user\n| where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\") and isnotempty( ClientAppUsed)\n| extend Indicator = \"Legacy auth attempts detected\"\n| extend ['Event Source'] = \"Azure AD Signin Logs\"\n| project TimeGenerated, UserPrincipalName, AppDisplayName, ClientAppUsed, IPAddress, Location, UserAgent, ResultType, ResultDescription, Indicator, ['Event Source'], TableName=Type, CorrelationId;\nlet cafailures=\nSigninLogs\n| where TimeGenerated > ago (30d)\n| where UserPrincipalName =~ user\n| where ResultType == \"53003\"\n| extend Indicator = \"Conditional Access failures detected\"\n| extend ['Event Source'] = \"Azure AD Signin Logs\"\n| project TimeGenerated, UserPrincipalName, AppDisplayName, ClientAppUsed, IPAddress, tostring(Location), UserAgent, ResultType, ResultDescription, Indicator, ['Event Source'], TableName=Type, CorrelationId;\nlet newuseragents=\nSigninLogs\n| where TimeGenerated > ago(30d) and TimeGenerated < ago(1d)\n| where UserPrincipalName =~ user\n| distinct UserAgent\n| join kind=rightanti (\nSigninLogs\n| where TimeGenerated > ago (1d)\n| where UserPrincipalName =~ user\n) on UserAgent\n| extend Indicator = \"New user agent detected in last day\"\n| extend ['Event Source'] = \"Azure AD Signin Logs\"\n| project TimeGenerated, UserPrincipalName, AppDisplayName, ClientAppUsed, IPAddress, tostring(Location), UserAgent, ResultType, ResultDescription, Indicator, ['Event Source'], TableName=Type, CorrelationId;\nlet newlocations=\nSigninLogs\n| where TimeGenerated > ago(30d) and TimeGenerated < ago(1d)\n| where UserPrincipalName =~ user\n| where TimeGenerated > ago(30d) and TimeGenerated < ago(1d)\n| distinct Location\n| join kind=rightanti (\nSigninLogs\n| where TimeGenerated > ago (1d)\n| where UserPrincipalName =~ user\n) on Location\n| extend Indicator = \"New location detected in last day\"\n| extend ['Event Source'] = \"Azure AD Signin Logs\"\n| project TimeGenerated, UserPrincipalName, AppDisplayName, ClientAppUsed, IPAddress, tostring(Location), UserAgent, ResultType, ResultDescription, Indicator, ['Event Source'], TableName=Type, CorrelationId;\nlet riskevents=\nAADUserRiskEvents\n| where TimeGenerated > ago (30d)\n| where UserPrincipalName =~ (user)\n| where RiskDetail <> \"aiConfirmedSigninSafe\"\n| extend Indicator = \"Azure AD risk event detected\"\n| extend ['Event Source'] = \"Azure AD Risky Signin Logs\"\n| project TimeGenerated, UserPrincipalName, IPAddress=IpAddress, tostring(Location), RiskState, RiskLevel, RiskEventType, RiskDetail, Indicator, ['Event Source'], TableName=Type, CorrelationId;\nlet audit=\nAuditLogs\n| where TimeGenerated > ago (30d)\n| where OperationName in~ (\"Add service principal\",\"Consent to application\",\"Update application \u2013 Certificates and secrets management \",\"User registered security info\", \"User changed default security info\", \"User deleted security info\")\n| extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where UserPrincipalName =~ user\n| extend Indicator = case (\n    OperationName == \"Add service principal\", strcat(\"Azure AD service principal added\"),\n    OperationName == \"Consent to application\", strcat(\"Azure AD service principal permissions consented to\"),\n    OperationName == \"Update application \u2013 Certificates and secrets management \", strcat(\"Azure AD service principal credentials added\"),\n    OperationName == \"User registered security info\", strcat(\"MFA method registered\"),\n    OperationName == \"User changed default security info\", strcat(\"MFA default method changed\"),\n    OperationName == \"User deleted security info\", strcat(\"MFA method deleted\"),\n    \"unknown\"\n    )\n| extend ['Event Source'] = \"Azure AD Audit Logs\"\n| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project TimeGenerated, IPAddress, Indicator, ['Event Source'], TableName=Type, CorrelationId;\nlet cloudapp=\nCloudAppEvents\n| where TimeGenerated > ago (30d)\n| where ActionType in (\"New-InboxRule\",\"Remove-InboxRule\",\"Set-InboxRule\")\n| extend UserPrincipalName = tostring(RawEventData.UserId)\n| where UserPrincipalName =~ user\n| extend CorrelationId = tostring(RawEventData.Id)\n| extend ['Event Source'] = \"Defender for Cloud Apps Logs\"\n| extend Indicator = case (\n    ActionType == \"New-InboxRule\", strcat(\"Exchange Online inbox rule created\"),\n    ActionType == \"Remove-InboxRule\", strcat(\"Exchange Online inbox rule deleted\"),\n    ActionType == \"Set-InboxRule\", strcat(\"Exchange Online inbox rule changed\"),\n    \"unknown\"\n    )\n| project TimeGenerated, UserPrincipalName, IPAddress, Indicator, TableName=Type, ['Event Source'];\nlet alerts=\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where CompromisedEntity =~ user\n| project TimeGenerated, UserPrincipalName=CompromisedEntity, Indicator=AlertName, TableName=Type, ['Event Source']=ProductName;\nunion legacyauth, cafailures, newuseragents, newlocations, riskevents, audit, cloudapp, alerts\n| project-reorder TimeGenerated, UserPrincipalName, Indicator, ['Event Source'], TableName, IPAddress\n| sort by Indicator asc, TimeGenerated desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-UserInvestigation",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cf57a3d9-1e06-439d-b1b3-50747a781255",
        "query_hash": "b44012d813f549f773aa2e9488f345cc4285961ddcc01f10af8160ca515bf37e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-UserLogins.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as UserLogins\n// UserLogins | where UserPrincipalName == \"user1@domain.com\" or AccountName == \"user2\" // will find information for Azure AD user user1@domain.com or AD user user2\n// UserLogins | where Department has \"Human Resources\" // will find information for all Human Resources staff\n// UserLogins | where AccountDisplayName has \"Matt\" and ['Last Azure AD Sign In'] > ago(30m) // will find information for anyone with \"Matt\" in their Azure AD displayname and has signed into Azure AD in the last 30 minutes\n// This will parse the last 30 days of the IdentityInfo, SigninLogs and SecurityEvent tables for logon information\nlet idinfo=\n    IdentityInfo\n    | where TimeGenerated > ago(21d)\n    | summarize arg_max (TimeGenerated, *) by AccountUPN\n    | project\n        UserPrincipalName=AccountUPN,\n        AccountName,\n        AccountDisplayName,\n        JobTitle,\n        Country,\n        City,\n        Department;\nlet aad=\n    SigninLogs\n    | where TimeGenerated > ago(30d)\n    | where ResultType == 0\n    | summarize arg_max(TimeGenerated, *) by UserPrincipalName\n    | project ['Last Azure AD Sign In']=TimeGenerated, UserPrincipalName;\nlet ad=\n    SecurityEvent\n    | where TimeGenerated > ago(30d)\n    | project TimeGenerated, Computer, EventID, TargetUserName\n    | where EventID == \"4624\"\n    | summarize arg_max(TimeGenerated, TargetUserName) by AccountName=TargetUserName\n    | project ['Last AD Sign In']=TimeGenerated, AccountName;\nidinfo\n| lookup aad on UserPrincipalName\n| lookup ad on AccountName\n| project-reorder UserPrincipalName, AccountName, ['Last AD Sign In'], ['Last Azure AD Sign In']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-UserLogins",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4acbc663-5db4-4564-bd5a-77dc9696853f",
        "query_hash": "071fe09f6205a1487f6e9dd1c753040aa5933f738d4c86970a58f2463b368f37",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CFunctions%5CFunction-UserLookup.kql",
        "query": "// Save as a function in your workspace then invoke via its name, i.e if you save as UserLookup\n// UserLookup | where UserPrincipalName == \"user1@domain.com\" // will find information for user1@domain.com\n// UserLookup | where Countries has \"AU\" and ['Authentication Methods'] has \"Windows Hello for Business\" // will find all users who have signed in from Australia and have used WHFB\n// UserLookup | where JobTitle == \"Chief Astronaut\" and IPAddresses has \"10.10.10.10\" // will find all Chief Astronauts who have signed on from 10.10.10.10\n// This will parse the last 14 days of the IdentityInfo, SigninLogs and SecurityAlerts tables for information\nlet identity=\n    IdentityInfo\n    | where TimeGenerated > ago (14d)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | project\n        UserPrincipalName=AccountUPN,\n        AccountName,\n        AccountDisplayName,\n        JobTitle,\n        City,\n        Country;\nlet signininfo=\n    SigninLogs\n    | where TimeGenerated > ago(14d)\n    | where ResultType == 0\n    | extend City = tostring(LocationDetails.city)\n    | extend Country = tostring(LocationDetails.countryOrRegion)\n    | extend DeviceName = tostring(DeviceDetail.displayName)\n    | summarize\n        Applications=make_set(AppDisplayName),\n        IPAddresses=make_set(IPAddress),\n        Countries=make_set_if(Country, isnotempty(Country)),\n        Cities=make_set_if(City, isnotempty(City)),\n        Devices=make_set_if(DeviceName, isnotempty(DeviceName))\n        by UserPrincipalName;\nlet authmethods=\n    SigninLogs\n    | where TimeGenerated > ago(14d)\n    | where ResultType == 0\n    | mv-expand todynamic(AuthenticationDetails)\n    | extend AuthMethod = tostring(AuthenticationDetails.authenticationMethod)\n    | where AuthMethod !in (\"Previously satisfied\", \"Password\", \"Other\")\n    | summarize ['Authentication Methods']=make_set(AuthMethod) by UserPrincipalName;\nlet alerts=\n    SecurityAlert\n    | where TimeGenerated > ago(14d)\n    | extend Alert = strcat(AlertName, \" - \", ProductName)\n    | summarize Alerts=make_set(Alert) by UserPrincipalName=CompromisedEntity;\nidentity\n| lookup signininfo on UserPrincipalName\n| lookup authmethods on UserPrincipalName\n| lookup alerts on UserPrincipalName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Function-UserLookup",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e577f31d-470a-4898-b0d7-72e5f7c3529b",
        "query_hash": "1a1f72b31f5a16d896001abf9e224b38563a4a1f2fbbfa1bc318216b0aba61ae",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CHeartbeat%5CHeartbeat-NoHeartbeatinTimeframe.kql",
        "query": "//Finds computers that haven't sent a heartbeat in the last 30 days\n\n//Data connector required for this query - Heartbeat (created automatically when you onboard machines to Sentinel)\n\nHeartbeat\n| where TimeGenerated > ago(365d)\n| summarize arg_max(TimeGenerated, *) by Computer\n| project\n    Computer,\n    ['Last Heartbeat']=TimeGenerated,\n    ['Days Since Last Heartbeat']=datetime_diff(\"day\", now(), TimeGenerated)\n| where ['Days Since Last Heartbeat'] > 30\n| sort by ['Days Since Last Heartbeat'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Heartbeat-NoHeartbeatinTimeframe",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "93182beb-daed-453a-835b-0fc00222fb94",
        "query_hash": "512154c44617f3c143ba0e7753acaa27a6796e1f944600c09d04d889d72f0f2c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CHeartbeat%5CHeartbeat-VisualizeDistinctComputersperMonth.kql",
        "query": "//Visualize distinct computers per month sending data\n\n//Data connector required for this query - Heartbeat (created automatically when you onboard machines to Sentinel)\n\nHeartbeat\n| where TimeGenerated > ago(365d)\n| summarize Count=dcount(Computer)by Month=startofmonth(TimeGenerated)\n| render columnchart with (title=\"Distinct monthly computers sending data to Microsoft Sentinel\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Heartbeat-VisualizeDistinctComputersperMonth",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b758d13a-f9a9-49d9-be1e-b4e21f57eba8",
        "query_hash": "15a3b8b421d37e59c534394c7d34ac835f5c99fa846b461af1659c8bf39fd4dd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CInformation%20Protection%5CIP-LabelDowngradeThenCopytoUSB.kql",
        "query": "// Detects when a user downgrades a label on a file and that file is then copied to USB\n\n//Data connector required for this query - Azure Information Protection\n//Data connector required for this query - M365 Defender - Device* tables\n\n// Timeframe = the time between the label downgrade and file copy event\nlet timeframe=4h;\nInformationProtectionEvents\n| where Time > ago(1d)\n| where Activity == \"DowngradeLabel\"\n| project LabelChangeTime=Time, User, FileDowngraded=ItemName\n| join kind=inner (\n    DeviceEvents\n    | where TimeGenerated > ago(1d)\n    | where ActionType == \"UsbDriveMounted\"\n    | extend DriveLetter = tostring(todynamic(AdditionalFields).DriveLetter)\n    | join kind=inner (DeviceFileEvents\n        | where TimeGenerated > ago(1d)\n        | project TimeGenerated, ActionType, FileName, FolderPath, DeviceId, DeviceName\n        | extend FileCopyTime = TimeGenerated\n        | where ActionType == \"FileCreated\"\n        | extend FileCopyName = FileName\n        | parse FolderPath with DriveLetter '\\\\' *\n        | extend DriveLetter = tostring(DriveLetter)\n        )\n        on DeviceId, DriveLetter) \n    on $left.FileDowngraded == $right.FileCopyName\n| project LabelChangeTime, FileCopyTime, FileDowngraded, DeviceName, AccountName\n| where (FileCopyTime - LabelChangeTime) between (0min .. timeframe)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IP-LabelDowngradeThenCopytoUSB",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2c1761d3-a02c-4618-9ab3-9c302c0836cb",
        "query_hash": "fefeaff795046b4e5ee81b546cede85731780a9f9f721168db5c6055e4e9abf7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CInformation%20Protection%5CIP-LabelDowngradeThenEmail.kql",
        "query": "// Detects when a user downgrades a label on a file and that file is then emailed outbound \n\n//Data connector required for this query - Azure Information Protection\n//Data connector required for this query - M365 Defender - Email* tables\n\n// Starttime = the amount of data to look back on\n// Timeframe = the time between the label downgrade and email event\nlet starttime=7d;\nlet timeframe=4h;\nInformationProtectionEvents\n| where Time > ago(starttime)\n| where Activity == \"DowngradeLabel\"\n| project LabelChangeTime=Time, User, FileName=ItemName\n| join kind=inner(\n    EmailEvents\n    | where EmailDirection == \"Outbound\"\n    | project\n        TimeGenerated,\n        SenderMailFromAddress,\n        RecipientEmailAddress,\n        EmailDirection,\n        NetworkMessageId\n    | join kind=inner (EmailAttachmentInfo) on NetworkMessageId\n    | project\n        TimeGenerated,\n        SenderMailFromAddress,\n        RecipientEmailAddress,\n        EmailDirection,\n        FileName\n    )\n    on FileName\n| project\n    LabelChangeTime,\n    EmailSendTime=TimeGenerated,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    EmailDirection,\n    FileName\n| where (EmailSendTime - LabelChangeTime) between (0min .. timeframe)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IP-LabelDowngradeThenEmail",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "721ed637-4816-4dc7-af21-a8d305b4f651",
        "query_hash": "aca2cd6ec3d35ffa9475847904694e15c56a840c7c4ed9faeeea35255354a200",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CIntune%5CIntuneDevices-FindDetailsofNonCompliantDevices.kql",
        "query": "//When Azure AD flags a device as non compliant, retrieve the details about the devices from Intune\n\n//Data connector required for this query - Intune data sent to Sentinel workspace\n\n//First find the device name from the 'device no longer compliant' action\nlet devices=\n    AuditLogs\n    | where TimeGenerated > ago (1d)\n    | where OperationName == \"Device no longer compliant\"\n    | extend DeviceName = tostring(TargetResources[0].displayName)\n    | distinct DeviceName;\n//Lookup those devices in the IntuneDevices table, and retrieve the latest record\nIntuneDevices\n| where TimeGenerated > ago (7d)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where DeviceName in (devices)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IntuneDevices-FindDetailsofNonCompliantDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "af55ae13-b340-4353-ba24-d5e28554aaf6",
        "query_hash": "752f5affd40046fe0fb82fcf79fe6ed429a19ca81d91708c3e054171725a4171",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CIntune%5CIntuneDevices-RetrieveDeviceInfoAfterWipe.kql",
        "query": "//When an Intune admin initiates a remote wipe of a managed device, retrieve all the relevant information about the device\n\n//Data connector required for this query - Intune data sent to Sentinel workspace\n\nIntuneAuditLogs\n| where TimeGenerated > ago (1d)\n| where OperationName == \"wipe ManagedDevice\"\n| extend DeviceId = tostring(parse_json(tostring(parse_json(Properties).TargetObjectIds))[0])\n| project TimeGenerated, Actor=Identity, DeviceId\n| join kind=inner(\n    IntuneDevices\n//Go back 7 days to make sure we have information on the device and retrieve the lastest record\n    | where TimeGenerated > ago(7d)\n    | summarize arg_max(TimeGenerated, *) by DeviceId\n    )\n    on DeviceId\n| project\n    TimeGenerated,\n    Actor,\n    DeviceId,\n    Model,\n    SerialNumber,\n    OS,\n    PrimaryUser=UserEmail,\n    Ownership,\n    ManagedBy,\n    LastContact",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IntuneDevices-RetrieveDeviceInfoAfterWipe",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f1e3e471-8481-44e7-be52-fb56bb146c45",
        "query_hash": "41b11a72b405d98f48a2ec854224336d6855d200fab8cf4feebe2e4915e893a1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CIntune%5CIntuneDevices-VisualizeDeviceComplianceovertime.kql",
        "query": "//Visualize device compliance (compliant, non-compliant, managed by Config Manager, not evaluated or in grace period) per week over time\n\n//Data connector required for this query - Intune data sent to Sentinel workspace\n\nIntuneDevices\n| where TimeGenerated > ago (180d)\n| summarize arg_max(DeviceName, *) by DeviceName, startofweek(TimeGenerated)\n| where isnotempty(CompliantState)\n| summarize ComplianceCount=count()by CompliantState, startofweek(TimeGenerated)\n| render timechart\n    with (\n    ytitle=\"Device Count\",\n    xtitle=\"Week\",\n    title=\"Device compliance per week over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IntuneDevices-VisualizeDeviceComplianceovertime",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9ff94dcb-0b9c-4007-9ded-8e6c73a1b181",
        "query_hash": "9baf14b7eaa257b7d742078640c866682c61b63c2cee2d038496c929b2a2b1e7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CIntune%5CIntuneDevices-VisualizeDeviceJoinTypebyWeek.kql",
        "query": "//Visualize the join type (Azure AD joined, Azure AD registered or Hybrid joined) of your MEM/Intune devices per week\n\n//Data connector required for this query - Intune data sent to Sentinel workspace\n\nIntuneDevices\n//Gets all data generated in 180 days\n| where TimeGenerated > ago(180d) \n//Optionally filter only devices have contact to Intune in 30 days\n| where todatetime(LastContact) > ago (30d) \n| summarize arg_max(TimeGenerated, *) by DeviceName, startofweek(TimeGenerated)\n| where OS == \"Windows\"\n| summarize JoinSummary=count()by JoinType, startofweek(TimeGenerated)\n| where isnotempty(JoinType)\n| render columnchart\n    with (\n    kind=unstacked,\n    ytitle=\"Device Count\",\n    xtitle=\"Week\",\n    title=\"Device count by join type per week\") ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IntuneDevices-VisualizeDeviceJoinTypebyWeek",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "86d0fa54-99c3-457b-bed2-51202587b0ab",
        "query_hash": "f1534412b3212b35e83c7c726f7a50008c7ce9ed855f05766b29f6941e5c1bec",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CIntune%5CIntuneDevices-VisualizeLastContact.kql",
        "query": "//Visualize when your devices last contacted Intune\n\n//Data connector required for this query - Intune data sent to Sentinel workspace\n\nIntuneDevices\n| where TimeGenerated > ago(90d)\n| where isnotempty(LastContact)\n//Retrieve latest record for each DeviceId\n| summarize arg_max(TimeGenerated, *) by DeviceId\n//Convert string to datetime format\n| extend LastContactTime = todatetime(LastContact)\n| project DeviceId, LastContactTime\n//Exclude devices reporting as 0001-01-01\n| where LastContactTime <> todatetime('0001-01-01T00:00:00Z')\n//Group by month and render chart\n| summarize ['Device Count']=count()by startofmonth(LastContactTime)\n| render columnchart with (title=\"Intune devices by last contact time\", xtitle=\"Month\")\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IntuneDevices-VisualizeLastContact",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6182433a-3519-4d8a-bd6a-b101336f5f99",
        "query_hash": "c3cc9f01373b35d7676b007473f16afff41151e28d05e53ff83ed58c7622fe04",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CIntune%5CIntuneDevices-VisualizeMatchingDeviceIds.kql",
        "query": "//Visualize devices in intune with the same intune and Azure AD Id per week by join type\n\n//Data connector required for this query - Intune data sent to Sentinel workspace\n\nIntuneDevices\n| where TimeGenerated > ago (180d)\n| summarize arg_max(TimeGenerated, *) by DeviceName, startofweek(TimeGenerated)\n| where DeviceId == ReferenceId\n| where OS == 'Windows'\n| summarize count()by startofweek(TimeGenerated), JoinType\n| where isnotempty( JoinType)\n| render columnchart with (kind=unstacked, title=\"Devices with the same Azure AD and Intune device Id per week by join type\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IntuneDevices-VisualizeMatchingDeviceIds",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d1c75266-0977-4411-a659-d657a182efc4",
        "query_hash": "7c53ee21b106624458f5f5a6cfeb774639084db85f79e1444316c71effbd7187",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CLog%20Analytics%5CLAQuery-FindQueryStats.kql",
        "query": "//Create a list of all tables in Sentinel, then iterate through the list to audit the LAQuery log table to see which are being actively used\n\n//Data connector required for this query - Log Analytics diagnostic settings enabled on your Sentinel workspace\n\nlet tablenames = search * \n    | summarize make_set($table);\nLAQueryLogs\n| mv-apply table=toscalar(tablenames) to typeof(string) on (where QueryText contains ['table'])\n| summarize QueryCount = count()by ['table']\n| order by QueryCount\n| render piechart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "LAQuery-FindQueryStats",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e7bfbb41-6441-4873-a67e-2500477c2717",
        "query_hash": "3292817fc951c434c1a5e6ac756bb41267d80370c54ae674a1e26176d28eec2a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CLog%20Analytics%5CLAQuery-NewUsersQueryingData.kql",
        "query": "//Find users querying your Log Analytics/Sentinel data for the first time\n\n//Data connector required for this query - Log Analytics diagnostic settings enabled on your Sentinel workspace\n\nlet knownusers=\n    LAQueryLogs\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(1d)\n    | distinct AADEmail\n    | where isnotempty(AADEmail);\nLAQueryLogs\n| where TimeGenerated > ago(1d)\n| where AADEmail !in (knownusers)\n| where isnotempty(AADEmail)\n| project TimeGenerated, AADEmail, QueryText",
        "source_type": "text",
        "source_index": 0,
        "query_name": "LAQuery-NewUsersQueryingData",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c904d259-38b4-4fe8-b239-a133b0d09e17",
        "query_hash": "707a12a15a249e55412a534f30b3d22e05ead2a95379de9f7d3a38d8fa0f96a5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CLog%20Analytics%5CLAQuery-UsersvsAutomationQueryStats.kql",
        "query": "//Visualizes queries against your log analytics workspace categorized by users and service principals\n\n//Data connector required for this query - Log Analytics diagnostic settings enabled on your Sentinel workspace\n\nlet timeframe=45d;\nLAQueryLogs\n| where TimeGenerated > ago (timeframe)\n| summarize Users=countif(isnotempty(AADEmail)), Playbooks=countif(isempty(AADEmail)) by bin(TimeGenerated, 1d)\n| render columnchart with (kind=unstacked, ytitle=\"Queries Run\", title=\"Queries Run - Users vs Playbooks\") ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "LAQuery-UsersvsAutomationQueryStats",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "3d419b39-5202-4d51-826e-580d6512c47c",
        "query_hash": "4f2ae6988c01f4d0d3554417905da2e0be48ff193b48eafc9254200de0f71592",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CLog%20Analytics%5CLAQuery-VisualizeQueriesRun.kql",
        "query": "//Visualize how many queries you have run in your Sentinel workspace over the last year\n\nLAQueryLogs\n| where TimeGenerated > ago (365d)\n| where AADEmail == \"username@domain.com\"\n| make-series Count=count() default=0 on TimeGenerated from ago(365d) to now() step 1d\n| render timechart with (title=\"#365daysofKQL queries run per day\", ytitle=\"Count\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "LAQuery-VisualizeQueriesRun",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4699d2c0-3a6b-4374-8fd0-fd7f5950f05b",
        "query_hash": "380ef1371731eef8ec24caac555f8c6c006b67ac96556da04f2d90a3889664a4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CAudit-DailySummaryofO365AdminActivity.kql",
        "query": "//Create a daily summary of activities completed by your O365 admins\n\n//Data connector required for this query - Office 365\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet timerange=14d;\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where AssignedRoles has_any (\"Global Administrator\", \"Exchange Administrator\", \"Teams Administrator\", \"SharePoint Administrator\")\n| project UserId=AccountUPN\n| join kind=inner (\n    OfficeActivity\n    | where TimeGenerated > ago(timerange)\n    )\n    on UserId\n| summarize AdminActivities=make_list(Operation)by UserId, startofday(TimeGenerated)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DailySummaryofO365AdminActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "19c5ebd0-caad-4d55-89bb-5ef21c16b776",
        "query_hash": "1a3a5626e4e12443bfe124d0a8e1264410e39a6d720e3b0fb27206435e019c91",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-FindEmailswithPotentialPhishingURL.kql",
        "query": "//When Defender for Cloud detects a possible DNS lookup to a phishing domain attempt to find if the URL was part of an email phishing attack\n\n//Data connector required for this query - M365 Defender - Email* tables\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nlet suspiciousdomains=\n    SecurityAlert\n    | where AlertName startswith \"Communication with possible phishing domain\"\n    | mv-expand todynamic(Entities)\n    | extend DomainName = tostring(Entities.DomainName)\n    | where isnotempty(DomainName)\n    | distinct DomainName;\nEmailEvents\n| where EmailDirection == \"Inbound\"\n| project\n    TimeGenerated,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    EmailDirection,\n    NetworkMessageId\n| join kind=inner (EmailUrlInfo) on NetworkMessageId\n| project\n    TimeGenerated,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    EmailDirection,\n    Url,\n    UrlDomain\n| where UrlDomain in~ (suspiciousdomains)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-FindEmailswithPotentialPhishingURL",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5dda6e28-a230-4847-b3e9-633a66078690",
        "query_hash": "fa75b9a7e25da752665c5bab6d9554d22fbd95903d4d25e8d85ff23041369bbd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-FindUsersWhoReadMaliciousEmail.kql",
        "query": "//When a malicious email is received, list all the users who received it and all the users who read it\n\n//Data connector required for this query - M365 Defender - Email* tables\n//Data connector required for this query - Office 365\n\n//First find all the users who received the email\nEmailEvents\n| where EmailDirection == \"Inbound\"\n//Add in your malicious subject or malicious sender address\n| where Subject == \"Malicious Subject Name\" or SenderFromAddress == \"malicioususer@domain.com\"\n| project RecipientEmailAddress, Subject, InternetMessageId, SenderFromAddress\n//Combine that data with the OfficeActivity table which tracks whether an email was accessed\n| join kind=inner (\n    OfficeActivity\n    | where Operation == \"MailItemsAccessed\"\n    | mv-expand todynamic(Folders)\n    | extend FolderItems = Folders.FolderItems\n    | mv-expand FolderItems\n    | extend InternetMessageId = tostring(FolderItems.InternetMessageId)\n    | project UserId, InternetMessageId\n    )\n    on InternetMessageId\n//Create summary of data listing the count and all the users who received the email vs the list and count of those that read it\n| summarize\n    ['Receipient Count']=dcount(RecipientEmailAddress),\n    ['Users Who Received Email']=make_set(RecipientEmailAddress),\n    ['Reader Count']=dcount(UserId),\n    ['Users Who Read Email']=make_set(UserId)\n    by SenderFromAddress, Subject, InternetMessageId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-FindUsersWhoReadMaliciousEmail",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f29347f9-bfab-4e1a-acc3-177b568c1088",
        "query_hash": "bb529cbb253ec404471a212317cc90c11036b20ea08aca08492f9bee8f27d2ba",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-MacroReceivedbyEmail.kql",
        "query": "//When a macro is received via email from an external sender, find all users who receieved the same file\n\n//Data connector required for this query - M365 Defender - Email* tables\n\n//Microsoft Sentinel query\nEmailEvents\n| where EmailDirection == \"Inbound\"\n| project\n    TimeGenerated,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    NetworkMessageId\n| join kind=inner (EmailAttachmentInfo) on NetworkMessageId\n| project\n    TimeGenerated,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    FileName\n| where FileName endswith \".xlsm\" or FileName endswith \".xstm\"\n| summarize Recipient=make_set(RecipientEmailAddress) by FileName, SenderMailFromAddress\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nEmailEvents\n| where EmailDirection == \"Inbound\"\n| project\n    Timestamp,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    NetworkMessageId\n| join kind=inner (EmailAttachmentInfo) on NetworkMessageId\n| project\n    Timestamp,\n    SenderMailFromAddress,\n    RecipientEmailAddress,\n    FileName\n| where FileName endswith \".xlsm\" or FileName endswith \".xstm\"\n| summarize Recipient=make_set(RecipientEmailAddress) by FileName, SenderMailFromAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-MacroReceivedbyEmail",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "38647fa0-7886-43e8-b966-973dc8746320",
        "query_hash": "913d058114b65a027290ff13effe5d641de25af622be1dfc9bc21f98ca5de47d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-MostBlockedDomains.kql",
        "query": "//Visualize the most blocked domains sending email inbound to your users\n\n//Data connector required for this query - M365 Defender - Email* tables\n\n//Microsoft Sentinel query\nEmailEvents\n| where TimeGenerated > ago (7d)\n| where EmailDirection == \"Inbound\"\n| where DeliveryAction == \"Blocked\"\n| extend Domain = tostring(split(SenderMailFromAddress, \"@\")[-1])\n| summarize BlockedCount=count()by Domain\n| where isnotempty(Domain)\n| sort by BlockedCount desc\n| render barchart \n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nEmailEvents\n| where Timestamp > ago (7d)\n| where EmailDirection == \"Inbound\"\n| where DeliveryAction == \"Blocked\"\n| extend Domain = tostring(split(SenderMailFromAddress, \"@\")[-1])\n| summarize BlockedCount=count()by Domain\n| where isnotempty(Domain)\n| sort by BlockedCount desc\n| render barchart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-MostBlockedDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "05fc4726-7fce-4692-abf7-4b0904a11640",
        "query_hash": "bf18c2d9ce557115b5d43a0f7e4e65013b40a09b51673c6b2bf5e0e821278129",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-PotentialNewSpammer.kql",
        "query": "//Find senders that are potentially spamming your users for the first time. Useful at detecting business email compromise from partner companies.\n\n//Data connector required for this query - M365 Defender - Email* tables\n\n//Set a threshold of the same email being received within a 10 minute period\n//Microsoft Sentinel query\nlet threshold = 500;\n//First create a list of sender addresses that have previously sent you bulk email, hopefully this will let us exclude corporate communications and newsletters etc\nlet knownbulkemail=\n    EmailEvents\n    | where TimeGenerated > ago(30d) and TimeGenerated < ago (1d)\n    | project TimeGenerated, EmailDirection, DeliveryAction, RecipientEmailAddress, SenderFromAddress, Subject\n    | where EmailDirection == \"Inbound\"\n    | where DeliveryAction == \"Delivered\"\n    | summarize RecipientCount=dcount(RecipientEmailAddress) by SenderFromAddress, Subject, bin(TimeGenerated, 10m)\n    | where RecipientCount > threshold\n    | distinct SenderFromAddress;\n//Look in the last hour for any new senders that have sent over the threshold in a 10 minute period\nEmailEvents\n| where TimeGenerated > ago(1d)\n| project TimeGenerated, EmailDirection, DeliveryAction, RecipientEmailAddress, SenderFromAddress, Subject\n| where EmailDirection == \"Inbound\"\n| where DeliveryAction == \"Delivered\"\n| summarize RecipientCount=dcount(RecipientEmailAddress) by SenderFromAddress, Subject, bin(TimeGenerated, 10m)\n| where SenderFromAddress !in (knownbulkemail) and RecipientCount > threshold\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n\nlet threshold = 500;\n//First create a list of sender addresses that have previously sent you bulk email, hopefully this will let us exclude corporate communications and newsletters etc\nlet knownbulkemail=\n    EmailEvents\n    | where Timestamp > ago(30d) and Timestamp < ago (1d)\n    | project Timestamp, EmailDirection, DeliveryAction, RecipientEmailAddress, SenderFromAddress, Subject\n    | where EmailDirection == \"Inbound\"\n    | where DeliveryAction == \"Delivered\"\n    | summarize RecipientCount=dcount(RecipientEmailAddress) by SenderFromAddress, Subject, bin(Timestamp, 10m)\n    | where RecipientCount > threshold\n    | distinct SenderFromAddress;\n//Look in the last hour for any new senders that have sent over the threshold in a 10 minute period\nEmailEvents\n| where Timestamp > ago(1d)\n| project Timestamp, EmailDirection, DeliveryAction, RecipientEmailAddress, SenderFromAddress, Subject\n| where EmailDirection == \"Inbound\"\n| where DeliveryAction == \"Delivered\"\n| summarize RecipientCount=dcount(RecipientEmailAddress) by SenderFromAddress, Subject, bin(Timestamp, 10m)\n| where SenderFromAddress !in (knownbulkemail) and RecipientCount > threshold",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-PotentialNewSpammer",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1d2d52db-566b-4baf-889f-ee98c6af2060",
        "query_hash": "0b3ec895f9f7ee8dfaf81b14363a49778005bfc0d58ebfb5f6c07abd1330759d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-VisualizeBlockedEmailDeviation.kql",
        "query": "//Visualize the deviation of email being blocked to your Office 365 tenant per day\n//Query adapted from https://github.com/samikroy/kql-store/blob/main/Deviation%20in%20Security%20Events.md\n\n//Data connector required for this query - M365 Defender - Email* tables\n\n//Find the average blocked email per day\nlet AverageBlockedEmail = toscalar(EmailEvents\n| where TimeGenerated > ago(250d)\n| where DeliveryAction == \"Blocked\"\n| summarize Count=count() by bin(TimeGenerated, 1d)\n| summarize avg(Count));\n//Find the total count of blocked email per day\nEmailEvents\n| where TimeGenerated > ago(250d)\n| where DeliveryAction == \"Blocked\"\n| summarize Count=count() by bin(TimeGenerated, 1d)\n| extend Deviation = (Count - AverageBlockedEmail) / AverageBlockedEmail\n| project-away Count\n//Visualize the deviation per day\n| render columnchart with (title=\"Deviation of email blocked per day\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-VisualizeBlockedEmailDeviation",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2b4ee2cb-1d1e-4d2d-b4b0-36387bf62250",
        "query_hash": "ba6824caf3032869a7a6c16ee43cbc42a6d836c27407953249f43db15cd2269b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-VisualizeBlockedEmailPercentage.kql",
        "query": "//Visualize how much is email is being blocked as a percentage of total email over time\n\n//Data connector required for this query - M365 Defender - Email* tables\n\nEmailEvents\n| where TimeGenerated > ago (30d)\n| where EmailDirection == \"Inbound\"\n| summarize\n    TotalCount=count(),\n    BlockedCount=countif(DeliveryAction in (\"Blocked\", \"Junked\"))\n    by bin(TimeGenerated, 6h)\n| extend Percentage=(todouble(BlockedCount) * 100 / todouble(TotalCount))\n| project-away TotalCount, BlockedCount\n| render timechart with (title=\"Percentage of email blocked over time\", ymax=100)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-VisualizeBlockedEmailPercentage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2ce3885d-bd23-4b05-9c84-db1971b83bcd",
        "query_hash": "c1fd6557eb3323fcba4aa0f59170fa1a0499c555bafee6437a53cc094799e07f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-VisualizeDeliveryActions.kql",
        "query": "//Visualize inbound email actions (Delivered, Junked, Blocked) per day over time\n\n//Data connector required for this query - M365 Defender - Email* tables\n\n//Microsoft Sentinel query\nEmailEvents\n| where TimeGenerated > ago (90d)\n| where EmailDirection == \"Inbound\"\n| summarize Count=count()by DeliveryAction, bin(TimeGenerated, 1d)\n| render columnchart with (kind=unstacked, title=\"Email delivery actions over time\")\n\n//Advanced Hunting query. Advanced hunting only retains 30 days data, so to show a similar visualization, we can slice the vents up into 6 hour blocks\n\n//Data connector required for this query - Advanced Hunting license\n\nEmailEvents\n| where Timestamp > ago (30d)\n| where EmailDirection == \"Inbound\"\n| summarize count()by DeliveryAction, bin(Timestamp, 6h)\n//Advanced hunting cannot visualize column charts as well as Sentinel so rendering as a timechart produces a better result\n| render timechart  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-VisualizeDeliveryActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e100bbd4-1ad2-4263-a302-eaa31d01391c",
        "query_hash": "9fb9ff10f8c2e9f03721b9737b9ae1d0bc2c01e256c4b9771ef1e4d1fd5bed6b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5CEmailEvents-VisualizePostDeliveryActions.kql",
        "query": "//Visualize any post delivery actions such as email being quarantined or deleted by admins\n\n//Data connector required for this query - M365 Defender - Email* tables\n\nEmailPostDeliveryEvents\n| where TimeGenerated > ago (90d)\n| where Action !in (\"None\", \"Unknown\")\n| make-series Count=count() on TimeGenerated from ago(45d) to now() step 1d by Action\n| render timechart with (title=\"Email post delivery actions over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "EmailEvents-VisualizePostDeliveryActions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d6a54840-3637-4369-9251-597605ad2c15",
        "query_hash": "ec925dc2772a531b6a05c331f7a2a020a2b15c2a5b31918dc17e9c2fccc7b033",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COffice-DownloadsfromGuestafterAddedtoTeams.kql",
        "query": "// Finds guest accounts who were added to a Team and then downloaded documents straight away. \n\n//Data connector required for this query - Office 365\n\n// Startime = Amount of time to look back on, i.e last 7 days.\n// Timeframe = looks for downloads for this period after being added to the Team, i.e 2 hours after being added.\nlet starttime = 7d;\nlet timeframe = 2h;\nlet operations = dynamic([\"FileSyncDownloadedFull\", \"FileDownloaded\"]);\nOfficeActivity\n| where TimeGenerated > ago(starttime)\n| where Operation == \"MemberAdded\"\n| mv-expand Members\n| extend UserAdded = tostring(Members.UPN)\n| where UserAdded contains \"#EXT#\"\n| where CommunicationType == \"Team\"\n| project TimeAdded=TimeGenerated, UserId=tolower(UserAdded)\n| join kind=inner\n    (\n    OfficeActivity\n    | where TimeGenerated > ago(starttime)\n    | where Operation in (['operations'])\n    )\n    on UserId\n| project DownloadTime=TimeGenerated, TimeAdded, FileName=SourceFileName, UserId\n| where (DownloadTime - TimeAdded) between (0min .. timeframe)\n//Optionally summarize the data into the activity by each guest\n| summarize\n    ['Count of Files Downloaded']=count(),\n    ['List of Files Downloaded']=make_set(FileName)\n    by UserId\n| sort by ['Count of Files Downloaded'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Office-DownloadsfromGuestafterAddedtoTeams",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b36ae73d-b96f-4a87-9f04-d59f02fc5a0d",
        "query_hash": "e9b6ebbe8495e53d7a34df7c07eadebf2796dab1273af7db9032584c65fe239b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-AnomalousDownloadsfromGuests.kql",
        "query": "//Detect anomalies in the amount of downloads from your Office 365 tenant by guest accounts.\n\n//Data connector required for this query - Office 365\n\n//Starttime and endtime = which period of data to look at, i.e from 21 days ago until today.\nlet startdate=21d;\nlet enddate=1d;\n//Timeframe = time period to break the data up into, i.e 1 hour blocks.\nlet timeframe=1h;\n//Sensitivity = the lower the number the more sensitive the anomaly detection is, i.e it will find more anomalies, default is 1.5\nlet sensitivity=2;\n//Threshold = set this to tune out low count anomalies, i.e when total downloads are only over 300 per hour\nlet threshold=300;\nlet outlierusers=\nOfficeActivity\n| where TimeGenerated between (startofday(ago(startdate))..startofday(ago(enddate)))\n| where Operation in (\"FileSyncDownloadedFull\",\"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| make-series GuestDownloads=count() on TimeGenerated from startofday(ago(startdate)) to startofday(ago(enddate)) step timeframe by UserId\n| extend outliers=series_decompose_anomalies(GuestDownloads, sensitivity)\n| mv-expand TimeGenerated, GuestDownloads, outliers\n| where outliers == 1 and GuestDownloads > threshold\n//Optionally visualize the anomalies - remove everything below this line to just retrieve the data instead of visualizing\n| distinct UserId;\nOfficeActivity\n| where TimeGenerated between (startofday(ago(startdate))..startofday(ago(enddate)))\n| where Operation in (\"FileSyncDownloadedFull\",\"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| where UserId in (outlierusers)\n| make-series GuestDownloads=count() default=0 on TimeGenerated from startofday(ago(startdate)) to startofday(ago(enddate)) step timeframe by UserId \n| render timechart with (ytitle=\"Download Count\",title=\"Anomalous Guest Downloads from Office 365\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-AnomalousDownloadsfromGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9f165797-2d14-4563-add3-a9da8dd16855",
        "query_hash": "89113330e4317cc5d6e313648a40213a4d5c7aef1913737fe2fe95781f9eb0ca",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-AnomalousGuestFileShares.kql",
        "query": "//Detect anomalies in the amount of files shared to guests in your Office 365 tenant from your users.\n\n//Data connector required for this query - Office 365\n\n//Starttime and endtime = which period of data to look at, i.e from 21 days ago until today.\nlet startdate=21d;\nlet enddate=1d;\n//Timeframe = time period to break the data up into, i.e 1 hour blocks.\nlet timeframe=1h;\n//Sensitivity = the lower the number the more sensitive the anomaly detection is, i.e it will find more anomalies, default is 1.5\nlet sensitivity=2;\n//Threshold = set a threshold to account for low volume anomailies, i.e moving from 1 file shared to 2 within an hour\nlet threshold = 5;\nlet outlierusers=\nOfficeActivity\n| where Operation in (\"AddedToSecureLink\",\"SecureLinkCreated\",\"SecureLinkUpdated\")\n| where TargetUserOrGroupType == \"Guest\" or TargetUserOrGroupName contains \"#ext#\"\n| make-series GuestFileShares=count() on TimeGenerated from startofday(ago(startdate)) to startofday(ago(enddate)) step timeframe by UserId\n| extend outliers=series_decompose_anomalies(GuestFileShares, sensitivity)\n| mv-expand TimeGenerated, GuestFileShares, outliers\n| where outliers == 1 and GuestFileShares > threshold\n//Optionally visualize the anomalies - remove everything below this line to just retrieve the data instead of visualizing\n| distinct UserId;\nOfficeActivity\n| where Operation in (\"AddedToSecureLink\",\"SecureLinkCreated\",\"SecureLinkUpdated\")\n| where TargetUserOrGroupType == \"Guest\" or TargetUserOrGroupName contains \"#ext#\"\n| where UserId in (outlierusers)\n| make-series GuestFileShares=count() default=0 on TimeGenerated from startofday(ago(startdate)) to startofday(ago(enddate)) step timeframe by UserId \n| render timechart with (ytitle=\"Share Count\",title=\"Anomalous Files Shared to Guests\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-AnomalousGuestFileShares",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b1b4654b-689b-475d-ab73-f9b9ac7ea46c",
        "query_hash": "077b8bc5a5ea4031e8175f6ca85b018d936223dc46e6c5139ff18bb7c86b23a5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-CalculatePercentageofDownloadsforTopGuests.kql",
        "query": "//Find the top 20 guests who are downloading files from your tenant and calculate the percentage of total downloads from those users. Useful to see if you have a few guests responsible for most of the downloads in your tenant.\n\n//Data connector required for this query - Office 365\n\n//First find the count of all downloads by guests in your tenant\nlet totalguestdownloads=\n    OfficeActivity\n    | where TimeGenerated > ago(30d)\n    | where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n    | where UserId contains \"#EXT#\"\n    | count\n//Extend a fake column we will use to join our two queries\n    | extend ['Total Download Count'] = Count, Constant=\"x\";\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n//Extend the same fake column to use to join our two queries\n| extend Constant=\"x\"\n| extend ['Guest UserPrincipalName'] = tostring(split(UserId, \"#\")[0])\n//Summarize download count by each guest and join to our first query\n| summarize ['Individual Download Count']=count()by ['Guest UserPrincipalName'], Constant\n| join kind=fullouter totalguestdownloads on Constant\n| project-away Constant, Constant1, Count\n| sort by ['Individual Download Count'] desc \n//Take the top 20 and then calculate the percentage\n| take 20\n| extend ['Percentage of Total Downloads']=(todouble(['Individual Download Count']) * 100 / todouble(['Total Download Count']))",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-CalculatePercentageofDownloadsforTopGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "02c13cfb-fd20-4045-89d6-3244accfeeae",
        "query_hash": "ffa493b2090577cc41eca787b48cdc3f8cf4509f1dfa14a6847a2410d20b552a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-CalculatePercentageofDownloadsperDomain.kql",
        "query": "//Calculate the percentage that each guest domain is contributing to total downloads from your Office 365 tenant\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| extend ['Guest UserPrincipalName'] = tostring(split(UserId, \"#\")[0])\n| extend ['Guest Domain'] = tostring(split(['Guest UserPrincipalName'], \"_\")[-1])\n| summarize Count=count() by ['Guest Domain']\n| as T\n| extend Percentage = round(100.0 * Count / toscalar (T\n    | summarize sum(Count)), 2)\n| project-reorder ['Guest Domain'], Count, Percentage\n| sort by Percentage desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-CalculatePercentageofDownloadsperDomain",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0fcd2212-136f-4f57-8213-ad1fdfe5d2ea",
        "query_hash": "506595a81fe66ccb3026cd55a7236ddb79d7b6505d1e0c4f25bd3bd4027d8133",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-CalculatePercentageofDownloadsUntrustedDevices.kql",
        "query": "//Find the top 20 users who are downloading files from your tenant from untrusted devices and calculate the percentage of downloads from those users vs all untrusted downloads. Useful to see if you have a few users responsible for most of the downloads in your tenant.\n\n//Data connector required for this query - Office 365\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| extend DeviceTrustType = tostring(DeviceDetail.trustType)\n| distinct UserPrincipalName, IPAddress, DeviceTrustType\n| join kind=inner(\n    OfficeActivity\n    | where TimeGenerated > ago(30d)\n    | where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n    )\n    on $left.UserPrincipalName == $right.UserId, $left.IPAddress == $right.ClientIP\n| where isempty(DeviceTrustType)\n| summarize Count=count() by UserPrincipalName\n| as T\n| extend Percentage = round(100.0 * Count / toscalar (T\n    | summarize sum(Count)), 2)\n| project-reorder UserPrincipalName, Count, Percentage\n| top 20 by Percentage desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-CalculatePercentageofDownloadsUntrustedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d8796924-9cf5-4b23-aef4-5995c9b49e79",
        "query_hash": "7634637c31bea99ba1852f1b02db18da4c12766db9fbd9b498968aa922fc565f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-CalculateTimetoDetectMalware.kql",
        "query": "//Calculate the time Office 365 took to detect malware after the file was uploaded\n\n//Data connector required for this query - Office 365\n\n//First find the malware detection event\nOfficeActivity\n| where TimeGenerated > ago(60d)\n| where Operation == \"FileMalwareDetected\"\n| project\n    DetectionTime=TimeGenerated,\n    OfficeWorkload,\n    ['File Name']=SourceFileName,\n    ['File Location']=OfficeObjectId\n//Then join back to the upload event on the same file location\n| join kind=inner \n    (\n    OfficeActivity\n    | where TimeGenerated > ago (60d)\n    | where Operation in (\"FileUploaded\", \"FileSyncUploadedFull\")\n    | project\n        UploadTime=TimeGenerated,\n        OfficeWorkload,\n        ['File Name']=SourceFileName,\n        ['File Location']=OfficeObjectId,\n        ['Relative File URL']=SourceRelativeUrl\n    | summarize min(UploadTime) by ['File Location'], UploadTime\n    )\n    on ['File Location']\n//Calculate the time difference between upload and malware detection\n| project\n    ['File Name'],\n    UploadTime,\n    DetectionTime,\n    ['Time Difference in Minutes']=datetime_diff(\"minute\", DetectionTime, UploadTime),\n    ['File Location']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-CalculateTimetoDetectMalware",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b10e02f0-02a4-4c59-b243-8eaae6d9a466",
        "query_hash": "6f0e8a1d268c63801a67e759ad8eb86f50fb02e0f03a817996ebdc2a1ad19202",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-DetectEmailsReadbyAdmins.kql",
        "query": "//Detects users with global or exchange administrator roles who have accessed email items from mailboxes other than their own\n\n//Data connector required for this query - Office 365\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nlet timeframe=30d;\nlet adminusers=\nIdentityInfo\n| where TimeGenerated > ago(21d)\n| where AssignedRoles has_any (\"Exchange Administrator\", \"Global Administrator\")\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| project UserId=AccountUPN;\nOfficeActivity\n| where TimeGenerated > ago(timeframe)\n| where OfficeWorkload == \"Exchange\"\n| where Operation == \"MailItemsAccessed\"\n| where UserId in (adminusers)\n| where UserId != MailboxOwnerUPN\n| project AccessTime=TimeGenerated, UserId, MailboxOwnerUPN, Folders",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-DetectEmailsReadbyAdmins",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6dca9080-3bb3-4532-8450-fe3be1a9d557",
        "query_hash": "022690e695feb58d18bb83031a730930f7393d5e06926e3e2ab1de0598b99fda",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-DetectFullMailboxAccess.kql",
        "query": "//Detect when an Exchange admin grants full mailbox access to another user\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where RecordType == \"ExchangeAdmin\"\n| where Operation == \"Add-MailboxPermission\"\n| parse-where Parameters with * 'Identity\",\"Value\":\"' TargetMailbox '\"' *\n| parse-where Parameters with * 'User\",\"Value\":\"' UserGivenAccess '\"' *\n| parse-where Parameters with * 'AccessRights\",\"Value\":\"' AccessRights '\"' *\n| project\n    TimeGenerated,\n    Actor=UserId,\n    ['Target Mailbox']=TargetMailbox,\n    ['Target Mailbox DisplayName']=OfficeObjectId,\n    ['User Granted Access']=UserGivenAccess,\n    ['Access Type']=AccessRights\n| where Actor != \"NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.Servicehost)\"\n| sort by TimeGenerated desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-DetectFullMailboxAccess",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e6ff8ee0-b138-42ef-9a49-431f12919fa6",
        "query_hash": "4a85812014d6526ccca52ff9c671993da7d670099ab1b51c73577ae46fd62572",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-DetectNewExchangeAdminRole.kql",
        "query": "//Detect when a new Exchange admin role is created and parse the permissions\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where Operation == \"New-RoleGroup\"\n| where RecordType == \"ExchangeAdmin\"\n| parse Parameters with * 'Name\",\"Value\":\"' ['Role Name'] '\"' *\n| parse Parameters with * 'Roles\",\"Value\":\"' ['Permissions Added'] '\"' *\n| project TimeGenerated, Actor=UserId, ['Role Name'], ['Permissions Added']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-DetectNewExchangeAdminRole",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "72ea2d94-26d3-43d3-b62e-c99a28f345e5",
        "query_hash": "06e261c2785c45ac9796976b1651b4516fe48c4fa440552d19b325ee000bb4c7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-DetectUsermadeOwneronmultipleTeams.kql",
        "query": "//Detect when a user is made an owner on multiple Teams in a short time frame.\n\n//Data connector required for this query - Office 365\n\n//Define a time period to check and the threshold of how many Teams to alert on.\n//This example would find users added as an owner to 3 or more Teams within 30 minutes.\nlet timeframe=30m;\nlet threshold=3;\nOfficeActivity\n| where TimeGenerated > ago(1d)\n| where Operation == \"MemberRoleChanged\"\n| mv-expand Members\n| extend RoleAdded = tostring(Members.Role)\n| extend UserAdded = tostring(Members.UPN)\n| where RoleAdded == 2\n| project TimeGenerated, RoleAdded, UserAdded, TeamName\n| summarize\n    ['Number of Teams Made Owner']=dcount(TeamName), ['Team Names']=make_set(TeamName) by UserAdded, bin(TimeGenerated, timeframe)\n| where ['Number of Teams Made Owner'] >= threshold",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-DetectUsermadeOwneronmultipleTeams",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "dd3a4537-ac7b-465f-b35a-0a2e68f887fa",
        "query_hash": "7e301d08ffb19e4f6c78d496208fcff91f7c24708a3ccc3a8223e135db17502a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-ExchangeScopingPolicyApplied.kql",
        "query": "//Detect when a new scoping policy is applied, scoping policies are used to limit permissions to Exchange mailboxes being accessed via OAuth. They should be configured with least privilege\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where Operation == \"New-ApplicationAccessPolicy\"\n| extend GroupPolicyAppliedTo = tostring(parse_json(Parameters)[1].Value)\n| extend AppId = tostring(parse_json(Parameters)[0].Value)\n| extend AccessRight = tostring(parse_json(Parameters)[2].Value)\n| project TimeGenerated, Actor=UserId, Operation, AccessRight, GroupPolicyAppliedTo, AppId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-ExchangeScopingPolicyApplied",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e9cf1e41-0ffa-46ea-bc84-ff6e961bcac6",
        "query_hash": "2698c331a84f6da1840c8e5f1caea5eed11a2838c31a5b0ed3af9cb4aee208b2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-FilesSharedtoGuestsfromOnedrive.kql",
        "query": "//Find when files are shared from OneDrive to third party guests\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(7d)\n| where OfficeWorkload == \"OneDrive\"\n| where Operation in (\"SecureLinkCreated\", \"AddedToSecureLink\")\n| where TargetUserOrGroupType == \"Guest\" or TargetUserOrGroupName contains \"#EXT#\"\n| project\n    TimeGenerated,\n    ['User Who Shared']=UserId,\n    ['Guest Granted Access']=TargetUserOrGroupName,\n    ['File Shared']=OfficeObjectId\n| sort by TimeGenerated desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-FilesSharedtoGuestsfromOnedrive",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "957f5127-f786-4b3d-b75d-12b24d98df0f",
        "query_hash": "cfbea41d4ec3f1f906e6d95a3458cbec4222efa6b79b5fa614d06b3a2e3b21a3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-FindNewOperations.kql",
        "query": "//Find any new operations audited in Office 365 in the last 14 days vs the previous 180 days\n\n//Data connector required for this query - Office 365\n\nlet existingoperations=\n    OfficeActivity\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(14d)\n    | distinct Operation;\nOfficeActivity\n| where TimeGenerated > ago(14d)\n| summarize arg_min(TimeGenerated, *) by Operation\n| where Operation !in (existingoperations)\n| project ['Time First Seen']=TimeGenerated, Operation, OfficeWorkload",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-FindNewOperations",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "09ff392e-5ff4-4bcc-b977-f3b94aae6861",
        "query_hash": "1cdffb344b4dea9e350f1eedae8ffd945c0ddddc47d429c7f5a854fd491e1088",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-FindUserswhoDownloadedMalware.kql",
        "query": "//When Office 365 detects malware in OneDrive or SharePoint find any users that downloaded the same file\n\n//Data connector required for this query - Office 365\n\nlet malware=\n    OfficeActivity\n    | where TimeGenerated > ago(1d)\n    | where Operation == \"FileMalwareDetected\"\n    | distinct OfficeObjectId;\nOfficeActivity\n| where TimeGenerated > ago (1d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where OfficeObjectId in (malware)\n| summarize ['Users who Downloaded']=make_set(UserId) by ['File Name']=OfficeObjectId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-FindUserswhoDownloadedMalware",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ccdb5198-6b7c-4f35-84c5-154ae5290e75",
        "query_hash": "11534ecceb3740e3a21c721cf2f45de601cad7f58a7fc3e003af8a54431f5d41",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-GuestAddedtoMultipleTeams.kql",
        "query": "//Detect when a guest is added to multiple Teams in a short time frame.\n\n//Data connector required for this query - Office 365\n\n//Define a time period to check and the threshold of how many Teams to alert on.\nlet timeframe=15m;\nlet threshold=2;\nOfficeActivity\n| where TimeGenerated > ago(1d)\n| where Operation == \"MemberAdded\"\n| mv-expand Members\n| extend UserAdded = tostring(Members.UPN)\n| where UserAdded contains \"#EXT#\"\n| where CommunicationType == \"Team\"\n| summarize\n    ['Number of Teams Guest Added To']=dcount(TeamName), ['Team Names']=make_set(TeamName) by UserAdded, bin(TimeGenerated, timeframe)\n| where ['Number of Teams Guest Added To'] >= threshold",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-GuestAddedtoMultipleTeams",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fd422100-bd15-4b7c-bba2-76dbcf4947dd",
        "query_hash": "b4b86ecec0a60ba05870320cbe33a273f6f96bd4cf0c38f652295e1e18147f59",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-GuestDomainsHighestDownloads.kql",
        "query": "//Summarize the total count of downloads from Office 365 for each of your guest domains\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| extend ['Guest UserPrincipalName'] = tostring(split(UserId,\"#\")[0])\n| extend ['Guest Domain'] = tostring(split(['Guest UserPrincipalName'],\"_\")[-1])\n| project ['Guest Domain']\n| summarize ['Download Count']=count()by ['Guest Domain']\n| sort by ['Download Count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-GuestDomainsHighestDownloads",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c9369e3c-505b-4f3e-a6aa-655f56325878",
        "query_hash": "cf4cdc82ef29d0834a60246b7e05d2fff63d6c70fe0a3d4404d7b1adb054c057",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-MalwareDetected.kql",
        "query": "//Alerts when a file believed to be malware is uploaded to your Office 365 tenant in SharePoint or OneDrive\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation == \"FileMalwareDetected\"\n| project\n    TimeGenerated,\n    OfficeWorkload,\n    ['File Name']=SourceFileName,\n    ['File Location']=OfficeObjectId,\n    ['Relative File URL']=SourceRelativeUrl,\n    ClientIP\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-MalwareDetected",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "982875d5-1a91-45c6-8df9-ac5b3cd8f9f4",
        "query_hash": "a31fe0d89b2eedcc9fe4f6942a2dfe5c7cb80f3580a263b5f9796b044d78051b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-MultipleFilesSharedtoGuests.kql",
        "query": "//Detect when a user shares multiple files to Azure AD guests over a short time frame.\n\n//Data connector required for this query - Office 365\n\n//Define a time period to check and the threshold of how many files to alert on.\n//In this example it would detect when a user shares 10 or more files to a guest within 30 minutes\nlet timeframe=30m;\nlet threshold=10;\nOfficeActivity\n| where TimeGenerated > ago(1d)\n| where Operation in (\"SecureLinkCreated\", \"AddedToSecureLink\")\n| where TargetUserOrGroupType == \"Guest\" or TargetUserOrGroupName contains \"#EXT#\"\n| summarize\n    ['File Share Count']=dcount(OfficeObjectId),\n    ['List of Files']=make_set(OfficeObjectId)\n    by UserId, bin(TimeGenerated, timeframe)\n| where ['File Share Count'] >= threshold",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-MultipleFilesSharedtoGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "828b2460-0d22-4c7a-92cd-4a4b49b4a090",
        "query_hash": "ce8f8b44770205c9cfe077155b1cebd62b2cc202e8879bae48cdb36d3ecf5916",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-NewTeamsAppInstalled.kql",
        "query": "//Detect when an app is installed into Teams for the first time compared to the previous timerange\n\n//Data connector required for this query - Office 365\n\nlet knownapps=\n    OfficeActivity\n    | where TimeGenerated > ago(180d) and TimeGenerated < ago(7d)\n    | where OfficeWorkload == \"MicrosoftTeams\"\n    | where Operation == \"AppInstalled\"\n    | distinct AzureADAppId;\nOfficeActivity\n| where TimeGenerated > ago (7d)\n| where OfficeWorkload == \"MicrosoftTeams\"\n| where Operation == \"AppInstalled\"\n| where AzureADAppId !in (knownapps)\n| project TimeGenerated, UserId, AddonName, AzureADAppId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-NewTeamsAppInstalled",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "02d22e99-e67b-466a-9ef0-10f83a9558e9",
        "query_hash": "4716f1b1d26fdde83af826b9a595256295783f9a64d8ef4e022acbc1f019068b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SharedTeamsChannelCreated.kql",
        "query": "//Detect when a shared Teams channel is created\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where Operation == \"ChannelAdded\"\n| where ChannelType == \"Shared\"\n| project TimeGenerated, Actor=UserId, TeamName, ChannelType, ChannelName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SharedTeamsChannelCreated",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "afc0f105-63d5-4ca6-b278-49225c535402",
        "query_hash": "9171939409c8ee96136a409912ac76a4ab113f845291d48504578fdcbd993d1b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SummarizeDownloadActivitybyGuests.kql",
        "query": "//Summarize the total count and the list of files downloaded by guests in your Office 365 tenant\n\n//Data connector required for this query - Office 365\n\nlet timeframe=7d;\nOfficeActivity\n| where TimeGenerated > ago(timeframe)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| summarize\n    ['Count of Downloads']=count(),\n    ['List of Files Downloaded']=make_set(OfficeObjectId)\n    by UserId\n| sort by ['Count of Downloads'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SummarizeDownloadActivitybyGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1617f511-7208-4ccb-bd8a-139e59d447be",
        "query_hash": "d697cda485079702a7bd9ea46e93fa1c4cf54267a01909b69a843ec03ecc6d10",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SummarizeGuestsAddedtoTeams.kql",
        "query": "//Find any of your Teams that have had guests added to them in the last week and arrange by the Teams with the most guests added.\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(7d)\n| where Operation == \"MemberAdded\"\n| mv-expand Members\n| extend UserAdded = tostring(Members.UPN)\n| where UserAdded contains \"#EXT#\"\n| where CommunicationType == \"Team\"\n| summarize\n    ['Number of Guests Added']=dcount(UserAdded),\n    ['List of Guests Added']=make_set(UserAdded)\n    by TeamName\n| sort by ['Number of Guests Added'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SummarizeGuestsAddedtoTeams",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "dfca4f96-a8bb-4406-b2df-7cf59a2cc710",
        "query_hash": "5f09dcc0bc99158203a9d9f80cdedab7176f398e9ec4d1045ddfb0aff20baa03",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SummarizeTeamsAppInstalls.kql",
        "query": "//Summarize the applications installed into Teams in the last month. Apps are grouped into the scope they were installed to - Team, Chat or User and by name and application id\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago (30d)\n| where Operation == \"AppInstalled\"\n| summarize\n    ['App Installed to Team Scope']=countif(OperationScope == \"Team\"),\n    ['App Installed to Chat Scope']=countif(OperationScope == \"Chat\"),\n    ['App Installed to User Scope']=countif(OperationScope == \"User\")\n    by AddonName, AzureADAppId\n| sort by AddonName asc  ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SummarizeTeamsAppInstalls",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8d3d0594-01cd-443b-8b49-9c7ae639fd11",
        "query_hash": "20a034c1376e3577fd19d3b5f5e94d42d5566bccced343b92977721f9d58be71",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SummarizeTeamsCreatedDeleted.kql",
        "query": "//Create a weekly summary of Teams created and deleted in your Office 365 tenant\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"TeamCreated\", \"TeamDeleted\")\n| summarize\n    ['Count of Teams Created']=dcountif(TeamName, Operation == \"TeamCreated\"),\n    ['List of Teams Created']=make_set_if(TeamName, Operation == \"TeamCreated\"),\n    ['Count of Teams Deleted']=dcountif(TeamName, Operation == \"TeamDeleted\"),\n    ['List of Teams Deleted']=make_set_if(TeamName, Operation == \"TeamDeleted\")\n    by Week=startofweek(TimeGenerated)\n| sort by Week desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SummarizeTeamsCreatedDeleted",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fe16fc73-a049-461e-9500-1d7cb9007290",
        "query_hash": "2a88adceb83744b56d1974dae10c42098f44da070f891d5cf67ec8b9a9a9630d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-SummaryofExternalActivity.kql",
        "query": "//Create a set of users external to your organization who have accessed Office files after being shared. Events are grouped by the user who shared the document, and what activities were performed against it and by which external account.\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| project LinkCreatedTime=TimeGenerated, Operation, UserWhoShared=UserId, OfficeObjectId\n| where Operation in ('AddedToSecureLink', 'SecureLinkCreated', 'SecureLinkUpdated', 'SharingInvitationCreated')\n| join kind=inner\n    (OfficeActivity\n    | project LinkClickedTime=TimeGenerated, Operation, UserWhoAccessed=UserId, OfficeObjectId)\n    on OfficeObjectId\n| where UserWhoAccessed !endswith \"yourdomain.com\" and UserWhoAccessed != \"app@sharepoint\"\n| extend ExternalOperation=Operation1\n| summarize ExternalUsers=make_set(UserWhoAccessed) by UserWhoShared, OfficeObjectId, ExternalOperation",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-SummaryofExternalActivity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e9cbd7ac-07b4-423f-8a75-3555dd1b5244",
        "query_hash": "3e593db757ab21e64c31d29bed34ed276740ae7aa2232afe6c8363dd0db1c36d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-TeamsRoleChanges.kql",
        "query": "//Detect when the role for a user changes to owner or back to standard member in your any of your Teams\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where Operation == \"MemberRoleChanged\"\n| mv-expand Members\n| extend User = tostring(Members.UPN)\n| extend x = tostring(Members.Role)\n| extend Action = case(x == \"1\", strcat(\"User changed to member\"),\n    x == \"2\", strcat(\"User changed to owner\"), \"unknown\")\n| where Action in (\"User changed to member\", \"User changed to owner\")\n| project\n    TimeGenerated,\n    TeamName,\n    ActorType=UserType,\n    Actor=UserId,\n    UserAdded=User,\n    Action",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-TeamsRoleChanges",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f42b2d22-1e87-4783-8ab7-876152b72d79",
        "query_hash": "4abec88c15584ae440b579ed26f0ac9680ec43f26bdfe0f76c555e83574a2353",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-Top20RandomStats.kql",
        "query": "//Find the top 20 of a collection of varied data sets, no real detections in here just interesting data that is captured\n\n//Data connector required for this query - Office 365\n\n//Top 20 files downloaded from your tenant\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| summarize Count=count()by OfficeObjectId\n| top 20 by Count\n\n//Top 20 users downloading files from your tenant\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId !contains \"#EXT#\"\n| summarize Count=count()by UserId\n| top 20 by Count\n\n//Top 20 guests downloading files from your tenant\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| extend ['Guest UserPrincipalName'] = tostring(split(UserId,\"#\")[0])\n| summarize Count=count()by ['Guest UserPrincipalName']\n| top 20 by Count\n\n//Top 20 downloads from your tenant by guest domain\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#EXT#\"\n| extend ['Guest UserPrincipalName'] = tostring(split(UserId,\"#\")[0])\n| extend ['Guest Domain'] = tostring(split(['Guest UserPrincipalName'],\"_\")[-1])\n| summarize Count=count()by ['Guest Domain']\n| top 20 by Count\n\n//Top 20 users sharing files to guests\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where OfficeWorkload == \"OneDrive\"\n| where Operation in (\"SecureLinkCreated\", \"AddedToSecureLink\")\n| where TargetUserOrGroupType == \"Guest\" or TargetUserOrGroupName contains \"#EXT#\"\n| summarize Count=count() by UserId\n| top 20 by Count\n\n//Top 20 most shared files\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where OfficeWorkload == \"OneDrive\"\n| where Operation in (\"SecureLinkCreated\", \"AddedToSecureLink\")\n| summarize Count=count() by OfficeObjectId\n| top 20 by Count\n\n//Top 20 guests with files shared to them\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where OfficeWorkload == \"OneDrive\"\n| where Operation in (\"SecureLinkCreated\", \"AddedToSecureLink\")\n| where TargetUserOrGroupType == \"Guest\" or TargetUserOrGroupName contains \"#EXT#\"\n| summarize Count=count() by TargetUserOrGroupName\n| top 20 by Count\n\n//Top 20 guests added to Teams by distinct Team name\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation == \"MemberAdded\"\n| mv-expand Members\n| extend UserAdded = tostring(Members.UPN)\n| where UserAdded contains \"#EXT#\"\n| where CommunicationType == \"Team\"\n| where UserId != \"Microsoft Teams Sync\"\n| summarize Count=dcount(TeamName) by UserId\n| top 20 by Count\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-Top20RandomStats",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a149c214-bfb8-47c2-8321-5a8fa66d178f",
        "query_hash": "f46e83ccff323f39c7a1897951947d2ae9ba8e8f7ce35c5a946e375b12c5a412",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualisingAnomalousDownloads.kql",
        "query": "//Visualises potentially anomalous download activities in your Office tenant over the set period. Time frames can be adjusted to suit. \n\n//Data connector required for this query - Office 365\n\n//Starttime and timeframe = how many days of data to look at and in what grouping, i.e 7 days of data over 1 hour periods.\n//Threshold = the amount of total downloads required to be included in anomaly calculations. Reduces noise from low level anomalies, e.g going from 1 download to 3 downloads total.\n//sensitivity = adjust to make the query more or less sensitive, the higher the value, the greater the anomaly required to be detected.\nlet starttime = 7d;\nlet timeframe = 1h;\nlet threshold = 30;\nlet sensitivity = 2;\nlet operations = dynamic([\"FileSyncDownloadedFull\",\"FileDownloaded\"]);\nlet outlierusers=\nOfficeActivity\n| where TimeGenerated > ago(starttime)\n| where Operation in (['operations'])\n| project TimeGenerated, UserId\n| order by TimeGenerated\n| summarize Events=count()by UserId, bin(TimeGenerated, timeframe)\n| where Events > threshold\n| summarize EventCount=make_list(Events),TimeGenerated=make_list(TimeGenerated) by UserId\n| extend outliers=series_decompose_anomalies(EventCount,sensitivity)\n| mv-expand TimeGenerated, EventCount, outliers\n| where outliers == 1\n| distinct UserId;\nOfficeActivity\n| where TimeGenerated > ago(starttime)\n| where Operation in (['operations'])\n| where UserId in (outlierusers)\n| summarize DownloadCount=count()by UserId, bin(TimeGenerated, timeframe)\n| render timechart",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualisingAnomalousDownloads",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "58aab917-9fb2-47f0-943a-8b94049895cf",
        "query_hash": "92bcbe70294f3555d0d5362f3c9f652c70dc04cb0651149f8870801bd060c4f8",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeDownloadsbyTrustType.kql",
        "query": "//Visualize downloads from your Office 365 tenant by trust type (trusted/known by Azure Active Directory vs Unknown)\n\n//Data connector required for this query - Office 365\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//Query Azure AD logs to get a listing of each username, IPAddress and trust type\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where ResultType == 0\n| where UserType == \"Member\"\n| extend DeviceTrustType = tostring(DeviceDetail.trustType)\n| distinct UserPrincipalName, IPAddress, DeviceTrustType\n//Join to Office Activity download on username and IP and find download events\n| join kind=inner(\n    OfficeActivity\n    | where TimeGenerated > ago(30d)\n    | where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n    )\n    on $left.UserPrincipalName == $right.UserId, $left.IPAddress == $right.ClientIP\n//Summarize download events by whether the device is known or not\n| summarize\n    ['Trusted Devices']=countif(isnotempty(DeviceTrustType)),\n    ['Untrusted Devices']=countif(isempty(DeviceTrustType))\n    by bin(TimeGenerated, 1d)\n| render timechart with (title=\"Downloads from Office 365 by device trust type\")\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeDownloadsbyTrustType",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "04fc802e-753b-4b17-8fef-a372a32e7387",
        "query_hash": "0fb924fae708d2e6dc3b422cb55341e78eb3e4bb38f34709e3f3ad49ec2a0410",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeDownloadsvsUploads.kql",
        "query": "//Visualize uploads vs downloads in your Office 365 tenant per day\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| project TimeGenerated, Operation\n| where Operation in (\"FileSyncDownloadedFull\", \"FileSyncUploadedFull\", \"FileDownloaded\", \"FileUploaded\")\n| summarize\n    ['Files Downloaded']=countif(Operation in (\"FileDownloaded\", \"FileSyncDownloadedFull\")),\n    ['Files Uploaded']=countif(Operation in (\"FileSyncUploadedFull\", \"FileUploaded\"))\n    by startofday(TimeGenerated)\n| render columnchart\n    with (\n    kind=unstacked,\n    title=\"Downloads vs Uploads in Office 365\",\n    ytitle=\"Count\",\n    xtitle=\"Day\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeDownloadsvsUploads",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "37e5e80f-a744-4da8-be7d-94754dc7c0bb",
        "query_hash": "c72b2edccc732ca02398460ad6f893efaefa0d6b575867f87de85120bf4b008d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeFileShareTopGuestDomains.kql",
        "query": "//Visualize the guest domains that have had the most files shares to them from your Office 365 tenant\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where Operation in~ (\"AddedToSecureLink\", \"SecureLinkCreated\", \"SecureLinkUpdated\")\n| where TargetUserOrGroupType == \"Guest\" and TargetUserOrGroupName contains \"#ext#\"\n| extend ['Guest UserPrincipalName'] = tostring(split(TargetUserOrGroupName, \"#\")[0])\n| extend ['Guest Domain'] = tostring(split(['Guest UserPrincipalName'], \"_\")[-1])\n| summarize Count=count() by ['Guest Domain']\n| top 20 by Count\n| render barchart with (title=\"Top guest domains with files shared to\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeFileShareTopGuestDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "be134113-e2f5-4166-9727-2f35dbd00f64",
        "query_hash": "a184692a6ade4ba8c3182e844883e93cf9cffaa916e7c82056fefd31d607d95c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeFilesSharedtoGuests.kql",
        "query": "//Visualize the files shared to guests from Office 365 over time\n\n//Data connector required for this query - Office 365\n\nlet timerange=90d;\nOfficeActivity\n| where TimeGenerated > ago(timerange)\n| where Operation in (\"SecureLinkCreated\", \"AddedToSecureLink\")\n| where TargetUserOrGroupType == \"Guest\"\n| summarize Count=count()by bin(TimeGenerated, 1d)\n| render timechart with (ytitle=\"File Count\", title=\"Files shared with guests over time\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeFilesSharedtoGuests",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "85ef756d-7b73-40cd-9ba2-fe25c155a37a",
        "query_hash": "f871a50ab8420a67ca07d15178fe1f409baa07fb7f624cc43cd8cf7a9d7e2b47",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeGuestDownloadsfromO365withTrend.kql",
        "query": "//Visualize how many files are being downloaded from your Office 365 tenant by guest accounts with trend\n\n//Data connector required for this query - Office 365\n\nlet StartDate = now(-90d);\nlet EndDate = now();\nOfficeActivity\n| where TimeGenerated > ago(90d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#ext#\"\n| make-series TotalDownloads=count() on TimeGenerated in range(StartDate, EndDate, 1d)\n| extend (RSquare, SplitIdx, Variance, RVariance, TrendLine)=series_fit_2lines(TotalDownloads)\n| project TimeGenerated, TotalDownloads, TrendLine\n| render timechart with (title=\"Guest downloads from Office 365 per day over time with trend\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeGuestDownloadsfromO365withTrend",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "85f0fd09-0549-4749-b4a6-1a015885f35b",
        "query_hash": "b47f95f9eee7862a652911c1c9464a40ae051924ba67684081fc926b6346146b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeGuestsAddedRemovedfromTeams.kql",
        "query": "//Visualize guests added vs removed from Teams per day over the last 30 days\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago(30d)\n| where UserType == \"Regular\"\n| where CommunicationType == \"Team\"\n| where OfficeWorkload == \"MicrosoftTeams\" \n| where Operation in (\"MemberAdded\", \"MemberRemoved\")\n| mv-expand Members\n| extend User = tostring(Members.UPN)\n| where User contains \"#EXT#\"\n| project TimeGenerated, Operation, User\n| summarize\n    ['Guests Added']=countif(Operation == \"MemberAdded\"),\n    ['Guests Removed']=countif(Operation == \"MemberRemoved\")\n    by startofday(TimeGenerated)\n| render columnchart\n    with (\n    kind=unstacked,\n    xtitle=\"Count\",\n    ytitle=\"Day\",\n    title=\"Guests Added vs Removed from Teams\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeGuestsAddedRemovedfromTeams",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "00df6fc1-eef5-4480-8254-86af56dbbcf5",
        "query_hash": "f3cffc3e49885a6cbe00a6cdacc5cd03efafc1108ca0e7bb1b1eae1faf1d1287",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeGuestsRedeemedvsAddedtoTeams.kql",
        "query": "//Visualize total guests redeemed in Azure AD vs guests that have been added to a Team\n\n//Data connector required for this query - Office 365\n\nlet guestsredeemed=\n    AuditLogs\n    | where TimeGenerated > ago (90d)\n    | where OperationName == \"Redeem external user invite\"\n    | extend GuestRedeemed = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    | extend Activity = strcat(\"Guest Invite Redeemed\")\n    | project TimeGenerated, GuestRedeemed, Activity;\nlet guestsaddedtoteams=\n    OfficeActivity\n    | where TimeGenerated > ago(90d)\n    | where Operation == \"MemberAdded\"\n    | mv-expand Members\n    | extend GuestAdded = tostring(Members.UPN)\n    | where GuestAdded contains \"#EXT#\"\n    | extend Activity = strcat(\"Guest Added to Team\")\n    | project TimeGenerated, GuestAdded, Activity;\nunion guestsredeemed, guestsaddedtoteams\n| summarize ['Total Count']=count() by Activity, bin(TimeGenerated, 1d)\n| render columnchart with (kind=unstacked, title=\"Total Guests Redeemed vs Guests Added to Teams\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeGuestsRedeemedvsAddedtoTeams",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fd3c4f26-7e69-4f9f-b8a6-9d56696b8608",
        "query_hash": "b44df3aabea2b2c5ae9c8b2bfd7a4937578c74ac8ced83a3b7d5c8e6f063031c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5COffice%20365%5COfficeActivity-VisualizeTopGuestDownloads.kql",
        "query": "//Visualize the top 20 files downloaded by Azure AD guests over the last month\n\n//Data connector required for this query - Office 365\n\nOfficeActivity\n| where TimeGenerated > ago (30d)\n| where Operation in (\"FileSyncDownloadedFull\", \"FileDownloaded\")\n| where UserId contains \"#ext#\"\n| summarize Count=count()by FileName=SourceFileName\n| sort by Count desc\n| take 20\n| render barchart with (title=\"Top files downloaded by guests over the last month\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "OfficeActivity-VisualizeTopGuestDownloads",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1bb5d540-6cfa-4a9f-b2eb-b0cb5497a6b8",
        "query_hash": "0247c8208b7b48d78cabab19cb6838764a4a7303a21b2947663436dd008a91de",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-DefenderforIdParser.kql",
        "query": "//Parse all the relevant entities - hosts, accounts, IP addresses, files, groups, resources and times from Defender for Identity alerts\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where ProviderName == \"Azure Advanced Threat Protection\"\n| summarize arg_max(TimeGenerated, *) by VendorOriginalId\n| mv-expand todynamic(Entities)\n| extend x = parse_json(Entities)\n| extend Host = x.HostName\n| extend Account = x.Name\n| extend IP = x.Address\n| extend File = x.File\n| extend Group = x.Group\n| extend ResourceId = x.ResourceName\n| extend Time= x.Time\n| summarize\n    HostNames=make_set(Host),\n    AccountNames=make_set(Account),\n    IPAddresses=make_set(IP),\n    Files=make_set(File),\n    SecurityGroups=make_set(Group),\n    Resources=make_set(ResourceId),\n    TimeAccessed=make_set(Time)\n    by TimeGenerated, SystemAlertId, AlertName, Description",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-DefenderforIdParser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "edb376f0-d411-442f-b8c7-728ff3c7c36e",
        "query_hash": "178cfa81477fb97e3f02acc6a0572d1dd133fb3210d0520c68df550634650ecb",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-DefenderforIDRecon.kql",
        "query": "//When Defender for Identity alerts on user and group reconnaissance, parse the relevant accounts, hosts and groups affected\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where AlertName == \"User and group membership reconnaissance (SAMR)\"\n| extend x = todynamic(Entities)\n| mv-expand x\n| parse x with * 'HostName\":\"' HostName '\",\"Id' *\n| parse x with * 'FriendlyName\":\"' GroupName '\",\"Type\":\"security-group\"' *\n| parse x with * '\"Name\":\"' AccountName '\",\"Sid\"' *\n| summarize\n    Accounts=make_list_if(AccountName, isnotempty(AccountName)),\n    Hosts=make_list_if(HostName, isnotempty(HostName)),\n    Groups=make_list_if(GroupName, isnotempty(GroupName))\n    by VendorOriginalId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-DefenderforIDRecon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cb3ccfc6-0304-41f0-8c6e-49ec92bf6f36",
        "query_hash": "b768db5555afde3d67e15e4d56688411fdf804011d01672adf76473de22ae3f2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-DetectNewAlerts.kql",
        "query": "//List any new alert types found by the Defender product suite in the last week compared to the previous year\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\n//First find all the existing alerts from the last year excluding the last week\nlet existingalerts=\n    SecurityAlert\n    | where TimeGenerated > ago(365d) and TimeGenerated < ago(7d)\n    // Exclude alerts from Sentinel itself\n    | where ProviderName != \"ASI Scheduled Alerts\"\n    | distinct AlertName;\n//Find new alerts triggered in the last week\nSecurityAlert\n| where TimeGenerated > ago(7d)\n// Exclude alerts from Sentinel itself\n| where ProviderName != \"ASI Scheduled Alerts\"\n| where AlertName !in (existingalerts)\n| distinct AlertName, ProviderName, ProductName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-DetectNewAlerts",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ad403115-c1c5-4b87-921d-72a66525616f",
        "query_hash": "20b055f5fe08dd3ca8b2bbf5019b70cecb4c78b4d4c2667eaa4b73f72184ae50",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-DeviceAlertwithLateralMovement.kql",
        "query": "//Detect when a device triggers a Defender for Endpoint alert where Defender for Identity has also detected a lateral movement path\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where ProviderName == \"MDATP\"\n| project TimeGenerated, AlertName, CompromisedEntity\n| join kind=inner (\n    IdentityDirectoryEvents\n    | where ActionType == \"Potential lateral movement path identified\")\n    on $left.CompromisedEntity == $right.DeviceName\n| distinct DeviceName, AlertName, AccountName, ReportId",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-DeviceAlertwithLateralMovement",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "27a89542-d6fe-4bd3-b0bc-5c56c543a6a5",
        "query_hash": "7e1357dc2fd0c73293e9a81143320d06cc8305bb18f03e5405d6161918af2e29",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-EncodedPowershell.kql",
        "query": "//Detect when Defender for Endpoint alerts on suspicious PowerShell usage. If command is encoded it will be decoded.\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where AlertName == \"Suspicious PowerShell command line\"\n| mv-expand todynamic(Entities)\n| extend CommandLine = tostring(Entities.CommandLine)\n//This particular query looks for only encoded Powershell commands, if you want all Powershell commands just remove the lines below\n| extend EncodedCommand = extract(@'\\s+([A-Za-z0-9+/]{20}\\S+$)', 1, CommandLine)\n| where EncodedCommand != \"\"\n| extend DecodedCommand = base64_decode_tostring(EncodedCommand)\n| where DecodedCommand != \"\"\n//\n| project TimeGenerated, CompromisedEntity, AlertName, CommandLine, DecodedCommand\n\n//Advanced Hunting query - depending on the content of the decoded string AH can struggle to render the command occasionally\n\n//Data connector required for this query - Advanced Hunting license\n\nlet alertid=\nAlertInfo\n| where Title == @\"Suspicious PowerShell command line\"\n| distinct AlertId;\nAlertEvidence\n| where AlertId in (alertid)\n| where EntityType == \"Process\"\n| extend EncodedCommand = extract(@'\\s+([A-Za-z0-9+/]{20}\\S+$)', 1, ProcessCommandLine)\n| where EncodedCommand != \"\"\n| extend DecodedCommand = base64_decode_tostring(EncodedCommand)\n| where DecodedCommand != \"\"\n| project Timestamp, AlertId, ProcessCommandLine, DecodedCommand",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-EncodedPowershell",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "224d4b3f-2939-4fb7-854b-6748114007b1",
        "query_hash": "a95ad1f3afd08fec513b0c878225efed87aac039cdd2e4fef9d048a369594d24",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindBlastRadiusInfrequentCountry.kql",
        "query": "//When Defender for Cloud Apps detects activity from an infrequent country, summarize the impact to your users\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n//Microsoft Sentinel query\n//Using the Security Alert table find any locations detected. This query looks back 7 days to find alerts as this can be an offline detection, but you can adjust.\nlet suspiciouslocation=\n    SecurityAlert\n    | where TimeGenerated > ago(7d)\n    | where AlertName == \"Activity from infrequent country\"\n    | mv-expand todynamic(Entities)\n    | project Entities\n    | extend Location = tostring(parse_json(tostring(Entities.Location)).CountryCode)\n    | where isnotempty(Location)\n    | distinct Location;\n//Take that location and send back through the sign in logs to find the blast radius\nSigninLogs\n| where TimeGenerated > ago(7d)\n| where Location in (suspiciouslocation)\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(UserPrincipalName, (ResultType in(successCodes))),\n    ['List of successful users']=make_set_if(UserPrincipalName, (ResultType in(successCodes))),\n    ['Successful result codes'] = make_set_if(ResultType, (ResultType in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(UserPrincipalName, (ResultType in(failureCodes))),\n    ['List of failed users'] = make_set_if(UserPrincipalName, (ResultType in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ResultType, (ResultType in(failureCodes)))\n    by Location\n\n//Advanced Hunting query\n\n//Data connector required for this query - Advanced Hunting license\n//Data connector required for this query - Advanced Hunting with Azure AD P2\n\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nlet alertid=\nAlertInfo\n| where Timestamp > ago(7d)\n| where Title == @\"Activity from infrequent country\"\n| distinct AlertId;\nlet suspiciouslocation=\nAlertEvidence\n| where AlertId in (alertid)\n| extend AF=parse_json(AdditionalFields)\n| extend Location=tostring(AF.Location.CountryCode)\n| where isnotempty(Location)\n| distinct Location;\nAADSignInEventsBeta\n| where Timestamp > ago(7d)\n| where Country in (suspiciouslocation)\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(AccountUpn, (ErrorCode in(successCodes))),\n    ['List of successful users']=make_set_if(AccountUpn, (ErrorCode in(successCodes))),\n    ['Successful result codes'] = make_set_if(ErrorCode, (ErrorCode in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(AccountUpn, (ErrorCode in(failureCodes))),\n    ['List of failed users'] = make_set_if(AccountUpn, (ErrorCode in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ErrorCode, (ErrorCode in(failureCodes)))\n    by Country",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindBlastRadiusInfrequentCountry",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8034345f-7635-401b-98a0-10510f7062c2",
        "query_hash": "1b48a134786aceff60dde097ca06a53e96864a6f24add0755105397a06becd5a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindBlastRadiusofPasswordSpray.kql",
        "query": "//When Defender for Cloud Apps detects password spray activity, summarize the impact to your users\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n//Using the Security Alert table find any IP addresses associated with password spray activity. This query looks back 7 days to find alerts as this can be an offline detection, but you can adjust.\n//Microsoft Sentinel query\nlet maliciousip=\n    SecurityAlert\n    | where TimeGenerated > ago (7d)\n    | where AlertName == \"Activity from a password-spray associated IP address\"\n    | mv-expand todynamic(Entities)\n    | project TimeGenerated, Entities\n    | extend IPAddress = tostring(Entities.Address)\n    | where isnotempty(IPAddress)\n    | distinct IPAddress;\n//Look back in your signin logs the last 30 days and summarize activity from that address\nSigninLogs\n| where TimeGenerated > ago(30d)\n| where IPAddress in (maliciousip)\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(UserPrincipalName, (ResultType in(successCodes))),\n    ['List of successful users']=make_set_if(UserPrincipalName, (ResultType in(successCodes))),\n    ['Successful result codes'] = make_set_if(ResultType, (ResultType in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(UserPrincipalName, (ResultType in(failureCodes))),\n    ['List of failed users'] = make_set_if(UserPrincipalName, (ResultType in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ResultType, (ResultType in(failureCodes)))\n    by IPAddress\n\n//Advanced hunting query\n\n//Data connector required for this query - Advanced Hunting license\n//Data connector required for this query - Advanced Hunting with Azure AD P2\n\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nlet alertid=\nAlertInfo\n| where Timestamp > ago(7d)\n| where Title == @\"Activity from a password-spray associated IP address\"\n| distinct AlertId;\nlet maliciousip=\nAlertEvidence\n| where AlertId in (alertid)\n| where EntityType == @\"Ip\"\n| extend AF = parse_json(AdditionalFields)\n| extend IPAddress = tostring(AF.Address)\n| distinct IPAddress;\nAADSignInEventsBeta\n| where Timestamp > ago(30d)\n| where IPAddress in (maliciousip)\n| summarize\n    ['Count of distinct successful sign ins'] = dcountif(AccountUpn, (ErrorCode in(successCodes))),\n    ['List of successful users']=make_set_if(AccountUpn, (ErrorCode in(successCodes))),\n    ['Successful result codes'] = make_set_if(ErrorCode, (ErrorCode in(successCodes))),\n    ['Count of distinct failed sign ins'] = dcountif(AccountUpn, (ErrorCode in(failureCodes))),\n    ['List of failed users'] = make_set_if(AccountUpn, (ErrorCode in(failureCodes))),\n    ['Failed result codes'] = make_set_if(ErrorCode, (ErrorCode in(failureCodes)))\n    by IPAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindBlastRadiusofPasswordSpray",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f897b288-b762-49f4-af3a-e9ae0dc0e4c8",
        "query_hash": "268b53bd16a39c41edfe9f1a0a09e1fc317d2ee638c67214bca1251c34ea2c14",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindMostPhishedUsers.kql",
        "query": "//Find the most phished users from the last 365 days\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago (365d)\n| where ProviderName == \"OATP\"\n| where AlertName in (\"Email messages containing malicious URL removed after delivery\", \"Email messages containing phish URLs removed after delivery\")\n| mv-expand todynamic(Entities)\n| project Entities\n| extend User = tostring(Entities.MailboxPrimaryAddress)\n| where isnotempty(User)\n| summarize ['Count of Phishing Attempts']=count()by User\n| order by ['Count of Phishing Attempts']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindMostPhishedUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c167b6b9-ed3d-4d5e-bb66-95e59f66d883",
        "query_hash": "8bb2f213ef9cd7d0c5f551fd40beeedd6932681e74e6f62d9e9b3cc195612290",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindNetworkConnectionsSinkholedDomain.kql",
        "query": "//When Defender for Cloud detects communication with a DNS sinkhole, find the devices and processes initiating the connection\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet domain=\n    SecurityAlert\n    | where TimeGenerated > ago (1d)\n    | where AlertName startswith \"Attempted communication with suspicious sinkholed domain\"\n    | mv-expand todynamic(Entities)\n    | extend DomainName = tostring(Entities.DomainName)\n    | where isnotempty(DomainName)\n    | distinct DomainName;\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n| where RemoteUrl in~ (domain)\n| project\n    TimeGenerated,\n    ActionType,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindNetworkConnectionsSinkholedDomain",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ddac5c49-f4a8-4c83-b9f8-4b255da08a90",
        "query_hash": "61fdc97b8b01145b68166c1fc1f7a4a3ad0d31d994efa47190deb9a7690fec9f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindRecipientsofPotentialPhishing.kql",
        "query": "//When a user reports an email as potential phishing find all other users who received that email\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - M365 Defender - Email* tables\n\nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProviderName == \"OATP\"\n| where AlertName has \"Email reported by user as malware or phish\"\n| mv-expand todynamic(Entities)\n| project Entities\n| extend SenderMailFromAddress = tostring(Entities.P1Sender)\n| extend Subject = tostring(Entities.Subject)\n| where isnotempty(SenderMailFromAddress) and isnotempty(Subject)\n| distinct SenderMailFromAddress, Subject\n| join kind=inner(\n    EmailEvents\n    | where TimeGenerated > ago(2d)\n    | project RecipientEmailAddress, SenderMailFromAddress, Subject\n    )\n    on SenderMailFromAddress, Subject\n| summarize Recipients=make_set(RecipientEmailAddress) by Subject, SenderMailFromAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindRecipientsofPotentialPhishing",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "21ba593c-a4d4-45c7-9c00-52842f8b91a0",
        "query_hash": "d592422750da1594848e1007e5b1a9452c31e6c2de4e01e4c46f874375484480",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindSigninsforAnomalousToken.kql",
        "query": "//When an anomalous token alert is flagged, find the specific risk events that flagged the alert\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - Azure Active Directory - AAD User Risk Events\n\nlet alerts=\n    SecurityAlert\n    | where TimeGenerated > ago(1d)\n    | where AlertName == \"Anomalous Token\"\n    | mv-expand todynamic(Entities)\n    | project Entities\n    | extend RequestId = tostring(Entities.SessionId)\n    | distinct RequestId;\n//Detections can be offline so retrieve a weeks worth of risk data\nAADUserRiskEvents\n| where TimeGenerated > ago(7d)\n| where RequestId in (alerts)\n| project TimeGenerated, UserPrincipalName, RiskEventType, RiskLevel, DetectionTimingType, IpAddress, Location",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindSigninsforAnomalousToken",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5a1c1464-d6d6-4436-b226-56100ab637c7",
        "query_hash": "99f5b82cfa0691ee8aa0540459121db73c36ea21f9667bec0c1ad793ba46a967",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-FindUsersWhoSigninfromMaliciousIPs.kql",
        "query": "//Parse the IP information from Security Alerts and find other users who have successfully signed on from the same IP addresses\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\nSecurityAlert\n| where ProviderName in (\"MCAS\", \"IPC\")\n| extend x = todynamic(Entities)\n| mv-expand x\n| parse-where x with * '\"Address\":\"' MaliciousIP '\"' *\n//Exclude any corporate or trusted IP addresses\n| where MaliciousIP != \"10.10.10.10\"\n| project AlertTime=TimeGenerated, MaliciousIP, CompromisedEntity\n| join kind=inner\n    (\n    SigninLogs\n    | where ResultType in (\"0\",\"53003\",\"50158\")\n    )\n    on $left.MaliciousIP == $right.IPAddress\n| where CompromisedEntity != UserPrincipalName\n| distinct UserPrincipalName, AppDisplayName, IPAddress, UserAgent, ResultType, ResultDescription",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-FindUsersWhoSigninfromMaliciousIPs",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8aabf47a-25a2-43b8-9841-848df5bb3419",
        "query_hash": "3e9ec787226d9aa51a4f3b8f9d183aabc8d4b4189204dcf321556b7c713564d6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-ForecastIdentityProtection.kql",
        "query": "//Forecast the count of Azure AD Identity Protection Events events for the next 14 days based on the previous 30 days\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where ProviderName == \"IPC\"\n| make-series [\"Azure AD Identity Protection Events\"]=count() on TimeGenerated from ago(30d) to now() + 14d step 1d\n| extend [\"Azure AD Identity Protection Events Forecast\"] = series_decompose_forecast(['Azure AD Identity Protection Events'], toint(14d / 1d))\n| render timechart ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-ForecastIdentityProtection",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "80c45ac4-44f0-4c41-b5e5-7cbad6b4a07f",
        "query_hash": "8d38c79f5e6c44aaab2c70ed2d4476f3125d8c1c9782d04d8de5ba7d65a2894e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-MalwareDetectedinISO.kql",
        "query": "//When Defender for Endpoint detects malware in an ISO file retrieve the ISO file name, which directory it was found in and associated file hashes\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where ProviderName == \"MDATP\"\n| where AlertName == \"Malware was detected in an iso disc image file\"\n| mv-expand todynamic(Entities)\n| extend Hashes = Entities.FileHashes\n| mv-expand Hashes\n| extend ['ISO File Name'] = tostring(Entities.Name)\n| extend Directory = tostring(Entities.Directory)\n| extend ['Hash Type'] = tostring(Hashes.Algorithm)\n| extend Hash = tostring(Hashes.Value)\n| where isnotempty(['ISO File Name'])\n| project\n    TimeGenerated,\n    CompromisedEntity,\n    ['ISO File Name'],\n    Directory,\n    ['Hash Type'],\n    Hash",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-MalwareDetectedinISO",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "eb49dfa7-4247-493c-b5c5-f1f97462a908",
        "query_hash": "548fbc1947b5836298adfb05f1c332d171fa581a8fca21406321b8df1cca0662",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-MultipleAlertsTriggered.kql",
        "query": "//Detect when a user or device triggers 3 or more unique alerts within a short time frame. This example uses a period of 4 hours\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where isnotempty(CompromisedEntity) and CompromisedEntity != \"CompromisedEntity\"\n| project TimeGenerated, ProviderName, AlertName, CompromisedEntity\n| summarize\n    ['Alert Names']=make_set(AlertName),\n    ['Count of Unique Alerts']=dcount(AlertName)\n    by CompromisedEntity, bin(TimeGenerated, 4h)\n| where ['Count of Unique Alerts'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-MultipleAlertsTriggered",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e9b73594-867b-454c-92c4-122adb5a17c0",
        "query_hash": "dc10b216465921df233a49a71fb1fd3322cac9f11fa43481e9f06702d3f971ec",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-MultipleLowSeverityAlertsTriggered.kql",
        "query": "//Detect when the same user or device triggers 3 or more low severity alerts in the space of a day\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago (7d)\n| where AlertSeverity == \"Low\"\n| summarize\n    ['Count of low severity alerts']=dcount(AlertName),\n    ['List of low severity alerts']=make_set(AlertName)\n    by CompromisedEntity, bin(TimeGenerated, 1d)\n| where ['Count of low severity alerts'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-MultipleLowSeverityAlertsTriggered",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "64d3217f-7005-46c0-952d-275a74fe3cad",
        "query_hash": "2ec5a1466fbd76563fb1faf6080409b0766b9ac17585080da4d5b9e2612ebe14",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-ParseMaliciousFileInfoandFindDeviceEvents.kql",
        "query": "//When Defender for Office 365 removes a malicious file from an email track down all device events with the same file hash\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - M365 Defender - Email* tables\n\nlet filehashes=\nSecurityAlert\n| where TimeGenerated > ago (7d)\n| where ProviderName == \"OATP\"\n| where AlertName == \"Email messages containing malicious file removed after delivery\u200b\"\n| mv-expand todynamic(Entities)\n| extend Files = Entities.Files\n| project Files\n| mv-expand Files\n| extend FileHashes = Files.FileHashes\n| mv-expand FileHashes\n| extend FileHash = tolower(tostring(FileHashes.Value))\n| where isnotempty( FileHash)\n| distinct FileHash;\nDeviceFileEvents\n    | where TimeGenerated > ago(7d)\n    | project\n        TimeGenerated,\n        ActionType,\n        FileName,\n        DeviceName,\n        SHA256,\n        InitiatingProcessAccountUpn \n| where SHA256 in (filehashes)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-ParseMaliciousFileInfoandFindDeviceEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a5d21124-bdc4-4914-969b-6557804b2fa1",
        "query_hash": "098b4c4084ddaac1ee53d5ca0d0c5e59931f45677576a5cb592da439f1dfec2e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-PercentageofAlertsHighorCritical.kql",
        "query": "//Calculate the percentage of alerts that are high or critical per product\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago(30d)\n| summarize\n    ['Total Alert Count']=count(),\n    ['Total High or Critical Count']=countif(AlertSeverity in (\"Critical\", \"High\"))\n    by ProductName\n| extend Percentage=(todouble(['Total High or Critical Count']) * 100 / todouble(['Total Alert Count']))\n| project-reorder ProductName, ['Total Alert Count'], ['Total High or Critical Count'], Percentage\n| sort by Percentage desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-PercentageofAlertsHighorCritical",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d26167a5-41bf-4eec-bd6d-f64349bd2767",
        "query_hash": "e9c6490d8503d0ede11ecc1e3e4095fecbef14d96d2c5e33873105f3cfa02c9b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-PossibleDNSDataTransfer.kql",
        "query": "//When Defender for Cloud detects possible data transfer via DNS tunnel, use DNS logs to find any other devices that have queried the potentially malicious domain\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - DNS\n\nlet maliciousdomain=\n    SecurityAlert\n    | where AlertName contains \"via DNS tunnel\"\n    | mv-expand todynamic(Entities)\n    | project Entities\n    | extend MaliciousDomain = tostring(Entities.DomainName)\n    | where isnotempty(MaliciousDomain)\n    | distinct MaliciousDomain;\nDnsEvents\n| where QueryType == \"A\"\n| project Name, ClientIP\n| where Name in~ (maliciousdomain)\n| summarize ['List of Device IPs']=make_set(ClientIP) by Name",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-PossibleDNSDataTransfer",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a60bd932-95ba-4f17-aa8c-67707858f9d3",
        "query_hash": "02fa8dbb5d39dd3c950cb73e25da995e50f858c0e06f2bdaf296ec6252adb816",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-PotentialPhishingDomainCommunication.kql",
        "query": "//When Defender for Cloud detects communication with a possible phishing domain, use Defedner logs to find any network connections to that same domain\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - M365 Defender - Device* tables\n\nlet domain=\n    SecurityAlert\n    | where TimeGenerated > ago (7d)\n    | where AlertName startswith \"Communication with possible phishing domain\"\n    | mv-expand todynamic(Entities)\n    | extend DomainName = tostring(Entities.DomainName)\n    | where isnotempty(DomainName)\n    | distinct DomainName;\nDeviceNetworkEvents\n| where TimeGenerated > ago (7d)\n| where RemoteUrl in~ (domain)\n| project\n    TimeGenerated,\n    ActionType,\n    DeviceName,\n    InitiatingProcessAccountName,\n    InitiatingProcessCommandLine,\n    LocalIP,\n    RemoteIP,\n    RemoteUrl,\n    RemotePort",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-PotentialPhishingDomainCommunication",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "951406f4-a782-4cd9-b12f-82a6690822b6",
        "query_hash": "1424accd44cddd9988981c34b6c2458efe8f721e343918137f2ab4fe73b303ba",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-RetrieveEmailforSuspiciousEmailPatterns.kql",
        "query": "//When a user is flagged for suspicious email sending patterns retrieve all the email they have sent around the time of the Alert\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - M365 Defender - Email* tables\n\nSecurityAlert\n| where TimeGenerated > ago (7d)\n| where ProviderName == \"OATP\"\n| where AlertName == \"Suspicious email sending patterns detected\"\n| mv-expand todynamic(Entities)\n| extend SenderFromAddress = tolower(tostring(Entities.MailboxPrimaryAddress))\n| project AlertTime=TimeGenerated, SenderFromAddress\n| join kind=inner (\n    EmailEvents\n    )\n    on SenderFromAddress\n| where EmailDirection == \"Outbound\"\n| where TimeGenerated between ((AlertTime - timespan(1h)) .. (AlertTime + timespan(1h)))\n| project TimeGenerated, Subject, AttachmentCount, RecipientEmailAddress",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-RetrieveEmailforSuspiciousEmailPatterns",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "29f676be-962e-4789-8f3c-39242907e093",
        "query_hash": "fb30e4f95bf33733f8dfbd19127bfebf6382bc23748f842c4611d5ac746b5c4e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-SummarizeSigninsafterMailboxRule.kql",
        "query": "//When Defender for Cloud Apps detects a suspicious mailbox rule created, take that IP address and summarize sign in events for that user and IP address for the last 30 days.\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n//Data connector required for this query - Azure Active Directory - Signin Logs\n\n//If they have only signed in a few times from that IP it may a sign the account has been compromised and a threat actor has added mailbox rule\nlet failureCodes = dynamic([50053, 50126, 50055]);\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where AlertName == \"Suspicious inbox manipulation rule\"\n| extend IPAddress = tostring(parse_json(ExtendedProperties).[\"IP Addresses\"])\n| project ['Alert Time']=TimeGenerated, Description, IPAddress, UserPrincipalName=CompromisedEntity\n| join kind=inner(\n    SigninLogs\n    | where TimeGenerated > ago (30d)\n    )\n    on UserPrincipalName, IPAddress\n| project\n    TimeGenerated,\n    ['Alert Time'],\n    Description,\n    ResultType,\n    UserPrincipalName,\n    IPAddress,\n    NetworkLocationDetails\n| summarize\n    ['Count of successful sign ins from MFA IP Address'] = countif(ResultType in(successCodes)),\n    ['Count of failed sign ins from MFA IP Address'] = countif(ResultType in(failureCodes))\n    by UserPrincipalName, Description, IPAddress, NetworkLocationDetails, ['Alert Time']",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-SummarizeSigninsafterMailboxRule",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ac1b5571-c9de-4b09-a1e5-70b01f0c676a",
        "query_hash": "16019cefdd1ef77416efac0f54f43fd760dfe37b30dea6706359c6263bbaec32",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-SuspectedGoldenTicket.kql",
        "query": "//When Defender for Identity detects suspected golden ticket usage, parse the relevant user accounts and host names\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where AlertName startswith \"Suspected Golden Ticket usage\"\n| mv-expand todynamic(Entities)\n| extend AccountName = tostring(Entities.Name)\n| extend HostName = tostring(Entities.HostName)\n| summarize\n    Accounts=make_list_if(AccountName, isnotempty(AccountName)),\n    Hosts=make_list_if(HostName, isnotempty(HostName))\n    by VendorOriginalId\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-SuspectedGoldenTicket",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "690067b5-8c59-4bb8-bdfb-051188c98133",
        "query_hash": "36719ecf281ad916e84dc69016cadae11662d0175ad71f0912c35a7f7453eed8",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-Top20RandomStats.kql",
        "query": "//Find the top 20 of a collection of varied data sets, no real detections in here just interesting data that is captured\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\n//Top 20 alerts triggered\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName != \"ASI Scheduled Alerts\"\n| summarize Count=count() by AlertName\n| top 20 by Count\n\n//Top 20 alerts high severity triggered\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName != \"ASI Scheduled Alerts\" and AlertSeverity == \"High\"\n| summarize Count=count() by AlertName\n| top 20 by Count\n\n//Top 20 users generating identity alerts\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName in (\"OATP\",\"IPC\",\"Azure Advanced Threat Protection\",\"MCAS\")\n| summarize Count=count() by CompromisedEntity\n| where CompromisedEntity != \"CompromisedEntity\" and isnotempty( CompromisedEntity)\n| top 20 by Count\n\n//Top 20 devices triggering Defender alerts\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName == \"MDATP\"\n| summarize Count=count() by CompromisedEntity\n| where CompromisedEntity != \"CompromisedEntity\" and isnotempty( CompromisedEntity)\n| top 20 by Count\n\n//Top 20 accounts by distinct alerts\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName in (\"OATP\",\"IPC\",\"Azure Advanced Threat Protection\",\"MCAS\")\n| summarize Count=dcount(AlertName) by CompromisedEntity\n| where CompromisedEntity != \"CompromisedEntity\" and isnotempty( CompromisedEntity)\n| top 20 by Count\n\n//Top 20 devices by distinct alerts\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName == \"MDATP\"\n| summarize Count=dcount(AlertName) by CompromisedEntity\n| where CompromisedEntity != \"CompromisedEntity\" and isnotempty( CompromisedEntity)\n| top 20 by Count\n\n//Top 20 users generating high severity identity alerts\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName in (\"OATP\",\"IPC\",\"Azure Advanced Threat Protection\",\"MCAS\") and AlertSeverity == \"High\"\n| summarize Count=count() by CompromisedEntity\n| where CompromisedEntity != \"CompromisedEntity\" and isnotempty( CompromisedEntity)\n| top 20 by Count\n\n//Top 20 devices triggering high severity Defender alerts\nSecurityAlert\n| where TimeGenerated > ago (30d)\n| where ProviderName == \"MDATP\" and AlertSeverity == \"High\"\n| summarize Count=count() by CompromisedEntity\n| where CompromisedEntity != \"CompromisedEntity\" and isnotempty( CompromisedEntity)\n| top 20 by Count",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-Top20RandomStats",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "578924b3-baef-4398-a5ce-23f702adecfd",
        "query_hash": "108ed43213e03716ddb88603dd7c9a53715328926f336992614cbcc5023d512d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-VisualizeAlertsbyMITRE.kql",
        "query": "//Visualize your security alerts by MITRE ATT&CK tactic\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago(30d)\n//Exclude Sentinel generated alerts if you want to. This may stop you double counting alerts, i.e generated by Azure AD Identity Protection and then again in Sentinel.\n| where ProviderName != \"ASI Scheduled Alerts\"\n//\n| where isnotempty(Tactics) and Tactics != \"Unknown\"\n| summarize arg_max(TimeGenerated, *) by VendorOriginalId\n| summarize Count=count()by Tactics\n| sort by Count desc\n| render barchart with (title=\"Security alerts by MITRE ATT&CK tactic\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-VisualizeAlertsbyMITRE",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a3d30728-99f2-4e74-b9d9-df41d16b8858",
        "query_hash": "562b31a4c71901e329c14929a3ebba00f4eef0d45c55dd86b0392a213689696b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-VisualizeAlertsbyProduct.kql",
        "query": "//Visualize the number of alerts generated per day by each Defender product\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago(14d)\n| summarize Count=count() by ProductName, bin(TimeGenerated, 1d)\n| where ProductName != \"Azure Sentinel\"\n| render columnchart with (kind=unstacked, title=\"Alerts by Defender product per day\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-VisualizeAlertsbyProduct",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "277c3265-2222-4ca7-aec8-18131126238d",
        "query_hash": "cff99789e8701abe17ab72920390ef478cf0f39e36d7c0541907118e6178ec6e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-VisualizeMDEAlertSeverity.kql",
        "query": "//Visualize the severity of your MDE alerts (Informational, Low, Medium, High) per day\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago (14d)\n| where ProviderName == \"MDATP\"\n| summarize Count=count()by AlertSeverity, startofday(TimeGenerated)\n| render columnchart with (kind=unstacked, ytitle=\"Alert Count\", xtitle=\"Day\", title=\"Defender for Endpoint alert severity per day\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-VisualizeMDEAlertSeverity",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c36959b8-4b75-4b67-88d8-7abc9dbbec80",
        "query_hash": "22adf72fb1c4157486ead592e08f803f98456bb81877aabb47652a37372f2738",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-VisualizeTopPhishingDomains.kql",
        "query": "//Visualize the most popular weaponized domains in the phishing emails your users receive\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago(365d)\n| where ProviderName == \"OATP\"\n| where AlertName in (\"Email messages containing malicious URL removed after delivery\u200b\",\"Email messages containing phish URLs removed after delivery\")\n| mv-expand todynamic(Entities)\n| extend MaliciousURL = tostring(Entities.Url)\n| project MaliciousURL\n| parse-where MaliciousURL with * \"//\" ['Malicious Domain'] \"/\" *\n| summarize Count=count() by ['Malicious Domain']\n| sort by Count desc \n| render barchart  \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-VisualizeTopPhishingDomains",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4c12821c-1d84-4dd2-a083-04dfc60a847c",
        "query_hash": "d9ed3e382c93a4ac8b647cdc4f85b954c4d71f984312f40301abc699c7dc1a1e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSecurity%20Alert%5CSecurityAlert-VisualizeTotalAlertsvsUniqueAlerts.kql",
        "query": "//Visualize your total alerts vs distinct entity alerts per week\n\n//Data connector required for this query - Security Alert (free table that other Defender products send alert info to)\n\nSecurityAlert\n| where TimeGenerated > ago(180d)\n//Exclude alerts generated by Microsoft Sentinel itself if you don't wish to double count them\n| where ProductName != \"ASI Scheduled Alerts\"\n| where Status == \"New\"\n| summarize\n    ['Total Security Alerts']=count(),\n    ['Unique Entity Alerts']=dcountif(CompromisedEntity, isnotempty(CompromisedEntity))\n    by bin(TimeGenerated, 7d)\n| render timechart with (title=\"Total Security Alerts vs Unique Entity Alerts\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecurityAlert-VisualizeTotalAlertsvsUniqueAlerts",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "deb88c2a-8390-4a14-9505-f4634ec54466",
        "query_hash": "3f21af477090395500944364efb545a29283628b1282123a5e0e1107c89a314a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-FindAccountsPasswordNotRequired.kql",
        "query": "//Find user accounts with the 'password not required' flag set in Active Directory\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| extend UACFlags = tostring(UserAccountControl[0])\n| where UACFlags == \"PasswordNotRequired\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-FindAccountsPasswordNotRequired",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "e6456fc0-67c3-429d-9cd7-1c1dce1297fe",
        "query_hash": "deb1091642cc4199c3fe904d2390a58a61d08c090416e6ddda89719a75fac735",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-FindAccountswithsameEmployeeId.kql",
        "query": "//Summarize accounts in our environment that have the same employee id (i.e regular and admin accounts)\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where isnotempty(EmployeeId)\n| summarize ['Count of accounts']=dcount(AccountUPN), ['List of accounts']=make_set(AccountUPN) by EmployeeId\n| sort by ['Count of accounts'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-FindAccountswithsameEmployeeId",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2558d69f-2b6e-4b8d-bd00-447720f74246",
        "query_hash": "7cb6ab668900dbbce97d32543f3e7ee22ed9a6b5a687a4d3d8aeda873cfe2704",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-FindAtRiskandHighBlastRadiusUsers.kql",
        "query": "//Find accounts that are considered to have a high blast radius and currently at risk\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where BlastRadius == \"High\"\n| where RiskState == \"AtRisk\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-FindAtRiskandHighBlastRadiusUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "bf4750dd-05e8-4551-aa2c-2e875f9a1979",
        "query_hash": "0545cdc25b41864657a03ce4ea9c45f904184ee80f7d6131772c5e2887605d06",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-FindGuestswithHighBlastRadius.kql",
        "query": "//Find Azure AD guest accounts that are considered to have a high blast radius\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where UserType == \"Guest\" and BlastRadius == \"High\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-FindGuestswithHighBlastRadius",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8680ad96-265f-4e03-9a48-298fb8f958e8",
        "query_hash": "078e0cb17cbf8941cc2b33541b12bae6e7bc0542a62e87ca1c88033c5735fe4d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-FindPrivAccountsHighBlastRadius.kql",
        "query": "//Find user accounts that hold an Azure AD privileged role and are considered to have a high blast radius\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where isnotempty(AssignedRoles) and AssignedRoles != \"[]\"\n| where BlastRadius == \"High\"",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-FindPrivAccountsHighBlastRadius",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "548f3834-6de1-4045-8ac3-c843f1cf2bce",
        "query_hash": "3b9fe8d294556118d2affcbc32ece60c40c06c412653fda07cf88b1d78693ad1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-FindUserswithmanyGroups.kql",
        "query": "//Find user accounts that are members of over 150 groups. These can cause issues with SAML claims.\n//See https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-fed-group-claims\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| extend ['Group Count']=array_length(GroupMembership)\n| sort by ['Group Count'] desc \n| where ['Group Count'] > 150",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-FindUserswithmanyGroups",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "680620c8-6914-45ae-82ec-02ccbbabf80b",
        "query_hash": "d9b112abdd9deed4709e1e64cce2c00c0038864bb16e4f154c117d98adbb9972",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CUEBA%5CIdentityInfo-VisualizeBlastRadius.kql",
        "query": "//Visualize accounts by blast radius level\n\n//Data connector required for this query - Microsoft Sentinel UEBA\n\nIdentityInfo\n| where TimeGenerated > ago(30d)\n| summarize arg_max(TimeGenerated, *) by AccountUPN\n| where isnotempty(BlastRadius)\n| summarize Count=count()by BlastRadius\n| order by Count\n| render piechart with (title=\"Accounts by Microsoft Sentinel EUBA blast radius\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "IdentityInfo-VisualizeBlastRadius",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "bff35ee2-7bc9-46ba-b10f-b3a7a0b1a383",
        "query_hash": "94193b2a19e9c6a3d6db90af6ceed8758f38fa4741eff94f6dd1e07bfc0cb97a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CWindows%20Security%20Events%5CSecEvents-FindDevicesNoLongerSendingLogs.kql",
        "query": "//Find computers that have not sent any security events for over an hour\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago (1d)\n| summarize ['Last Record Received']  = datetime_diff(\"minute\", now(), max(TimeGenerated)) by Computer\n| project Computer, ['Last Record Received']\n| where ['Last Record Received'] >= 60\n| order by ['Last Record Received'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecEvents-FindDevicesNoLongerSendingLogs",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7d97f90b-921d-467b-a6c9-0f3469825f96",
        "query_hash": "6b88ac0b61c114d5b7903f032f95032f3afb6052290bc8fce66f59615d4b94d3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CWindows%20Security%20Events%5CSecEvents-FindLateralMovementUsers.kql",
        "query": "//Use your Windows security log to find the users most at risk for lateral movement by finding those that have connected remotely to the most devices\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago (30d)\n| where EventID == \"4624\"\n| where LogonType == 10\n| where SubjectDomainName == TargetDomainName\n//Summarize total logins, distinct devices and then list all the devices each account has logged onto\n//Account is dropped to lower case to make sure each account is only listed once, i.e Reprise99 and reprise99 are combined\n| summarize\n    ['Total logon count']=count(),\n    ['Distinct device logon count']=dcount(Computer),\n    ['List of devices']=make_set(Computer)\n    by tolower(Account)\n| sort by ['Distinct device logon count'] desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecEvents-FindLateralMovementUsers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5639a386-4708-4040-8ae6-03d6f554bef6",
        "query_hash": "bd4ef2f9c5add6e5266cb99ffe7093b602087851c6e2c869b506d0db132c6356",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CWindows%20Security%20Events%5CSecEvents-PotentialRDPRecon.kql",
        "query": "//Detect when a user connects to 3 or more unique devices via RDP over a 30 minute period\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago (1d)\n| where EventID == \"4624\"\n| where LogonType == 10\n| where SubjectDomainName == TargetDomainName\n//Account is dropped to lower case to make sure each account is only listed once, i.e Reprise99 and reprise99 are combined\n| summarize\n    ['Distinct device logon count']=dcount(Computer),\n    ['List of devices']=make_set(Computer)\n    by tolower(Account), bin(TimeGenerated, 30m)\n//Find accounts that have logged on to 3 or more unique devices in less than 30 minutes\n| where ['Distinct device logon count'] >= 3",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecEvents-PotentialRDPRecon",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "6a6e41f4-12bc-4144-85bf-10c81830a207",
        "query_hash": "b8a6ae458fbd01a73134763c7e96640f87be1023b64a65f0c7e6d3784865bccd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CWindows%20Security%20Events%5CSecEvents-SummarizeLogonEvents.kql",
        "query": "//Create a summary of interactive and remote interactive (RDP) logons to your Windows devices using the security event logs\n\n//Data connector required for this query - Windows Security Events via AMA or Security Events via Legacy Agent\n\nSecurityEvent\n| where TimeGenerated > ago (30d)\n| where EventID == \"4624\"\n| where LogonType in (\"2\", \"10\")\n//Search for just domain logon events but matching subject and target domain name fields\n| where SubjectDomainName == TargetDomainName\n| summarize\n    ['Interactive logon count']=countif(LogonType == 2),\n    ['Interactive distinct logon count']=dcountif(Account, LogonType == 2),\n    ['List of interactive logons']=make_set_if(Account, LogonType == 2),\n    ['Remote interactive logon count']=countif(LogonType == 10),\n    ['Remote interactive distinct logon count']=dcountif(Account, LogonType == 10),\n    ['List of remote interactive logons']=make_set_if(Account, LogonType == 10)\n    by Computer\n| sort by Computer asc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "SecEvents-SummarizeLogonEvents",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "60d6b3c8-e6e8-4c3b-ab35-223567659b4d",
        "query_hash": "df9cc769b11418c16943c2d9d45e67082eab3218a2f85d72f137de675fa1e6e1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CWorkbooks%5C365DaysofKQL-Day100.kql",
        "query": "{\n  \"version\": \"Notebook/1.0\",\n  \"items\": [\n    {\n      \"type\": 11,\n      \"content\": {\n        \"version\": \"LinkItem/1.0\",\n        \"style\": \"tabs\",\n        \"links\": [\n          {\n            \"id\": \"1a2013a0-0c04-4ade-a7b3-10b1b3a1691f\",\n            \"cellValue\": \"tab\",\n            \"linkTarget\": \"parameter\",\n            \"linkLabel\": \"Azure AD Sign-Ins\",\n            \"subTarget\": \"azureadsign\",\n            \"style\": \"link\"\n          },\n          {\n            \"id\": \"b25342e2-48b6-4369-b4aa-4c4b100f5417\",\n            \"cellValue\": \"tab\",\n            \"linkTarget\": \"parameter\",\n            \"linkLabel\": \"Azure AD Audit\",\n            \"subTarget\": \"azureadaudit\",\n            \"style\": \"link\"\n          },\n          {\n            \"id\": \"2138f218-9a99-44ea-9cde-c981aefd1ea7\",\n            \"cellValue\": \"tab\",\n            \"linkTarget\": \"parameter\",\n            \"linkLabel\": \"MFA Analytics\",\n            \"subTarget\": \"mfa\",\n            \"style\": \"link\"\n          },\n          {\n            \"id\": \"1f23a0b2-df81-4c09-ab67-fcecf73f820e\",\n            \"cellValue\": \"tab\",\n            \"linkTarget\": \"parameter\",\n            \"linkLabel\": \"Office 365 Analytics\",\n            \"subTarget\": \"o365\",\n            \"style\": \"link\"\n          },\n          {\n            \"id\": \"55414398-f3a6-4170-b967-302f11d52be8\",\n            \"cellValue\": \"tab\",\n            \"linkTarget\": \"parameter\",\n            \"linkLabel\": \"Sentinel Analytics\",\n            \"subTarget\": \"sentinel\",\n            \"style\": \"link\"\n          }\n        ]\n      },\n      \"name\": \"links - 0\"\n    },\n    {\n      \"type\": 9,\n      \"content\": {\n        \"version\": \"KqlParameterItem/1.0\",\n        \"parameters\": [\n          {\n            \"id\": \"7505c02c-5bdc-46d9-8ff8-72e5173ed77a\",\n            \"version\": \"KqlParameterItem/1.0\",\n            \"name\": \"Timerange\",\n            \"label\": \"Time Range\",\n            \"type\": 4,\n            \"value\": {\n              \"durationMs\": 2592000000\n            },\n            \"typeSettings\": {\n              \"selectableValues\": [\n                {\n                  \"durationMs\": 259200000\n                },\n                {\n                  \"durationMs\": 604800000\n                },\n                {\n                  \"durationMs\": 1209600000\n                },\n                {\n                  \"durationMs\": 2419200000\n                },\n                {\n                  \"durationMs\": 2592000000\n                },\n                {\n                  \"durationMs\": 5184000000\n                },\n                {\n                  \"durationMs\": 7776000000\n                }\n              ]\n            },\n            \"timeContext\": {\n              \"durationMs\": 86400000\n            }\n          }\n        ],\n        \"style\": \"pills\",\n        \"queryType\": 0,\n        \"resourceType\": \"microsoft.operationalinsights/workspaces\"\n      },\n      \"customWidth\": \"25\",\n      \"name\": \"parameters - 2\"\n    },\n    {\n      \"type\": 12,\n      \"content\": {\n        \"version\": \"NotebookGroup/1.0\",\n        \"groupType\": \"editable\",\n        \"items\": [\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"union SigninLogs, AAD*\\r\\n| where TimeGenerated {Timerange}\\r\\n| summarize count() by Type, bin(TimeGenerated, 1d)\",\n              \"size\": 1,\n              \"title\": \"Total Azure AD Signins per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"areachart\"\n            },\n            \"name\": \"query - 3\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SigninLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| project TimeGenerated, ResultType, ConditionalAccessPolicies\\r\\n| where ResultType == 53003\\r\\n| extend FailedPolicy = tostring(ConditionalAccessPolicies[0].displayName)\\r\\n| where isnotempty(FailedPolicy)\\r\\n| summarize FailureCount=count()by FailedPolicy, bin(TimeGenerated, 1d)\",\n              \"size\": 1,\n              \"title\": \"Conditional Access Policy Failures\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"unstackedbar\"\n            },\n            \"name\": \"query - 0\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"AADUserRiskEvents\\r\\n| where TimeGenerated {Timerange}\\r\\n| summarize RiskEvents=count() by RiskEventType, bin(TimeGenerated, 1d)\\r\\n| where isnotempty( RiskEvents)\\r\\n| render timechart \",\n              \"size\": 1,\n              \"title\": \"Risk Event Types per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"unstackedbar\"\n            },\n            \"name\": \"query - 1\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SigninLogs\\r\\n| project TimeGenerated, AuthenticationDetails\\r\\n| where TimeGenerated {Timerange}\\r\\n| extend AuthMethod = tostring(parse_json(AuthenticationDetails)[0].authenticationMethod)\\r\\n| where AuthMethod != \\\"Previously satisfied\\\"\\r\\n| summarize\\r\\n    Password=countif(AuthMethod == \\\"Password\\\"),\\r\\n    Passwordless=countif(AuthMethod in (\\\"FIDO2 security key\\\", \\\"Passwordless phone sign-in\\\", \\\"Windows Hello for Business\\\"))\\r\\n    by bin(TimeGenerated,1d)\",\n              \"size\": 1,\n              \"title\": \"Password vs Passwordless Sign Ins per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"unstackedbar\"\n            },\n            \"name\": \"query - 2\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"let StartDate = now(-180d);\\r\\nlet EndDate = now();\\r\\nAuditLogs\\r\\n| where OperationName == \\\"Redeem external user invite\\\"\\r\\n| make-series TotalInvites=count() on TimeGenerated in range(StartDate, EndDate, 1d)\\r\\n| extend (RSquare, SplitIdx, Variance, RVariance, TrendLine)=series_fit_2lines(TotalInvites)\\r\\n| project TimeGenerated, TotalInvites, TrendLine\",\n              \"size\": 1,\n              \"title\": \"Guest invites redeemed per day with trend\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"timechart\"\n            },\n            \"name\": \"query - 4\"\n          }\n        ]\n      },\n      \"conditionalVisibility\": {\n        \"parameterName\": \"tab\",\n        \"comparison\": \"isEqualTo\",\n        \"value\": \"azureadsign\"\n      },\n      \"name\": \"group - 1\"\n    },\n    {\n      \"type\": 12,\n      \"content\": {\n        \"version\": \"NotebookGroup/1.0\",\n        \"groupType\": \"editable\",\n        \"items\": [\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"AuditLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where OperationName in (\\\"Reset password (self-service)\\\", \\\"Unlock user account (self-service)\\\")\\r\\n| summarize\\r\\n    PasswordReset=countif(OperationName == \\\"Reset password (self-service)\\\" and ResultDescription == \\\"Successfully completed reset.\\\"),\\r\\n    AccountUnlock=countif(OperationName == \\\"Unlock user account (self-service)\\\" and ResultDescription == \\\"Success\\\")\\r\\n    by bin(TimeGenerated,1d)\",\n              \"size\": 1,\n              \"title\": \"Self Service Password Resets & Account Unlocks per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"timechart\"\n            },\n            \"name\": \"query - 0\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"AuditLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where OperationName in (\\\"Redeem external user invite\\\", \\\"Invite external user\\\")\\r\\n| summarize count() by OperationName, bin(TimeGenerated, 1d)\",\n              \"size\": 1,\n              \"title\": \"Guests Invites vs Redeemed per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"unstackedbar\"\n            },\n            \"name\": \"query - 1\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"AuditLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where OperationName == \\\"Redeem external user invite\\\"\\r\\n| extend GuestEmail = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\\r\\n| extend UserDomain = tostring(split(GuestEmail, \\\"@\\\")[1])\\r\\n| where isnotempty(UserDomain)\\r\\n| project UserDomain\\r\\n| summarize DomainCount=count()by UserDomain\\r\\n| where DomainCount > 15\\r\\n| sort by DomainCount desc \",\n              \"size\": 0,\n              \"title\": \"Top Domains Redeeming Guest Invites\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"piechart\"\n            },\n            \"name\": \"query - 2\"\n          }\n        ]\n      },\n      \"conditionalVisibility\": {\n        \"parameterName\": \"tab\",\n        \"comparison\": \"isEqualTo\",\n        \"value\": \"azureadaudit\"\n      },\n      \"name\": \"group - 4\"\n    },\n    {\n      \"type\": 12,\n      \"content\": {\n        \"version\": \"NotebookGroup/1.0\",\n        \"groupType\": \"editable\",\n        \"items\": [\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SecurityIncident\\r\\n| where TimeGenerated {Timerange}\\r\\n| summarize IncidentSeverity=dcount(IncidentNumber)by Severity, bin(TimeGenerated,1d)\",\n              \"size\": 1,\n              \"title\": \"Microsoft Sentinel Incident Severity per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"linechart\"\n            },\n            \"name\": \"query - 0\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SecurityIncident\\r\\n| where TimeGenerated {Timerange}\\r\\n| where Status == \\\"New\\\" and ModifiedBy == \\\"Incident created from alert\\\"\\r\\n| summarize count() by Title\\r\\n| sort by count_ desc\\r\\n| take 10\",\n              \"size\": 0,\n              \"title\": \"Top Sentinel Incidents Triggered\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"table\",\n              \"gridSettings\": {\n                \"formatters\": [\n                  {\n                    \"columnMatch\": \"count_\",\n                    \"formatter\": 3,\n                    \"formatOptions\": {\n                      \"palette\": \"blue\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"customWidth\": \"50\",\n            \"name\": \"query - 1\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SecurityIncident\\r\\n| where TimeGenerated > ago(180d)\\r\\n| where Status == \\\"New\\\" and ModifiedBy == \\\"Incident created from alert\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by Title\\r\\n| extend ['Days Since Last Incident'] = datetime_diff(\\\"day\\\", now(), TimeGenerated)\\r\\n| project Title, ['Days Since Last Incident']\\r\\n| sort by ['Days Since Last Incident'] desc\\r\\n| take 10\",\n              \"size\": 0,\n              \"title\": \"Sentinel Incidents not Recently Triggered\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"gridSettings\": {\n                \"formatters\": [\n                  {\n                    \"columnMatch\": \"Days Since Last Incident\",\n                    \"formatter\": 3,\n                    \"formatOptions\": {\n                      \"palette\": \"coldHot\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"customWidth\": \"50\",\n            \"name\": \"query - 2\"\n          }\n        ]\n      },\n      \"conditionalVisibility\": {\n        \"parameterName\": \"tab\",\n        \"comparison\": \"isEqualTo\",\n        \"value\": \"sentinel\"\n      },\n      \"name\": \"group - 6\"\n    },\n    {\n      \"type\": 12,\n      \"content\": {\n        \"version\": \"NotebookGroup/1.0\",\n        \"groupType\": \"editable\",\n        \"items\": [\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"OfficeActivity\\r\\n| where TimeGenerated {Timerange}\\r\\n| project TimeGenerated, Operation\\r\\n| where Operation in (\\\"FileSyncDownloadedFull\\\",\\\"FileSyncUploadedFull\\\",\\\"FileDownloaded\\\",\\\"FileUploaded\\\")\\r\\n| summarize FilesDownloaded=countif(Operation in (\\\"FileDownloaded\\\",\\\"FileSyncDownloadedFull\\\")),FilesUploaded=countif(Operation in (\\\"FileSyncUploadedFull\\\",\\\"FileUploaded\\\")) by bin(TimeGenerated,1d)\",\n              \"size\": 1,\n              \"title\": \"File Uploads vs Downloads in Office 365 per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"unstackedbar\"\n            },\n            \"name\": \"query - 1\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"OfficeActivity\\r\\n| where TimeGenerated {Timerange}\\r\\n| where UserType == \\\"Regular\\\"\\r\\n| where CommunicationType == \\\"Team\\\"\\r\\n| where OfficeWorkload == \\\"MicrosoftTeams\\\" \\r\\n| where Operation in (\\\"MemberAdded\\\", \\\"MemberRemoved\\\")\\r\\n| extend User = tostring(Members[0].UPN)\\r\\n| where User contains \\\"#EXT\\\"\\r\\n| project TimeGenerated, Operation, User\\r\\n| summarize\\r\\n    GuestsAdded=countif(Operation == \\\"MemberAdded\\\"),\\r\\n    GuestsRemoved=countif(Operation == \\\"MemberRemoved\\\")\\r\\n    by bin(TimeGenerated,1d)\",\n              \"size\": 1,\n              \"title\": \"Guests Added vs Removed to Teams per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"unstackedbar\"\n            },\n            \"name\": \"query - 2\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"IdentityInfo\\r\\n| where TimeGenerated > ago(21d)\\r\\n| where UserType == \\\"Guest\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by AccountUPN, MailAddress\\r\\n| project UserId=tolower(AccountUPN), MailAddress\\r\\n| join kind=inner (\\r\\n    OfficeActivity\\r\\n    | where TimeGenerated {Timerange}\\r\\n    | where Operation in (\\\"FileSyncDownloadedFull\\\", \\\"FileDownloaded\\\")\\r\\n    )\\r\\n    on UserId\\r\\n| extend username = tostring(split(UserId,\\\"#\\\")[0])\\r\\n| parse MailAddress with * \\\"@\\\" userdomain \\r\\n| summarize FileCount=count() by userdomain\\r\\n| sort by FileCount desc\\r\\n| take 10\",\n              \"size\": 0,\n              \"title\": \"Top Guest Domains Downloading from Office 365\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"table\",\n              \"gridSettings\": {\n                \"formatters\": [\n                  {\n                    \"columnMatch\": \"FileCount\",\n                    \"formatter\": 8,\n                    \"formatOptions\": {\n                      \"palette\": \"magenta\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"customWidth\": \"33\",\n            \"name\": \"query - 0\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SecurityAlert\\r\\n| where TimeGenerated {Timerange}\\r\\n| where ProviderName == \\\"OATP\\\"\\r\\n| where AlertName in (\\\"Email messages containing malicious URL removed after delivery\u200b\\\",\\\"Email messages containing phish URLs removed after delivery\\\")\\r\\n| extend x = todynamic(Entities)\\r\\n| parse-where x with * '\\\"Url\\\":\\\"' MaliciousURL '\\\"' *\\r\\n| parse-where MaliciousURL with * \\\"//\\\" MaliciousDomain \\\"/\\\" *\\r\\n| project TimeGenerated, MaliciousDomain\\r\\n| summarize DomainCount=count() by MaliciousDomain\\r\\n| sort by DomainCount desc \\r\\n| take 10\",\n              \"size\": 0,\n              \"title\": \"Top Malicious Domains with Phishing Emails Removed\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"table\",\n              \"gridSettings\": {\n                \"formatters\": [\n                  {\n                    \"columnMatch\": \"DomainCount\",\n                    \"formatter\": 8,\n                    \"formatOptions\": {\n                      \"palette\": \"orangeRed\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"customWidth\": \"33\",\n            \"name\": \"query - 3\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SecurityAlert\\r\\n| where TimeGenerated {Timerange}\\r\\n| where ProviderName == \\\"OATP\\\"\\r\\n| where AlertName in (\\\"Email messages containing malicious URL removed after delivery\u200b\\\", \\\"Email messages containing malicious file removed after delivery\u200b\\\")\\r\\n| extend x = todynamic(Entities)\\r\\n| mv-expand x\\r\\n| parse-where x with * 'MailboxPrimaryAddress\\\":\\\"' User '\\\"' *\\r\\n| summarize PhishingCount=count()by User\\r\\n| order by PhishingCount\",\n              \"size\": 0,\n              \"title\": \"Top Users Targeted by Phishing\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"gridSettings\": {\n                \"formatters\": [\n                  {\n                    \"columnMatch\": \"PhishingCount\",\n                    \"formatter\": 8,\n                    \"formatOptions\": {\n                      \"palette\": \"orangeRed\"\n                    }\n                  }\n                ]\n              }\n            },\n            \"customWidth\": \"33\",\n            \"name\": \"query - 4\"\n          }\n        ]\n      },\n      \"conditionalVisibility\": {\n        \"parameterName\": \"tab\",\n        \"comparison\": \"isEqualTo\",\n        \"value\": \"o365\"\n      },\n      \"name\": \"group - 7\"\n    },\n    {\n      \"type\": 12,\n      \"content\": {\n        \"version\": \"NotebookGroup/1.0\",\n        \"groupType\": \"editable\",\n        \"items\": [\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SigninLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where AuthenticationRequirement == \\\"multiFactorAuthentication\\\"\\r\\n| extend x=todynamic(AuthenticationDetails)\\r\\n| mv-expand x\\r\\n| project TimeGenerated, x\\r\\n| extend MFAResultStep = tostring(x.authenticationStepResultDetail)\\r\\n| summarize\\r\\n    MFARequired=countif(MFAResultStep == \\\"MFA completed in Azure AD\\\"),\\r\\n    PreviouslySatisfied=countif(MFAResultStep == \\\"MFA requirement satisfied by claim in the token\\\")\\r\\n    by bin(TimeGenerated, 1d)\",\n              \"size\": 1,\n              \"title\": \"MFA Challenge vs MFA Previously Satisfied per day\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"timechart\"\n            },\n            \"name\": \"query - 2\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SigninLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where AuthenticationRequirement == \\\"multiFactorAuthentication\\\"\\r\\n| extend x=todynamic(AuthenticationDetails)\\r\\n| mv-expand x\\r\\n| project TimeGenerated, x\\r\\n| where x.RequestSequence != \\\"1\\\"\\r\\n| where x.authenticationStepRequirement == \\\"Multi-factor authentication\\\"\\r\\n| extend MFAMethod = tostring(x.authenticationMethod)\\r\\n| summarize MFAMethodCount=count() by MFAMethod, bin(TimeGenerated, 1d)\\r\\n| where MFAMethod != \\\"Previously satisfied\\\" and isnotempty(MFAMethod)\",\n              \"size\": 1,\n              \"title\": \"MFA methods per day \",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"areachart\"\n            },\n            \"name\": \"query - 3\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SigninLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where AuthenticationRequirement == \\\"multiFactorAuthentication\\\"\\r\\n| extend AuthMethod = tostring(parse_json(AuthenticationDetails)[0].authenticationMethod)\\r\\n| summarize count() by AuthMethod\\r\\n| where AuthMethod has_any (\\\"Text message\\\", \\\"Mobile app notification\\\", \\\"OATH verification code\\\", \\\"Passwordless phone sign-in\\\")\",\n              \"size\": 2,\n              \"title\": \"MFA Methods by Type\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"visualization\": \"piechart\"\n            },\n            \"customWidth\": \"33\",\n            \"name\": \"query - 0\"\n          },\n          {\n            \"type\": 3,\n            \"content\": {\n              \"version\": \"KqlItem/1.0\",\n              \"query\": \"SigninLogs\\r\\n| where TimeGenerated {Timerange}\\r\\n| where ResultType == 0\\r\\n| summarize\\r\\n    TotalCount=count(),\\r\\n    MFACount=countif(AuthenticationRequirement == \\\"multiFactorAuthentication\\\"),\\r\\n    nonMFACount=countif(AuthenticationRequirement == \\\"singleFactorAuthentication\\\")\\r\\n    by AppDisplayName\\r\\n| project\\r\\n    AppDisplayName,\\r\\n    TotalCount,\\r\\n    MFACount,\\r\\n    nonMFACount,\\r\\n    MFAPercentage=(todouble(MFACount) * 100 / todouble(TotalCount))\\r\\n| sort by MFAPercentage asc, TotalCount desc\\r\\n| take 10\",\n              \"size\": 0,\n              \"title\": \"Most Popular Apps with the least MFA coverage\",\n              \"queryType\": 0,\n              \"resourceType\": \"microsoft.operationalinsights/workspaces\",\n              \"gridSettings\": {\n                \"formatters\": [\n                  {\n                    \"columnMatch\": \"MFAPercentage\",\n                    \"formatter\": 8,\n                    \"formatOptions\": {\n                      \"palette\": \"red\"\n                    },\n                    \"numberFormat\": {\n                      \"unit\": 1,\n                      \"options\": {\n                        \"style\": \"decimal\"\n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"customWidth\": \"66\",\n            \"name\": \"query - 1\"\n          }\n        ]\n      },\n      \"conditionalVisibility\": {\n        \"parameterName\": \"tab\",\n        \"comparison\": \"isEqualTo\",\n        \"value\": \"mfa\"\n      },\n      \"name\": \"group - 7\"\n    }\n  ],\n  \"fromTemplateId\": \"sentinel-UserWorkbook\",\n  \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"\n}",
        "source_type": "text",
        "source_index": 0,
        "query_name": "365DaysofKQL-Day100",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1767d494-f9cb-4164-949c-adfb447f4858",
        "query_hash": "321ef18582588ae5d18cd823bb14d8a42a6b119b927b21c96b1449f92e94dc37",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit%20-%20Show%20OperationName%20and%20OperationCount.kql",
        "query": "// Show OperationName and OperationCount\n// See here: https://github.com/rod-trent/SentinelKQL/blob/master/IntuneActivityTypes.txt\nIntuneAuditLogs\n| summarize OperationCount=count() by OperationName \n| sort by OperationNumberdesc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit - Show OperationName and OperationCount",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5b2f8a3f-3c3c-43f9-8556-36a798778920",
        "query_hash": "04b70dc419b5f0c7b1c6f2d11b8c651f81c959470da150c7ce97673c5c258ac7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ChangesinConfigurationProfiles.kql",
        "query": "IntuneAuditLogs\n| where OperationName contains \"patch\"\n| extend User = todynamic(Properties).Actor.UPN\n| extend Apps = todynamic(Properties).Actor.ApplicationName\n| extend Device = todynamic(Properties).TargetObjectIds\n//| extend Policy = todynamic(Properties).TargetDisplayNames\n| extend Policy = replace_regex(tostring(todynamic(Properties).TargetDisplayNames), @'[\"\\[\\]]', \"\")\n| mv-expand todynamic(Properties).Targets[0].ModifiedProperties\n| extend Configuration = todynamic(Properties_Targets_0_ModifiedProperties).Name\n| extend ['New Value'] = todynamic(Properties_Targets_0_ModifiedProperties).New\n| extend ['Old Value'] = todynamic(Properties_Targets_0_ModifiedProperties).Old\n| project TimeGenerated, Policy, Configuration, ['New Value'], ['Old Value'], User",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ChangesinConfigurationProfiles",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d0831ecd-8d15-4583-9b2c-bd0b4c39725e",
        "query_hash": "0d08b751b0be89601e5493eb239bf89baf900e0f57ac72357b2ace852c82fc2c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-DeletedDevices.kql",
        "query": "IntuneAuditLogs\n| where OperationName contains \"Delete Manageddevice\"\n| extend User = todynamic(Properties).Actor.UPN\n| extend Application = todynamic(Properties).Actor.ApplicationName\n| extend Device = replace_regex(tostring(todynamic(Properties).TargetObjectIds), @'[\"\\[\\]]', \"\")\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-DeletedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d561d701-d010-4910-94c9-4ce4a76b2e29",
        "query_hash": "af0c22267125de04c26db950f5fffce6c912b66c4bebe8b0ac0024332ba12e0f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowClientCertificates.kql",
        "query": "// Show client certificates that have been created, changed or deleted in Intune and who initiated that.\nIntuneAuditLogs\n| where OperationName has \"ClientCertificate\"\n| extend User = tostring(todynamic(Properties).Actor.UPN)\n| extend DeviceId = tostring(todynamic(Properties).TargetObjectIds[0])\n| join kind=leftouter IntuneDevices on DeviceId // DeviceName from IntuneDevices\n| distinct TimeGenerated, User, DeviceName, OperationName\n| sort by TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowClientCertificates",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c3485775-a282-41d5-a99e-4fa169f99f05",
        "query_hash": "3d43b98a32da2e68c5f27e81384c3ab20bbccbf983b15e72e231d188b792a183",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowDeletedDevices.kql",
        "query": "// Show devices that have been deleted from Intune and who initiated that.\nIntuneAuditLogs\n| where OperationName has \"Delete ManagedDevice\"\n| extend User = tostring(todynamic(Properties).Actor.UPN)\n| extend DeviceId = tostring(todynamic(Properties).TargetObjectIds[0])\n| join kind=leftouter IntuneDevices on DeviceId // DeviceName from IntuneDevices\n| distinct TimeGenerated, User, DeviceName\n| sort by TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowDeletedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a3db1df2-0a73-48c1-b6ee-3408549d0006",
        "query_hash": "7163cfb59f95ed523998715526f085d9828f8444f17e6a5bea04893bf9ede7a1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowEnableLostModeDevices.kql",
        "query": "// Show devices for which the enableLostMode was activated and who initiated that.\nIntuneAuditLogs\n| where OperationName has \"enableLostMode\"\n| extend User = tostring(todynamic(Properties).Actor.UPN)\n| extend DeviceId = tostring(todynamic(Properties).TargetObjectIds[0])\n| join kind=leftouter IntuneDevices on DeviceId // DeviceName from IntuneDevices\n| distinct TimeGenerated, User, DeviceName\n| sort by TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowEnableLostModeDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d1cbd3af-199f-498f-98aa-7e3445b2ccf8",
        "query_hash": "70e453e7e575fe49d7f1d8f4cc244ed309f39f1004bcd34fc3c4c5db21780b89",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowFeatureUpdatePolicies.kql",
        "query": "// Show changes to Feature Update Policies and who created or changed them.\nIntuneAuditLogs\n| where OperationName has \"WindowsFeatureUpdateProfile\"\n| extend User = todynamic(Properties).Actor.UPN\n| extend ['Name of Policy'] = todynamic(Properties).TargetDisplayNames[0]\n| extend Changes = todynamic(Properties).Targets[0].ModifiedProperties[0].Name\n| project ['Name of Policy'], Changes, User",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowFeatureUpdatePolicies",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c0bd3845-0b8c-443c-b62c-42adffe9cbaa",
        "query_hash": "5992e1daa7ec9d9c94bbd2c9b607436bc583e56af18ec59e3936e3ca6eb6b8fc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowLocatedDevices.kql",
        "query": "// Show Devices for which the option \u201cLocate Device\u201c was used.\nIntuneAuditLogs\n| where OperationName has \"locateDevice\"\n| extend User = tostring(todynamic(Properties).Actor.UPN)\n| extend DeviceId = tostring(todynamic(Properties).TargetObjectIds[0])\n| join kind=leftouter IntuneDevices on DeviceId // DeviceName from IntuneDevices\n| distinct TimeGenerated, User, DeviceName\n| sort by TimeGenerated desc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowLocatedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b4b9f57e-4a4a-4533-8aa1-025ca6a2dd7c",
        "query_hash": "0cc8ab2f4c8d93f55de788e974f8d8e5fe2290fc1cdd2890c4cb116a32444a39",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowRemoteLockedDevices.kql",
        "query": "// Show devices that have been remote locked and who initiated that.\nIntuneAuditLogs\n| where OperationName has \"remoteLock\"\n| extend User = todynamic(Properties).Actor.UPN\n| extend IntuneDeviceID = todynamic(Properties).TargetObjectIds[0]\n| project TimeGenerated, IntuneDeviceID, User\n| sort by TimeGenerated desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowRemoteLockedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "cc27aabb-c8f5-4efc-9010-821a2a277ff4",
        "query_hash": "19ef682c119a2b1490fab8dd54480fe9b66b89fbe1e3c0f16567089d18a3c7df",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-ShowWhatActionstookplacefromwhichAppOrUser.kql",
        "query": "// Audit Actions\nIntuneAuditLogs\n| parse Properties with * ',\"TargetDisplayNames\":[\"' Object '\"],' *\n| where Object != \"\"\n| extend User = todynamic(Properties).Actor.UPN\n| extend ['Azure Application'] = todynamic(Properties).Actor.ApplicationName\n| extend DeviceID = replace_regex(tostring(todynamic(Properties).TargetObjectIds), @'[\"\\[\\]]', \"\")\n| project OperationName, DeviceID, ['Task'] = Object, ['Azure Application'], User ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-ShowWhatActionstookplacefromwhichAppOrUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "ee4a9054-7083-40b0-ad65-8bd77dcd48af",
        "query_hash": "dda27779fd8942fb6e29108f87c45d0b83ef1fdc04c3fb3e9859a19dab2ca6a9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CAudit%5CAudit-WipedDevices.kql",
        "query": "// Show a list of Devices that have recieved the Wipe command in Intune and also display who or which application has wiped a device.\nIntuneAuditLogs\n| where OperationName contains \"wipe\"\n| extend User = todynamic(Properties).Actor.UPN // Show the user (initiator) if present.\n| extend Application = todynamic(Properties).Actor.ApplicationName // Show the application (initiator) if present.\n| extend Device = replace_regex(tostring(todynamic(Properties).TargetObjectIds), @'[\"\\[\\]]', \"\") // Show target device.\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Audit-WipedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c73b21db-c58d-4abe-9886-4fddd3a0003e",
        "query_hash": "ae7ec9f21dc03cfb7613ed2d973463e65fee9ca0d4fc1d60bb714ab411cfa677",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance%20-%20Intune%20devices%20that%20are%20compliant%20with%20OS%2C%20OS%20Version%20and%20number%20of%20devices.kql",
        "query": "// Intune devices that are compliant with OS, OS Version, and number of devices\n// See here: https://github.com/rod-trent/SentinelKQL/blob/master/IntuneisCompliantByOSandOSVersion.txt\nIntuneDeviceComplianceOrg \n| where isnotempty(DeviceName)\n| where ComplianceState == \"Compliant\"\n| summarize count() by OSDescription, OSVersion",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance - Intune devices that are compliant with OS, OS Version and number of devices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d9049d31-3986-48bc-adae-2cb0b9d0e027",
        "query_hash": "9b0575b11c575866c2e8cfb0335f3e9417ab2281bf213b800b2e3d33f09914a5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance%20-%20List%20of%20Devices%20that%20have%20DeviceHealthThreatLevel%20Status%20of%20Secured.kql",
        "query": "// List of Devices that have DeviceHealthThreatLevel Status of Secured\nIntuneDeviceComplianceOrg\n| where isnotempty(DeviceHealthThreatLevel)\n| where DeviceHealthThreatLevel == \"Secured\"\n| project DeviceName, UserName , DeviceHealthThreatLevel",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance - List of Devices that have DeviceHealthThreatLevel Status of Secured",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4361d208-647f-43fe-bde9-22fcf050064a",
        "query_hash": "7b4fc2c57ed12921901f2ae0ed94ce33a76f14b4b0401218cf549b64128cd435",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance-NotcompliantDevices.kql",
        "query": "IntuneDeviceComplianceOrg\n| where todatetime(LastContact) > ago(30d)\n| where ComplianceState == \"Not compliant\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| project ComplianceState, DeviceName, LastContact\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance-NotcompliantDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8dc62e90-de0e-41d9-ae25-7f1ce2c37f37",
        "query_hash": "67b197472426adbd42e1676aea34c1347cf5221696718d1c83c81943f5f5d5c6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance-NumberAndListOfCompanyOwnedDevicesWithComplianceStatus.kql",
        "query": "// Count of Company owned Devices that are Compliant or Not compliant\nIntuneDeviceComplianceOrg\n| where todatetime(LastContact) > ago(30d)\n| where ComplianceState == \"Not compliant\" // Change to \"Compliant\" if you want to count only Compliant Devices\n| where OwnerType == \"Company\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| project ComplianceState, DeviceName, LastContact\n| summarize count(DeviceName)\n\n// Create a List with all devices:\nIntuneDeviceComplianceOrg\n| where todatetime(LastContact) > ago(30d)\n| where ComplianceState == \"Not compliant\" // Change to \"Compliant\" if you want to count only Compliant Devices\n| where OwnerType == \"Company\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| project ComplianceState, DeviceName, LastContact, OS",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance-NumberAndListOfCompanyOwnedDevicesWithComplianceStatus",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c6064ed4-0ad7-47d2-824d-bce77a8b440c",
        "query_hash": "d5e75566f141267f2735de0d312841ce6eaf1665c72cd166bb060845aab23e5a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance-NumberOfActiveDevicesInTheLast7And30Days.kql",
        "query": "let Monthly = \nIntuneDeviceComplianceOrg\n| where todatetime(LastContact) > ago(30d)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| summarize count(DeviceName)\n| extend CustomName=\"Active Devices\"\n| extend MonthlyCount=count_DeviceName;\nlet Weekly=\nIntuneDeviceComplianceOrg\n| where todatetime(LastContact) > ago(7d)\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| summarize count(DeviceName)\n| extend CustomName=\"Active Devices\"\n| extend WeeklyCount=count_DeviceName;\nMonthly\n| join kind=inner Weekly on CustomName\n| project-rename ['Last 30 Days']=MonthlyCount, ['Last 7 Days'] = WeeklyCount, Description=CustomName\n| project Description,['Last 7 Days'],['Last 30 Days']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance-NumberOfActiveDevicesInTheLast7And30Days",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "1c6fcaa4-8eb1-449d-9e56-63ae7d204bb6",
        "query_hash": "668c6c5ed9c0a569ed1ff91806bc66b2a00fc1c0850020626faea565d309cc77",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance-NumberOfCompanyOwnedDevicesThatAreCompliantOrNotCompliantSummarizedByOSPlatform.kql",
        "query": "// Number of Company owned Devices that are Compliant or Not Compliant summarized by OS Platform\nlet notcompliant =\n    IntuneDeviceComplianceOrg\n    | where ComplianceState == \"Not compliant\"\n    | where OwnerType == \"Company\"\n    | where OSDescription != \"\"\n    | summarize arg_max(TimeGenerated, *) by DeviceName\n    | project ComplianceState, DeviceName, LastContact, OSDescription, OS\n    | summarize count(DeviceName) by OSDescription;\nlet compliant =\n    IntuneDeviceComplianceOrg\n    | where ComplianceState == \"Compliant\"\n    | where OwnerType == \"Company\"\n    | where OSDescription != \"\"\n    | summarize arg_max(TimeGenerated, *) by DeviceName\n    | project ComplianceState, DeviceName, LastContact, OSDescription, OS\n    | summarize count(DeviceName) by OSDescription;\nnotcompliant\n| join kind=inner compliant on OSDescription\n| project-rename\n    [\"Compliant\"]=count_DeviceName1,\n    [\"Not Compliant\"]=count_DeviceName,\n    [\"Platform\"]=OSDescription\n| project [\"Platform\"], [\"Compliant\"], [\"Not Compliant\"]\n| sort by Compliant desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance-NumberOfCompanyOwnedDevicesThatAreCompliantOrNotCompliantSummarizedByOSPlatform",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0d4e5bb4-acd0-498f-92f4-8c7a87d9a331",
        "query_hash": "df5e4ec3e3a5ae2adeda8c8a412fc553f5d16dd61d356ab2c6c30f6032965b82",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CCompliance%5CCompliance-NumberofDeviceswithDeviceHealthThreatLevelStatus.kql",
        "query": "// Number of Devices with DeviceHealthThreatLevel Status\nlet secured =\nIntuneDeviceComplianceOrg\n| where isnotempty(DeviceHealthThreatLevel)\n| where DeviceHealthThreatLevel == \"Secured\"\n| distinct DeviceName, UserName , DeviceHealthThreatLevel\n| summarize count(DeviceName)\n| extend ['Number of Devices'] = count_DeviceName\n| extend Status = \"Secured\";\nlet notsecured =\nIntuneDeviceComplianceOrg\n| where isnotempty(DeviceHealthThreatLevel)\n| where DeviceHealthThreatLevel == \"Not Secured\"\n| distinct  DeviceName, UserName , DeviceHealthThreatLevel\n| summarize count(DeviceName)\n| extend ['Number of Devices'] = count_DeviceName\n| extend Status = \"Not Secured\";\nlet unknown =\nIntuneDeviceComplianceOrg\n| where isnotempty(DeviceHealthThreatLevel)\n| where DeviceHealthThreatLevel == \"Unknown\"\n| distinct  DeviceName, UserName , DeviceHealthThreatLevel\n| summarize count(DeviceName)\n| extend ['Number of Devices'] = count_DeviceName\n| extend Status = \"Unknown\";\nsecured\n| union notsecured, unknown\n| project Status, ['Number of Devices']\n| sort by ['Number of Devices']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Compliance-NumberofDeviceswithDeviceHealthThreatLevelStatus",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "c69ca17f-73a0-4842-8321-25045ccfe3d4",
        "query_hash": "277e8c108e865918a8914e4cd11eaea6d63bd8371bc8183c528071a732afb35a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice%20-%20Translate%20OS%20Build%20to%20Version.kql",
        "query": "IntuneDevices\n| where OS contains \"Windows\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where todatetime(LastContact) > ago(30d) \n| extend WindowsVersion = case(OSVersion contains '19041', \"20H1\", \n                                OSVersion contains '19042', \"20H2\",    \n                                OSVersion contains '19043', \"21H1\", \n                                OSVersion contains '19044', \"21H2\",\n                                OSVersion contains '18363', \"1909\",\n                                OSVersion contains '22000', \"Win11 21H2\",\n                                \"Unknown\")\n| summarize Count=count() by OSVersion, WindowsVersion\n| sort by Count desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device - Translate OS Build to Version",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "92c3cdb7-e0c7-414d-849b-57d30bd2c797",
        "query_hash": "d74a90e86aebedbf3693b08eee7cb21f51b1867394e213ff885a5c7867485609",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice%20-%20Visualize%20device%20compliance.kql",
        "query": "// Visualize device compliance (compliant, non-compliant, managed by Config Manager, not evaluated or in grace period) per week over time\nIntuneDevices\n| where TimeGenerated > ago (30d)\n| summarize arg_max(DeviceName, *) by DeviceName\n| where isnotempty(CompliantState)\n| summarize ComplianceCount=count()by CompliantState\n| render piechart \n    with (title=\"Device compliance\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device - Visualize device compliance",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "0c572d96-536c-41fd-85c5-85548cabbf88",
        "query_hash": "02e590e51e54c24146ee4a3b8a0210905c283539a3cea416c64c8cbb20539e31",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-CompareOSBuildTodayAndYesterday.kql",
        "query": "// Compare OS Version changes between yesterday and today. It will calculate the difference (number of devices) between two days.\nlet Yesterday=\nIntuneDevices\n| where TimeGenerated < ago(1d) \n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where todatetime(LastContact) > ago(30d) \n| summarize count() by OSVersion\n| sort by OSVersion desc\n| extend CustomName = OSVersion\n| extend Version_Yesterday = count_;\nlet Today=\nIntuneDevices \n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where todatetime(LastContact) > ago(30d) \n| summarize count() by OSVersion\n| sort by OSVersion desc\n| extend CustomName = OSVersion\n| extend Version_Today = count_;\nYesterday\n| join kind=inner Today on OSVersion\n| project CustomName, Version_Today, Version_Yesterday, Difference = Version_Today-Version_Yesterday\n| sort by CustomName desc\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-CompareOSBuildTodayAndYesterday",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "12af6df5-edcb-447b-bf4c-97aa252af9ce",
        "query_hash": "0c44f72b7914797ce95b884bae4b7dd43fa4f81b3d818c355663d6c992ab36ee",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-CountdownEndofLife21H1.kql",
        "query": "// Show the number of windows devices on 21H1, the date of EOL for 21H1 as well as a countdown in days.\nIntuneDevices \n| where OS has \"Windows\"\n| extend Build = split(OSVersion, \".\")[2]\n| where Build contains \"19043\"\n| where SkuFamily == \"Enterprise\"\n| summarize count(DeviceName) by tostring(Build)\n| extend ['21H1 Enterprise - End of servicing'] = todatetime('2022-12-13')\n| extend ['Countdown in Days'] = datetime_diff('day', now(), ['21H1 Enterprise - End of servicing'])\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-CountdownEndofLife21H1",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "aa03edaa-da49-4901-99a2-08a494be5011",
        "query_hash": "8792e858aa5f470293a4195aeb81237f3fbe3d2d8fb2b770f9231b0c58525669",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-DevicesAndPrimaryUser.kql",
        "query": "// List of Devices and the assigned PrimaryUser. Filtering devices without a PrimaryUser.\nIntuneDevices\n//| where OS == \"Windows\"\n| where PrimaryUser !startswith \"000000\"\n| project DeviceName, PrimaryUser",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DevicesAndPrimaryUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7bfede3a-ff9c-4841-9157-d77bb15a6665",
        "query_hash": "e520a44f7a115d01b5b0407098fc15eb26999600bba4cba74063c389f9d22c27",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-DevicesRegisteredButNotManagedByIntune.kql",
        "query": "// Devices that are registered in Intune but not managed by it. Also shows User and Device Name as well when it was registered Intune.\nIntuneDevices \n| where DeviceState != \"Managed\"\n| where SourceSystem == \"Microsoft Intune\"\n| distinct UserName, DeviceName, SerialNumber, ['Joined Intune Date:'] = CreatedDate, JoinType",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DevicesRegisteredButNotManagedByIntune",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "148a32ca-7e66-4e18-ba2a-7e5f091b3361",
        "query_hash": "94c21cbb05a919ba8367586570a2056c6c1000ff962c4bfec5bfacfdbebe066f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-DevicesWithoutPrimaryUser.kql",
        "query": "// List of Devices with no PrimaryUser\nIntuneDevices\n| where OS == \"Windows\"\n| where PrimaryUser startswith \"000000\"\n| project DeviceName, PrimaryUser\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-DevicesWithoutPrimaryUser",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "30738a7e-008c-4ea8-aada-8df65afffef4",
        "query_hash": "2f5df0d7a7ad8320807f71d99a18fd9c6d65dd1fdbd3194367c44ea5c866ae48",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-EndofLife.kql",
        "query": "// Show EOL Dates and the number of devices effected for Win 11 21H2, Win 10 21H2, 21H1 and also 20H2.\nlet Windows11_21H2 =\n    IntuneDevices \n    | where OS has \"Windows\"\n    | extend Build = split(OSVersion, \".\")[2]\n    | where Build contains \"22000\"\n    | summarize count(DeviceName) by tostring(Build)\n    | extend ['Win11_21H2 Home, Pro - End of servicing'] = \"2023-10-10\" \n    | extend ['Win11_21H2 Enterprise - End of servicing'] = \"2024-10-08\" \n    | extend CustomName=\"Number of Devices\";\nlet 21H2 =\n    IntuneDevices \n    | where OS has \"Windows\"\n    | extend Build = split(OSVersion, \".\")[2]\n    | where Build contains \"19044\"\n    | summarize count(DeviceName) by tostring(Build)\n    | extend ['21H2 Home, Pro - End of servicing'] = \"2023-06-13\" \n    | extend ['21H2 Enterprise - End of servicing'] = \"2024-06-11\" \n    | extend CustomName=\"Number of Devices\";\nlet 21H1 =\n    IntuneDevices \n    | where OS has \"Windows\"\n    | extend Build = split(OSVersion, \".\")[2]\n    | where Build contains \"19043\"\n    | summarize count(DeviceName) by tostring(Build)\n    | extend ['21H1 Home, Pro - End of servicing'] = \"2022-12-13\" \n    | extend ['21H1 Enterprise - End of servicing'] = \"2022-12-13\" \n    | extend CustomName=\"Number of Devices\";\nlet 20H2 =\n    IntuneDevices \n    | where OS has \"Windows\"\n    | extend Build = split(OSVersion, \".\")[2]\n    | where Build contains \"19042\"\n    | summarize count(DeviceName) by tostring(Build)\n    | extend ['20H2 Home, Pro - End of servicing'] = \"End of servicing\" \n    | extend ['20H2 Enterprise - End of servicing'] = \"2023-05-09\" \n    | extend CustomName=\"Number of Devices\";\n21H2\n| join kind=inner 21H1 on CustomName\n| join kind=inner 20H2 on CustomName\n| join kind=inner Windows11_21H2 on CustomName\n| project \n    ['Number of Devices with 21H2'] = count_DeviceName, ['21H2 Home, Pro - End of servicing'], ['21H2 Enterprise - End of servicing'],\n    ['Number of Devices with 21H1'] = count_DeviceName1, ['21H1 Home, Pro - End of servicing'], ['21H1 Enterprise - End of servicing'],\n    ['Number of Devices with 20H2'] = count_DeviceName2,  ['20H2 Home, Pro - End of servicing'], ['20H2 Enterprise - End of servicing'],\n    ['Number of Devices with Win11_21H2'] = count_DeviceName3, ['Win11_21H2 Home, Pro - End of servicing'], ['Win11_21H2 Enterprise - End of servicing']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-EndofLife",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "2940c6b0-94a2-4953-a48e-6770defd2c98",
        "query_hash": "18df923b31f8f8c484a67a3a1b7f23677b2c785b96bb656bbf6e2cecdf83930d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-FreeStorage.kql",
        "query": "// Show the percentage of free storage on devices\nIntuneDevices\n| where OS == \"Windows\"\n| where StorageFree != \"0\" and StorageTotal != \"0\"\n| where DeviceName != \"User deleted for this device\" and DeviceName != \"\"\n| extend ['Free Storage'] = StorageFree\n| extend ['Total Storage'] = StorageTotal\n| extend Percentage = round(todouble(StorageFree) * 100 / todouble(StorageTotal), 2)\n| distinct DeviceName, ['Free Storage'], ['Total Storage'], Percentage, UPN\n| sort by Percentage asc \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-FreeStorage",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "831099bf-11af-4db5-9192-8b93a27e9097",
        "query_hash": "57cfb014e2f4576857867366f4e830a28e579a9778327a3832cbee1ba596a2f2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-iOSVersions.kql",
        "query": "// Number of iPhones and iPads on Version 14, 15, 16\nlet version_16 =\nIntuneDevices \n| where OS == \"iOS/iPadOS\"\n| where OSVersion contains  \"16\"\n| summarize ['iOS 16'] = count(DeviceName)\n| extend Dummy = \"Number of Devices\";\nlet version_15 =\nIntuneDevices \n| where OS == \"iOS/iPadOS\"\n| where OSVersion contains  \"15\"\n| summarize ['iOS 15'] = count(DeviceName)\n| extend Dummy = \"Number of Devices\";\nlet version_14 =\nIntuneDevices\n| where OS == \"iOS/iPadOS\"\n| where OSVersion contains  \"14\"\n| summarize ['iOS 14'] = count(DeviceName)\n| extend Dummy = \"Number of Devices\";\nversion_16\n| join kind=inner version_15 on Dummy \n| join kind=inner version_14 on Dummy \n| distinct Dummy, ['iOS 14'], ['iOS 15'], ['iOS 16']\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-iOSVersions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d96d1baf-a6d2-48db-a4cf-3ca954a99e76",
        "query_hash": "896cc51f5581fc3658f1305ed481ecd939c2860b76b4164e37eb4a889c45b259",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-JoinTypes.kql",
        "query": "// Show all devices and Join Types\nIntuneDevices\n| where OS == \"Windows\"\n| where isnotempty(JoinType)\n| distinct JoinType, DeviceName, DeviceRegistrationState\n\n// Show only Hybrid Azure AD Joined Devices:\nIntuneDevices\n| where OS == \"Windows\"\n| where isnotempty(JoinType)\n| where JoinType has \"Hybrid\" \n| distinct JoinType, DeviceName, DeviceRegistrationState\n\n// Show only Azure AD Joined Devices:\nIntuneDevices\n| where OS == \"Windows\"\n| where isnotempty(JoinType)\n| where JoinType == \"Azure AD joined\" \n| distinct JoinType, DeviceName, DeviceRegistrationState\n\n// Show only Azure AD registered Devices:\nIntuneDevices\n| where OS == \"Windows\"\n| where isnotempty(JoinType)\n| where JoinType == \"Azure AD registered\" \n| distinct JoinType, DeviceName, DeviceRegistrationState",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-JoinTypes",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "dd5de2d4-c67b-46be-be42-3976b5942304",
        "query_hash": "390714bc7d93e8eeb06210dcf7b72c3f1cb17ba2d4fb9687d85fe915a570fb3a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-LastTimeTheDeviceWasActive.kql",
        "query": "// Show a list of devices and timestamp the last time they successfully connected to Intune.\nIntuneDeviceComplianceOrg\n| where todatetime(LastContact) > ago(30d)\n| extend Date=format_datetime(todatetime(LastContact), \"dd.MM.yyyy\")\n| extend Time=format_datetime(todatetime(LastContact), \"hh:mm tt\")\n| extend ['Last successful connection']=strcat(Date,\" \",Time)\n| project DeviceName, ['Last successful connection']\n| project-rename ['Name of the Device'] = DeviceName",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-LastTimeTheDeviceWasActive",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b8950ae6-f82e-4ac7-8d15-9a7812f44400",
        "query_hash": "5f1a438bb4c007f14bc1b2df36e7cd1616adbff857dde89189aecb504c177211",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-ListofallDevicesthatwhereaddedtoIntunewithOSPlatforminformation.kql",
        "query": "// List of all Devices that where added to Intune with OS Platform information in a specific timeframe\nIntuneDevices\n| where CreatedDate contains \"2022-06\" # You can change the month and year if you want or delete the line completely\n| where Ownership == \"Corporate\"\n| project DeviceName, OS, OSVersion, UserName, CreatedDate\n| summarize count(DeviceName) by OS",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ListofallDevicesthatwhereaddedtoIntunewithOSPlatforminformation",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "a3615dc0-2ac2-46e0-a25f-126874586a4c",
        "query_hash": "8eaec70493b598c26fd69176419be1753de8766e1de9f2d816911d9b898000d3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-ListofDevicesThatAreNotBitlockerEncrypted.kql",
        "query": "// Show a list of devices whose the OS Drive is not bitlocker encrypted.\nIntuneDevices\n| where OS == \"Windows\"\n| where EncryptionStatusString == \"False\"\n| where Ownership == \"Corporate\"\n| where CompliantState == \"Noncompliant\"\n| project DeviceName, EncryptionStatusString, CompliantState",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ListofDevicesThatAreNotBitlockerEncrypted",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f3fa1981-b524-49ba-b5e9-186951dfe283",
        "query_hash": "8434190677b668cc437c6d8faa2b7612a07b2039173e2af8e05eb4a8b778daf7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-NumberOfDevicesAndManufacturers.kql",
        "query": "// List of device models and Manufacturers and number of devices for each model\nIntuneDevices\n| where OS == \"Windows\"\n| summarize count(DeviceName) by Model, Manufacturer\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-NumberOfDevicesAndManufacturers",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9cd60c5a-64e1-461d-87f0-c81f24c4f400",
        "query_hash": "11a857de12c5e35b3bf3f8561fc86638721ca3ec7a56287d0579f045337cb1b9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-NumberOfDevicesThatAreManagedByIntuneOrAreCoManaged.kql",
        "query": "// Number of devices that are managed by Intune or are Co-managed\nIntuneDevices\n| where OS == \"Windows\"\n| summarize count(DeviceName) by ManagedBy\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-NumberOfDevicesThatAreManagedByIntuneOrAreCoManaged",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "4fcc8655-ff94-40ca-b2af-0ef4760e0ee9",
        "query_hash": "98126fc08da022dc6a64ca7b5d03ed4939e30e19204035830b30b519be0fbb55",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-ShowallWindowsVersionsandNumberofDeviceswitheachVersion.kql",
        "query": "// Show all Windows Versions and Number of Devices with each Version\nIntuneDevices\n| where OS contains \"Windows\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where todatetime(LastContact) > ago(30d) \n| extend WindowsVersion = case(\n    OSVersion contains '19041', \"20H1\", \n    OSVersion contains '19042', \"20H2\",    \n    OSVersion contains '19043', \"21H1\", \n    OSVersion contains '19044', \"21H2\",\n    OSVersion contains '18363', \"1909\",\n    OSVersion contains '22000', \"Win11 21H2\",\n    OSVersion contains '22621', \"Win11 Insider (22H2)\",\n    \"Unknown\")\n| summarize ['Number of Devices']=count(DeviceName) by WindowsVersion\n| distinct WindowsVersion, ['Number of Devices'] \n| sort by ['Number of Devices'] desc\n//| where WindowsVersion != \"Unknown\" // Activate this line to show only Devices that have reported the Windows Version",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ShowallWindowsVersionsandNumberofDeviceswitheachVersion",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "971cc316-0e44-4158-8cc8-e02806b39f98",
        "query_hash": "4d3b9a6410d38bf02fe66ff345e3435407602ea1df2f37faa7f9a74bceaac405",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-ShowiOSDeviceswithJailbreak.kql",
        "query": "// Jailbroken devices in Intune\nIntuneDevices \n| where OS == \"iOS/iPadOS\"\n| where Ownership == \"Corporate\"\n| where JailBroken == \"True\"\n| project JailBroken, DeviceName, UPN",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-ShowiOSDeviceswithJailbreak",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "532a4721-3f2b-4345-b9f7-4098ad7432dc",
        "query_hash": "f3a9d19ca70805b2c5fbe2bdda7de6152539debb9b6cbd62fd428e912c2bc5c0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-SignIns.kql",
        "query": "// This query uses logs from Azure.\n// Show Device Logins for Azure joined devices. Result will show success, failure, login status, error codes as well as the location (Country, State, City) of the device.\nSigninLogs\n| where OperationName == \"Sign-in activity\"\n| where UserDisplayName != \"On-Premises Directory Synchronization Service Account\"\n| where isnotempty(Status)\n| extend Login_Status = tostring(todynamic(Status).errorCode) // Check the error code here: https://login.microsoftonline.com/error\n| extend Login_Status_Info = tostring(todynamic(Status).failureReason)\n| extend Device_Join_Status = tostring(todynamic(DeviceDetail).trustType)\n| extend location_country = tostring(todynamic(LocationDetails).countryOrRegion)\n| extend location_city = tostring(todynamic(LocationDetails).city)\n| extend location_state = tostring(todynamic(LocationDetails).state)\n| extend Location = strcat(location_country, \" \", \"/\", \" \", location_state, \" \", \"/\",\" \", location_city)\n| extend Authentication_Method = tostring(todynamic(AuthenticationDetails).[0].authenticationMethod)\n| extend Authentication_Detail = tostring(todynamic(AuthenticationDetails).[0].authenticationStepResultDetail)\n| extend Authentication_Success = tostring(todynamic(AuthenticationDetails).[0].succeeded)\n| where isnotempty(Device_Join_Status) \n| where AppDisplayName == \"Windows Sign In\"\n| project TimeGenerated, UserDisplayName, AppDisplayName, Login_Status, Login_Status_Info, Device_Join_Status, Location,  Authentication_Method, Authentication_Detail, Authentication_Success",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-SignIns",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "721536c8-da16-4794-a647-2739eed8ffec",
        "query_hash": "a3b0e968760b694e3e0aa4dbbb591510f1f1cf8a550beeca824ae3449f37341b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-UnsupportedAndroidVersions.kql",
        "query": "// Out-of-support Android Versions\nIntuneDevices \n| where OS has \"Android\"\n| extend Version = todecimal(OSVersion)\n| where Version < 10\n| where DeviceName != \"User deleted for this device\"\n| where Ownership == \"Corporate\"\n| project DeviceName, UserName , Version, Ownership",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-UnsupportedAndroidVersions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b00e785f-a20a-4bbd-a2e0-c921e82cdbbb",
        "query_hash": "ea5c867a85c8237512a7f3547947e702d2788c01fc98a554ebcad56e7c5da9fb",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-UnsupportediOSVersions.kql",
        "query": "// Out-of-support iOS Versions\nIntuneDevices \n| where OS has \"iOS\"\n| extend Version = todecimal(OSVersion)\n| where Version < 13\n| where DeviceName != \"User deleted for this device\"\n| where Ownership == \"Corporate\"\n| project DeviceName, Version, Ownership\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-UnsupportediOSVersions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "f7b015b5-747b-48cc-bd3e-18b77a6f4793",
        "query_hash": "2053af6956af4072af1c32989965e29456432714a8bf5f1c489aad27fde18783",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-VisualizeAndroidVersions.kql",
        "query": "// Visualize Android Versions and filtering for devices that had a connection to intune in the last 30 days.\nIntuneDevices\n| where OS contains \"Android\"\n| where todatetime(LastContact) > ago(30d) \n| summarize arg_max(TimeGenerated, *) by DeviceName\n| summarize Versionen=count() by OSVersion\n| sort by Versionen desc \n| render piechart with (title=\"Android Versions\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeAndroidVersions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "57b47b26-4fc5-4043-8551-c2e0a2d41cf9",
        "query_hash": "7fb60051c5d4a14728b9c6786a48f1bd61b1c220456ee36b244e00101fc4db4f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-VisualizeNumberofDeviceswithdifferentSKU.kql",
        "query": "// Visualize Number of Devices with different SKU (Pro and Enterprise Versions)\nIntuneDevices\n| where OS == \"Windows\"\n| where todatetime(LastContact) > ago(30d) // filter for devices that have contacted intune in the last 30 days\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| summarize Number=count() by SkuFamily\n| render piechart \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeNumberofDeviceswithdifferentSKU",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b874178d-e669-4c52-b8a1-49fe0c49e0cf",
        "query_hash": "b5e1912f020c8fd20b83420ef224d0a772408485328be48107c4c74e1ca2880a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-VisualizeTheJoinType.kql",
        "query": "// Visualize the join type (Azure AD joined, Azure AD registered or Hybrid joined) of your MEM/Intune devices per week\n// See here: https://github.com/reprise99/Sentinel-Queries/blob/main/Intune/IntuneDevices-VisualizeDeviceJoinTypebyWeek.kql\nIntuneDevices\n| where todatetime(LastContact) > ago (30d) // Filter only devices the have contacted Intune in the last 30 days\n| summarize arg_max(TimeGenerated, *) by DeviceName, startofweek(TimeGenerated)\n| where OS == \"Windows\"\n| summarize JoinSummary=count()by JoinType, startofweek(TimeGenerated)\n| where isnotempty(JoinType)\n| render columnchart\n    with (\n    kind=unstacked,\n    ytitle=\"Device Count\",\n    xtitle=\"Week\",\n    title=\"Device Number by join type per week\") \n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeTheJoinType",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "599837a8-93d4-4a43-bbbf-98bcd35284b3",
        "query_hash": "ca414d888cf687a868fd8c9014577e5bcaa9e3ecb18d32b2ff3fca3d6add7699",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-VisualizetheWindowsBuildNumbersandthenumberofDevices.kql",
        "query": "// Visualize the Windows Build Numbers and the number of Devices \nIntuneDevices\n| where OS == \"Windows\"\n| summarize arg_max(TimeGenerated, *) by DeviceName\n| where todatetime(LastContact) > ago(30d) // Include only Devices that had a connection with Intune in the last 30 days.\n| summarize Devices = count() by OSVersion\n| where OSVersion != \"0.0.0.0\" // Exclude devices that have not reported the Windows Build.\n| sort by Devices\n| render columnchart // Visualize the output.\n    with (\n    kind=unstacked,\n    ytitle=\"Device Count\",\n    xtitle=\"Windows Build\",\n    title=\"Number of Devices by Windows Build\") ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizetheWindowsBuildNumbersandthenumberofDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b69e4e8c-87c1-491d-956f-b52a38f6d169",
        "query_hash": "3b6d568e3c758a93d67efda9ba621817646877f2edf2d33407831aa65bffa7d3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-VisualizeWhenYourDevicesLastContactedIntune.kql",
        "query": "// Visualize when your devices last contacted Intune\n// See here: https://github.com/reprise99/Sentinel-Queries/blob/main/Intune/IntuneDevices-VisualizeLastContact.kql\nIntuneDevices\n| where TimeGenerated > ago(90d)\n| where isnotempty(LastContact)\n//Retrieve latest record for each DeviceId\n| summarize arg_max(TimeGenerated, *) by DeviceId\n//Convert string to datetime format\n| extend LastContactTime = todatetime(LastContact)\n| project DeviceId, LastContactTime\n//Exclude devices reporting as 0001-01-01\n| where LastContactTime <> todatetime('0001-01-01T00:00:00Z')\n//Group by month and render chart\n| summarize ['Device Count']=count()by startofmonth(LastContactTime)\n| render columnchart with (title=\"Intune devices by last contact time\", xtitle=\"Month\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeWhenYourDevicesLastContactedIntune",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "555212e1-7b98-4ee9-acf6-603e1d404ceb",
        "query_hash": "db1c4561dd4371c73f06f9d9e3be506798191e0d8d5a02cab1bd28b01894c6e5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5CDevice%5CDevice-VisualizeWindowsVersions.kql",
        "query": "// Visualize Windows Versions and filtering for devices that had a connection to intune in the last 30 days.\nIntuneDevices\n| where OS contains \"Windows\"\n| where todatetime(LastContact) > ago(30d) \n| summarize arg_max(TimeGenerated, *) by DeviceName\n| summarize Versionen=count() by OSVersion\n| sort by Versionen desc \n| render piechart with ( title=\"Windows Build Versions\")",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Device-VisualizeWindowsVersions",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8629c793-5691-4113-9ade-33a97d2a8093",
        "query_hash": "f1d5cfdcd9a3d5dc7a2776620dddbfe34d871e6ccfbc058eef7b594268cf90a9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-AutopilotDuration.kql",
        "query": "// Show how long the Autopilot process took in seconds and minutes. Result also shows DeviceName for further troubleshooting if needed.\nIntuneOperationalLogs\n| extend DeviceId = tostring(todynamic(Properties).DeviceId)\n| extend Time_Seconds = todynamic(Properties).TimeDiff\n| extend Autopilot = todynamic(Properties).IsAutopilot\n| extend Status = todynamic(Properties).Status\n| extend Time_Minutes = Time_Seconds/60\n| where Status == \"Completed\"\n| where isnotempty(Autopilot)\n| join kind=leftouter IntuneDevices on DeviceId \n| project ['Is Autopilot?'] = Autopilot, Status, DeviceName, Time_Minutes, Time_Seconds ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-AutopilotDuration",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "d5ec88c6-4739-44aa-8e6a-80647904f74f",
        "query_hash": "0a68b0067d60138fd37640b8b29ffc3a8000b1f5598aa7a85bed5f9d8e826f00",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-DidUserReachDesktop.kql",
        "query": "// Shows Devices where User did not reach Desktop even though Auopilot was successful. Result also shows DeviceName for further troubleshooting if needed.\nIntuneOperationalLogs\n| extend DeviceId = tostring(todynamic(Properties).DeviceId)\n| extend DidUserReachDesktop = todynamic(Properties).DidUserReachDesktop\n| extend Autopilot = todynamic(Properties).IsAutopilot\n| where isnotempty(DidUserReachDesktop)\n| join kind=leftouter IntuneDevices on DeviceId \n| summarize arg_max(TimeGenerated, *) by DeviceName\n| project DeviceName, Autopilot, DidUserReachDesktop\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-DidUserReachDesktop",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "959a0840-5161-46de-8cdd-0f21da73bc9f",
        "query_hash": "a1a86898a4843808a470839ef32d56c23a3105f5e27d5186f65f3b21cc7abbda",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-EnrollmentTypes.kql",
        "query": "IntuneOperationalLogs \n| where TimeGenerated > ago(30d) // look for devices that were active in the last 30 days\n| where OperationName == \"Enrollment\" // Filter for enrollments\n| extend Type = todynamic(Properties).EnrollmentType // Look into properties for the enrollment type\n| summarize count(OperationName) by tostring(Type)",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-EnrollmentTypes",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "7dcebad6-9392-4043-b8ba-649c20416302",
        "query_hash": "1aab099b7d76d4483e8dff639470fe5f216298ce3deaaba62a0d7e5244adca2a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-ESPEnrollmentsWithProfileName.kql",
        "query": "IntuneOperationalLogs \n| where TimeGenerated > ago(30d) \n| where OperationName == \"ESPEnrollment\" // Filter for devices with ESP Enrollment\n| extend Type = todynamic(Properties).EnrollmentTypeMessage\n| extend ESPPolicy = todynamic(Properties).ESPPolicyName // Show ESP Profile if present\n| where Type != \"\"\n| summarize count(OperationName) by tostring(Type), tostring(ESPPolicy)\n| project Type, ESPPolicy, count_OperationName\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-ESPEnrollmentsWithProfileName",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "fc20cac8-16c9-4a0c-980b-7a268df6f967",
        "query_hash": "547a2c3dbad62ea540bf875b582269f89acad40976dd90aaeda880245d1e4876",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-LatestDeviceEnrollments.kql",
        "query": "// Show a list of Devices, with Device Name, Result and OS that have been enrolled to Intune.\nIntuneOperationalLogs \n| where TimeGenerated > ago(7d) // Change the value in () as you desire e.g. 12h, 10d, 30d. d = day, h = hour.\n| extend DeviceId = tostring(todynamic(Properties).IntuneDeviceId)\n| extend OS = tostring(todynamic(Properties).Os)\n| where Result == \"Success\"\n| where OperationName has \"Enrollment\"\n//| where OS == \"Windows\" // You can filter by OS Platform e.g. iOS, Android, Windows. Just replace the vaule between the \" \" and delete the // infront of |.\n| join kind=leftouter IntuneDevices on DeviceId // DeviceName from IntuneDevices. Can be delayed.\n| project TimeGenerated, DeviceId, DeviceName, Result, OperationName, OS\n| summarize TimeGenerated = max(TimeGenerated) by DeviceId, DeviceName, Result, OperationName, OS\n| sort by TimeGenerated desc",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-LatestDeviceEnrollments",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "070f0d64-bd92-4226-81d3-f2ec845a971e",
        "query_hash": "a547c6e8d4e120f7ef4d2b1967f8bf40979e79024646059590e2f6ab34a1d223",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-NumberOfSuccessfulEnrollmentsbyOS.kql",
        "query": "// Number of Successful Enrollments by OS\n// See here: https://github.com/rod-trent/SentinelKQL/blob/master/IntuneCountofSuccessfulEnrollmentsbyOS.txt\nIntuneOperationalLogs \n| where OperationName == \"Enrollment\" and Result == \"Success\"\n| extend OS = tostring(todynamic(Properties).Os\n| summarize count() by OS\n\n// Failed enrollments\nIntuneOperationalLogs \n| where OperationName == \"Enrollment\" and Result == \"Failed\"\n| extend OS = tostring(todynamic(Properties).Os\n| summarize count() by OS\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-NumberOfSuccessfulEnrollmentsbyOS",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "b5837295-3630-4fdd-9d6e-c8ea85d89147",
        "query_hash": "768088507761fc695a6fecb94544feddaeb6306e1b774e4d27784346a2aa3a29",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-OSBuildDuringAutopilot.kql",
        "query": "// Show the OS Build of Windows during Autopilot. Result also shows DeviceName for analyzing any future update or upgrade events.\nIntuneOperationalLogs\n| extend DeviceId = tostring(todynamic(Properties).DeviceId)\n| extend Version = todynamic(Properties).Version\n| where isnotempty(Version)\n| join kind=leftouter IntuneDevices on DeviceId \n| summarize arg_max(TimeGenerated, *) by DeviceName\n| project DeviceName, ['OS Build during Autopilot'] = Version\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-OSBuildDuringAutopilot",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "52c14963-1a01-4a3c-83cb-220fc1d6a34b",
        "query_hash": "9af50d7dafb1fe6609e874718caee890cde1cf38604b33b5805602e2bccaf299",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-ShowIntuneEnrollmentNotSupportedDevices.kql",
        "query": "//Intune Enrollment Failure Reasons - Devices not supported by time, failure type, and operating system\nIntuneOperationalLogs\n| extend FailureCategory_ = todynamic(Properties).FailureCategory\n| where FailureCategory_ == \"DeviceNotSupported\"\n| extend OS = todynamic(Properties).Os\n| extend Reason = todynamic(Properties).FailureReason\n| extend Type = todynamic(Properties).EnrollmentType\n| extend DeviceId = tostring(todynamic(Properties).AADDeviceId)\n| project FailureCategory_ , Reason, Type, OS, DeviceId\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-ShowIntuneEnrollmentNotSupportedDevices",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "8b9f7567-eb2a-4be3-bf60-cdbd2d382aed",
        "query_hash": "227f447db8cd47fb0c94773bc7ff03b26397622fad48a797baee04d9346b5ebe",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-ShowUsersThatAbandonedTheIntuneEnrollment.kql",
        "query": "// Show Users that abandoned the Intune Enrollment\n// Inspiration: https://github.com/rod-trent/SentinelKQL/blob/master/Intune-Enrollmentsabandonedbytheuser.txt\nIntuneOperationalLogs\n| where TimeGenerated > ago(7d) // Change the value in () as you desire e.g. 12h, 10d, 30d. d = day, h = hour.\n| where OperationName == \"Enrollment\" \n| where Result == \"Fail\"\n| extend EnrollmentType = tostring(todynamic(Properties).EnrollmentType)\n| extend FailureReason = tostring(todynamic(Properties).FailureReason)\n| extend OS = tostring(todynamic(Properties).Os)\n| extend OSVersion = tostring(todynamic(Properties).OsVersion)\n| extend UserID = tostring(todynamic(Properties).IntuneUserId) // You will find the User in your Azure AD.\n| where FailureReason == \"UserAbandonment\"\n| project\n    TimeGenerated,\n    FailureReason,\n    UserID,\n    OS,\n    OSVersion,\n    OperationName,\n    EnrollmentType\n| sort by TimeGenerated desc ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-ShowUsersThatAbandonedTheIntuneEnrollment",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "80df6b05-2cfd-4d7c-876f-56681ccd138f",
        "query_hash": "29daab5a761d95b55c8ed899de162b7fd043279cc79199ce64ddb6fedb38a8f4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-VisualizeEnrollmentStatistics.kql",
        "query": "// Visualize Enrollment Statistics (Success and Fail) over time\nIntuneOperationalLogs\n| where  OperationName == \"Enrollment\"\n| where TimeGenerated > ago(365d)\n| extend DeviceId = tostring(todynamic(Properties).IntuneDeviceId)\n| join kind=leftouter IntuneDevices on DeviceId \n| summarize arg_max(DeviceId, *) by DeviceId, startofweek(TimeGenerated)\n//| where Result == \"Success\" // Filter for success or Fail\n| summarize EnrollmentCount=count()by Result, startofweek(TimeGenerated)\n| render timechart  \n    with (\n    ytitle=\"Device Count\",\n    xtitle=\"Week\",\n    title=\"Enrollments per week over time\")\n",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-VisualizeEnrollmentStatistics",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "9a6580e8-885a-40ff-a5f4-c0d66a231951",
        "query_hash": "d03531e8ae48045ec0f6f9af7cf16ea01837c963a4f5b0f6e9d51ba679ddd90e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/ugurkocde/KQL_Intune/tree/main%5COperational%5COperational-VisualizefailedDeviceDeployments.kql",
        "query": "// Visualize failed Device Deployments\nIntuneOperationalLogs \n| extend OS = tostring(todynamic(Properties).Os)\n| where OS == \"Windows\"\n| extend DeviceId = tostring(todynamic(Properties).AADDeviceId)\n| where Result == \"Fail\"\n| join kind=leftouter IntuneDevices on DeviceId\n| project TimeGenerated, DeviceId, DeviceName\n| summarize TimeGenerated = max(TimeGenerated) by DeviceId, DeviceName\n| summarize [\"Number of devices that failed deployment\"] = count() by DeviceId, DeviceName, TimeGenerated\n| render timechart \n   with (\n    kind=unstacked,\n    ytitle=\"Device Count\",\n    xtitle=\"Date\",\n    title=\"Number of devices that failed deployment\") ",
        "source_type": "text",
        "source_index": 0,
        "query_name": "Operational-VisualizefailedDeviceDeployments",
        "context": null,
        "attributes": {},
        "kql_properties": {},
        "query_id": "5da185a4-42fb-425a-b851-17e7fc83e0c6",
        "query_hash": "66ae9d159fce3202e34525accbc1d8b53f8a2fe1a8de41b6c8857e371aae9983",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| where AppDisplayName == \"Microsoft Teams\"\n| project TimeGenerated, Location, IPAddress, UserAgent",
        "source_type": "markdown",
        "source_index": 0,
        "query_name": "## The Anatomy of a KQL Query",
        "context": "Kusto Query Language is the language used across Azure Monitor, Azure Data Explorer and Azure Log Analytics (what Microsoft Sentinel uses under the hood). I have always found this visualization regarding KQL useful -\n\n![KQL visualized](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/kql-pipe.png?raw=true)\n\nWe want to use KQL to create accurate and efficient queries to find threats, detections, patterns and anomalies from within our larger data set.\n\n## The Anatomy of a KQL Query\n\nTake the below query as an example\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "df0c07ed-0d3f-4d29-9bf1-a29de0717eff",
        "query_hash": "03042293b70460a4b92d6271ee15a0aa3e4538763f34521086663859664fec09",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs",
        "source_type": "markdown",
        "source_index": 1,
        "query_name": "README_1",
        "context": "\nWhen we run a query like this the first line tells Microsoft Sentinel which table to look for data in, so in this case we want to search the SigninLogs table, which is where Azure AD sign in data is sent to. You can see a list of tables [here](https://docs.microsoft.com/en-us/azure/sentinel/data-source-schema-reference).\n\nMicrosoft Sentinel will then run through your query sequentially, so it will run each line one by one until it hits the end, or you have an error. So to breakdown our query line by line.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "e0e9ecec-6f68-49ff-9a74-e357c9220c6e",
        "query_hash": "e81c5dfec5afebbfa8e5ceca03b30d4800fa4e0dfea2d00a3614ce5c26558aa0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)",
        "source_type": "markdown",
        "source_index": 2,
        "query_name": "README_2",
        "context": "\nSo first we have chosen our SigninLogs table.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "67e1f417-1e3b-456d-8ed6-b839c3d17737",
        "query_hash": "b977dc29c35238f7ffcba5ba7e92ac3dbd3f91c2d3d727c69203ea187f3404bc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"",
        "source_type": "markdown",
        "source_index": 3,
        "query_name": "README_3",
        "context": "\nNext we tell Sentinel to look back at the last 14 days worth of data in this table.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "d72ae4b3-8005-4b1e-bf7b-64c9f731bccf",
        "query_hash": "9060f4ca3777f19ee9ffd2e098e2b570d1f78fb8a7b5202c371df682b2477f82",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"",
        "source_type": "markdown",
        "source_index": 4,
        "query_name": "README_4",
        "context": "\nNext we ask Sentinel to only find logs where UserPrincipalName is equal to \"reprise_99@testdomain.com\"\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "bb8f141c-c94c-4a56-8c8c-4859ffe35020",
        "query_hash": "ec0d13554d2f88cf3be48f59ae7390d1bdb4c5db5d7d28804fecd9af181e7db9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| where AppDisplayName == \"Microsoft Teams\"",
        "source_type": "markdown",
        "source_index": 5,
        "query_name": "README_5",
        "context": "\nThen we look for only logs where the ResultType == 0, which is a successful logon to Azure AD.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "43632317-863f-49fb-8200-e29e2f4cf848",
        "query_hash": "e501589dc887321ad9dc5db1d7675a3a888604d543c34ebf1683b0847f7c26fc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| where AppDisplayName == \"Microsoft Teams\"\n| project TimeGenerated, Location, IPAddress, UserAgent",
        "source_type": "markdown",
        "source_index": 6,
        "query_name": "README_6",
        "context": "\nNext we look for only signins to Microsoft Teams.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "471a9be5-6cb4-41e0-992a-6429184ae321",
        "query_hash": "03042293b70460a4b92d6271ee15a0aa3e4538763f34521086663859664fec09",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"",
        "source_type": "markdown",
        "source_index": 7,
        "query_name": "### Time Basics",
        "context": "Our last line uses the project operator, to return only 4 fields from our logs, so we will only see the TimeGenerated, Location, IPAddress and UserAgent returned from our SigninLogs data.\n\nThat is how you build queries, now the basics.\n\n## The Basics\n\n### Time Basics\n\nMicrosoft Sentinel and KQL are highly optimized for time filters, so if you know the time period of data you want to search, you should filter the time range straight away. Retrieving the last 14 days of logs, then searching for a username like the below query -\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "6461fa25-4138-4dc4-b98f-901053959db0",
        "query_hash": "9060f4ca3777f19ee9ffd2e098e2b570d1f78fb8a7b5202c371df682b2477f82",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where TimeGenerated > ago(14d)",
        "source_type": "markdown",
        "source_index": 8,
        "query_name": "README_8",
        "context": "\nIs much more efficient than searching first for a username and then searching for the time period like this -\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "5f6059b5-fbab-4e09-a4f7-6e97406de51f",
        "query_hash": "7b4f968d31680aa7275606a534a521267df25f9d57287991152e1aee2f62e451",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)",
        "source_type": "markdown",
        "source_index": 9,
        "query_name": "README_9",
        "context": "\nKQL has many options for querying particular time periods.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "3900b6c6-a7e7-497e-8eb2-44f8c44e2ef3",
        "query_hash": "b977dc29c35238f7ffcba5ba7e92ac3dbd3f91c2d3d727c69203ea187f3404bc",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14h)",
        "source_type": "markdown",
        "source_index": 10,
        "query_name": "README_10",
        "context": "\nAs per the first example, this will search for the last 14 days.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "10cfd344-6215-42c3-8a28-52ab6719237e",
        "query_hash": "eb624fdc412bbb4d4ac5a8b2479a578e64191ae6c8d17e06a7383fc2fb0eac3c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14m)",
        "source_type": "markdown",
        "source_index": 11,
        "query_name": "README_11",
        "context": "\nYou can also do hours.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "8f2ba2cf-0037-41b1-b1fe-9799d8f52288",
        "query_hash": "6b534ea9169654517ff960526cd28993311f1c485fc3c1e95597849701b8434f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated between (ago(14d) .. ago(7d))",
        "source_type": "markdown",
        "source_index": 12,
        "query_name": "README_12",
        "context": "\nAnd minutes.\n\nKQL also supports querying between time ranges -\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "b3b5467e-f3e2-49a6-99ad-539548c0bb91",
        "query_hash": "c0b493c0df4ca2c450ef42fbef11e0cbe205a86b2992d789a59b193846be3df0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated between (ago(14h) .. ago(7h))",
        "source_type": "markdown",
        "source_index": 13,
        "query_name": "README_13",
        "context": "\nThis will find SigninLogs data between 14 days and 7 days ago.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "d1af8030-30ac-407d-972e-660b818fc3bb",
        "query_hash": "fcecd6b3357cea671468601e2f2b451a6cc32893e4aadc6973bbfd39a6d831bd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated between (ago(14m) .. ago(7m))",
        "source_type": "markdown",
        "source_index": 14,
        "query_name": "README_14",
        "context": "\nBetween 14 hours and 7 hours ago.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "2c725f17-2aa8-43b4-8129-3d5dbcfdd5d0",
        "query_hash": "1c4dbb8b492ee918b72a63739761abf1124c2d24f79fd26c74117a267b461549",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"",
        "source_type": "markdown",
        "source_index": 15,
        "query_name": "### Where Basics",
        "context": "\nAnd between 14 minutes and 7 minutes ago.\n\n### Where Basics\n\nWhere is an operator you will use in basically every query you write. This is how you tell Microsoft Sentinel to hunt for specific data. Syntax is very important with the where operator. If we use our same example.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "1dd5260b-e736-4610-bec4-216dad3a9bb0",
        "query_hash": "9060f4ca3777f19ee9ffd2e098e2b570d1f78fb8a7b5202c371df682b2477f82",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName =~ \"reprise_99@TESTdomain.com\"",
        "source_type": "markdown",
        "source_index": 16,
        "query_name": "README_16",
        "context": "\nThis will search our SigninLogs table, over the last 14 days, for exact matches where our UserPrincipalName equals reprise_99@testdomain.com. In KQL == is case sensitive, so if you search for reprise_99@TESTdomain.com and the username is actually reprise_99@testdomain.com, you won't get any results. The non case sensitive equivalent is =~\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "39c65fb2-6cd0-47da-b25f-bd0c6555b31a",
        "query_hash": "42a63887833e0c40640b57faf2d07866b87193c42d28186fd8fe8518b6dde709",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName contains \"reprise_99\"",
        "source_type": "markdown",
        "source_index": 17,
        "query_name": "README_17",
        "context": "\nThis will find any matches for reprise_99@testdomain.com regardless of case sensitivity.\n\nInstead of equals, we can also use contains.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "48d92bf0-13ff-48c7-ac25-23d78d4a4a25",
        "query_hash": "68fe1d14de6db3064c81e0140bcac2e5d1c96bf89a15138d262d75a3a6ed1a46",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName startswith \"reprise_99\"\n\nSigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName endswith \"testdomain.com\"",
        "source_type": "markdown",
        "source_index": 18,
        "query_name": "README_18",
        "context": "\nThis will find any log entries where the UserPrincipalName contains reprise_99, if you had reprise_99@testdomain.com and reprise_99@anotherdomain.com data, it would find both. The contains operator is not case sensitive, but you can use contains_cs to make it case sensitive.\n\nYou can use either startswith or endswith if you are searching for particular patterns.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "9d742014-677a-4c82-965c-abdda92b7cde",
        "query_hash": "68f89d25ff473a758170b3753aeb4f277d90c730e9a079417d3b2b6212b74656",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where AppDisplayName has \"Teams\"",
        "source_type": "markdown",
        "source_index": 19,
        "query_name": "README_19",
        "context": "\nBoth startswith and endswith are not case sensitive, but you can use the startswith_cs or endswith_cs to make them case sensitive.\n\nIf you are searching for full words (greater than four characters), in KQL you can use the has operator. Using 'has' is more efficient than 'contains' as the data is indexed for you.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "3b8451dd-8727-4235-a7ff-78455a41cd8f",
        "query_hash": "6825033e03f19a8a49b6ff1b31b61a78fee4bcbc6c3db40c18d60a603498b4b3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where AppDisplayName has_any (\"Teams\",\"Outlook\")",
        "source_type": "markdown",
        "source_index": 20,
        "query_name": "README_20",
        "context": "\nThis will find any SigninLogs where the application display name has the word Teams in it, that could include \"Microsoft Teams\" and \"Microsoft Teams Web Client\", both satisfy the query.\n\nIf you are searching for multiple words you can use has_any or has_all.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "1f54375f-356a-4234-a963-ed6cbe69377e",
        "query_hash": "dd867a930fadf601ad84d3377ec0be77dc695920cb5ddafd75f078a978921793",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where AppDisplayName has_all (\"Teams\",\"Outlook\")",
        "source_type": "markdown",
        "source_index": 21,
        "query_name": "README_21",
        "context": "\nThis will return results where the application display name contains either \"Teams\" or \"Outlook\"\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "c614a22c-9ce5-4f6d-8950-12e30fb0b98e",
        "query_hash": "a3653efcfb60d86fee5d97eac2c7e1ec9dca8530783a9f9d498a52073ee2351b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where * contains \"reprise_99\"",
        "source_type": "markdown",
        "source_index": 22,
        "query_name": "README_22",
        "context": "\nThis will return results where the application display name has \"Teams\" and \"Outlook\".\n\nIf you don't know which fields to search in, you can also use wildcards, it is inefficient but may get you on the right track to find what you want.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "143ea1bf-dc0d-4b32-84ea-a52582d39dd8",
        "query_hash": "9fd5652de58d8099de62791b730ab081f7efed526ac4c45209081e69b57050a1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName != \"reprise_99@testdomain.com\"",
        "source_type": "markdown",
        "source_index": 23,
        "query_name": "README_23",
        "context": "\nThis will search the SigninLogs table for any field that contains reprise_99.\n\nA number of these options also support using ! to reverse the query and find results where it is not true.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "7e40af4c-5c54-43e6-bfa0-2f4627fbeb89",
        "query_hash": "a8787b28c8f0d89142120d3a9bc112755ba132e45265357ab7173df696bbdcf1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName !contains \"reprise_99\"",
        "source_type": "markdown",
        "source_index": 24,
        "query_name": "README_24",
        "context": "\nThis query would find all SigninLogs where the UserPrincipalName does not equal reprise_99@testdomain.com\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "7c4f692e-86c8-40c2-af36-b119991120d4",
        "query_hash": "8aafcbabff8718afc85ebe80e8012f64931061dac92445eb7b842d76ef60fba6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where AppDisplayName !has \"Teams\"",
        "source_type": "markdown",
        "source_index": 25,
        "query_name": "README_25",
        "context": "\nThis query would find all SigninLogs where the UserPrincipalName does not contain reprise_99\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "5b0bf04e-c59d-4f46-9d96-0da79ad4aa47",
        "query_hash": "f80a3fc684b2fb4c8dbd50b5b5e9dfd705acab1ec6d97a3e1feb06f88f9985a9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| where AppDisplayName == \"Microsoft Teams\"\n| project TimeGenerated, Location, IPAddress, UserAgent",
        "source_type": "markdown",
        "source_index": 26,
        "query_name": "### Project Basics",
        "context": "\nThis query would find SigninLogs where the application display name does not contain \"Teams\".\n\n### Project Basics\n\nProject allows us to select which columns are returned in our query and in which order.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "7e064050-3bd8-4811-8692-cb236f2e3230",
        "query_hash": "03042293b70460a4b92d6271ee15a0aa3e4538763f34521086663859664fec09",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "| project LogTime=TimeGenerated, SigninLocation=Location, IP=IPAddress, Agent=UserAgent",
        "source_type": "markdown",
        "source_index": 27,
        "query_name": "README_27",
        "context": "\nThis query searches for SigninLogs data from the last 14 days, where the UserPrincipalname equals reprise_99@testdomain.com, where the ResultType is 0, where the application display name equals \"Microsoft Teams\", then for each match on that query it returns the TimeGenerated, Location, IPAddress and the UserAgent.\n\nWe can rename colums as part of the same function.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "593e7e45-cff3-40ad-8307-ec551d06869e",
        "query_hash": "ebc65a7f514efc28809671ef5251e200a965ea0af49e9b5ca1a16daccc0879a1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "| project LocalTime=TimeGenerated+5h, Location, IPAddress, UserAgent",
        "source_type": "markdown",
        "source_index": 28,
        "query_name": "README_28",
        "context": "\nThis returns the same data, but renames the columns to LogTime, SigninLocation, IP and Agent.\n\nWe can even manipulate the output inline with the project operator.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "e1c384da-040c-4cff-864d-800c97a893c1",
        "query_hash": "1b4a350f51b6979abd20e43636e3496655c6b70eb4d6b5bc5e315b626ca02571",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| project-away UserAgent\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| where AppDisplayName == \"Microsoft Teams\"",
        "source_type": "markdown",
        "source_index": 29,
        "query_name": "README_29",
        "context": "\nThis returns the same data, but changes the TimeGenerated name to LocalTime and converts to a +5h time zone if you work in that time zone.\n\nproject-away is the opposite of project and will remove columns from your query.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "c8d69e65-6e67-4d03-a0b3-f8a5633348bc",
        "query_hash": "8e339203465b7bf5d376e1efcce19dc5642c2d84be01dc991680a1a6b4ab20b9",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize count() by AppDisplayName",
        "source_type": "markdown",
        "source_index": 30,
        "query_name": "### Summarize Basics",
        "context": "\nIn this query we remove UserAgent. Remember, if you remove a column you then can't access it later in your query.\n\n### Summarize Basics\n\nSummarize produces a table that aggregates the content of your query. Summarize has a number of underlying aggregation functions. If we again take our example query, we can manipulate the results in various ways using summarize.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "13b6c9d5-b8f3-47e3-a1a6-2c0a33111cbd",
        "query_hash": "992ef9fc66895e6cd0523e940aff0be4406c056e3445e265bc0478a549586ef2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppCount=count() by AppDisplayName",
        "source_type": "markdown",
        "source_index": 31,
        "query_name": "README_31",
        "context": "\nThis query will look up the SigninLogs table for any events in the last 14 days, for any matches for reprise_99@testdomain.com, where the result is a success (ResultType == 0) and then summarize those events by the application display name.\n\nYou can optionally name the result column.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "87c1c796-9dd9-4dfd-8542-c35cd1942545",
        "query_hash": "9a764e5ba315b678fa013371b6034a13c2c3c3be51e5d32d43c992f24d005ec3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize DistinctAppCount=dcount(AppDisplayName) by AppDisplayName",
        "source_type": "markdown",
        "source_index": 32,
        "query_name": "README_32",
        "context": "\nThis returns the same data but updates the name of the returned column to AppCount.\n\nInstead of a total count, you can summarize a distinct count.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "65954b72-445d-45d2-b5e3-2c50ba9e603d",
        "query_hash": "d5a1f4e371c1b5253f365d252c7fbd7d0525c2c131c0e1890167fda3e20ff182",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize arg_max(TimeGenerated, *) by UserPrincipalName",
        "source_type": "markdown",
        "source_index": 33,
        "query_name": "README_33",
        "context": "\nThis will return a single record for each distinct application reprise_99@testdomain.com signed into.\n\nYou can use the arg_max and arg_min functions to return either the newest or oldest record that matches your query.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "886ae3e8-07d1-4f3a-8e44-6210bcc9d2ba",
        "query_hash": "8658561c32a9ba1f24a0e4412492d6e97d2720e96967fc2ed1874cd2aef88d79",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize arg_min(TimeGenerated, *) by UserPrincipalName",
        "source_type": "markdown",
        "source_index": 34,
        "query_name": "README_34",
        "context": "\nThis query looks for all signin logs over the last 14 days, that have reprise_99@testdomain.com as the UserPrincipalname, that are successful and then returns the latest record.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "fb3ccfda-3a84-4070-b9f6-afd3fb10a932",
        "query_hash": "97e9a6aac2ba286e5a911fb19c20d02f7097ad5df560ac21761feec3299bc03e",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize TeamsLogons=countif(AppDisplayName has \"Teams\"), SharePointLogons=countif(AppDisplayName has \"SharePoint\")",
        "source_type": "markdown",
        "source_index": 35,
        "query_name": "README_35",
        "context": "\nThis is the same but returns the oldest record.\n\nYou can use countif to provide logic to your summations.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "358405e6-ef3e-4c52-a7d4-07028eb9b590",
        "query_hash": "1e2be6a4370edf2ba2295c5dd33f5198c6e1a40a40bcb8003d9bf8eb0f4173ed",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppCount=count() by AppDisplayName, bin(TimeGenerated, 1d)",
        "source_type": "markdown",
        "source_index": 36,
        "query_name": "README_36",
        "context": "\nThis summarizes the data into two new columns, TeamsLogons where the application display name has \"Teams\" and SharePointLogons where the application display name has \"SharePoint\"\n\nYou can further manipulate your data by telling KQL to place your data into time 'bins'.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "be36a21a-3bff-4e08-aff6-c3e7b37cef8e",
        "query_hash": "48e64ef0c2a9b460efffa038394cf2129f4a296cb2df190b8c2da3f4a736c9ae",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize TeamsLogons=countif(AppDisplayName has \"Teams\"), SharePointLogons=countif(AppDisplayName has \"SharePoint\") by bin(TimeGenerated, 1d)",
        "source_type": "markdown",
        "source_index": 37,
        "query_name": "README_37",
        "context": "\nThis returns the same data as our first summarize example and then groups that data into 1d bins.\n\nYou can combine these functions together where useful\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "1aa35054-eb25-43c8-9fdf-c79f3a5174b4",
        "query_hash": "89fc56ce7e3fd9235902f63a51301d3138b5ba24adec8e62c180e2d496dd8f0a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppList=make_set(AppDisplayName) by UserPrincipalName",
        "source_type": "markdown",
        "source_index": 38,
        "query_name": "README_38",
        "context": "\nThis is a combination of our countif and bin functions, where we summarize based on our application display name and also place the results into 1d bins.\n\nYou can make a set of items within a query.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "e531bec8-6ed9-4370-b51b-3929f14dfd46",
        "query_hash": "94cae42d390575d75cfd21ae4a85f89a0d48326666f255afbc155f6549d039b4",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppList=make_set(AppDisplayName) by UserPrincipalName, bin(TimeGenerated, 1d)",
        "source_type": "markdown",
        "source_index": 39,
        "query_name": "README_39",
        "context": "\nThis will output a list of applications that reprise_99@testdomain.com has signed into to a list called AppList.\n\nYou can combine this with our time bin.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "7b318b3d-acff-46c8-bf64-536d8eca0a14",
        "query_hash": "e034de14c9e81813b6d13481f575176b83477603f564a7cd98a025444311fcc2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppCount=count()by AppDisplayName\n| render piechart",
        "source_type": "markdown",
        "source_index": 40,
        "query_name": "### Render Basics",
        "context": "\nThis will make a list of applications that reprise_99@testdomain.com has signed into separated into one list per day.\n\n### Render Basics\n\nThe render operator allows KQL to visualize data into different formats such as piecharts, time or areacharts and column and bar charts.\n\nIf we use our same example from our Signinlogs table, we can see how we can visualize the data in various ways.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "cdf8d9be-a58d-4778-8457-4366b941dc72",
        "query_hash": "1e844ae2d905923b553b83ff186f4802f887dc96674d4ac192ebdeb3d44df2b2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppCount=count()by AppDisplayName\n| render columnchart",
        "source_type": "markdown",
        "source_index": 41,
        "query_name": "README_41",
        "context": "\nThis query summarizes all the applications reprise_99@testdomain.com has signed into in the last 14 days, then renders the output as a piechart.\n\n![KQL Piechart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-piechart.png?raw=true)\n\nYou can also render as a column chart.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "a7e6084f-c7e9-4b3a-bcd9-63c52457b11f",
        "query_hash": "73e07466acbe97eabe4e5bffdae117c9b9c6c56b3e9a01da7a1a460e84e865fa",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize AppCount=count()by AppDisplayName\n| render barchart",
        "source_type": "markdown",
        "source_index": 42,
        "query_name": "README_42",
        "context": "\n![KQL Column Chart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-columnchart.png?raw=true)\n\nOr a barchart.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "6a6eea57-317d-49af-adeb-47e0641a5d55",
        "query_hash": "f73ce89487072c06c56b423427090903fc8482aa981c57c217bbd6905b21fe5c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by bin(TimeGenerated, 1d)\n| render timechart",
        "source_type": "markdown",
        "source_index": 43,
        "query_name": "README_43",
        "context": "\n![KQL Bar Chart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-barchart.png?raw=true)\n\nFor time data, you first summarize your data into time 'bins' as outlined in the summarize section, and you can then visualize your data over a time period.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "26d9f87a-dc70-41c9-b181-6b8f7347bc77",
        "query_hash": "ab804ee6965a2ca49940e29c99e21d5ccd66eeaca65930a5f81ce7e7c1a37b2c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by bin(TimeGenerated, 1d)\n| render areachart",
        "source_type": "markdown",
        "source_index": 44,
        "query_name": "README_44",
        "context": "\nThis visualizes all signins by reprise_99@testdomain.com per day over the last 14 days and displays it as a timechart.\n\n![KQL Timechart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timechart.png?raw=true)\n\nYou can also use render as an areachart.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "f61e6e56-882c-4d5b-9698-d55098d3bc28",
        "query_hash": "58f7ae8c1324d2e096be57c976fcea7bd7e5da101e7fbc3f310c0b837c6fc08a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by bin(TimeGenerated, 1d)\n| render columnchart",
        "source_type": "markdown",
        "source_index": 45,
        "query_name": "README_45",
        "context": "\n![KQL Areachart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-areachart.png?raw=true)\n\nColumn charts and bar charts can also be used with time data. You will get a column or bar per time 'bin' over your larger time period.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "a2dd192e-3462-4ca2-bba4-355c7506c626",
        "query_hash": "e6e723b90fbf045569731d97eca58b3a658248f7ad2478a9ab592e0d0896aed0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by bin(TimeGenerated, 1d)\n| render barchart",
        "source_type": "markdown",
        "source_index": 46,
        "query_name": "README_46",
        "context": "\nThis is the same query as our timechart, but rendered as a column chart with a column per day.\n\n![KQL Time Column Chart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timecolumnchart.png?raw=true)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "dff340ad-1ed2-4cc0-ae19-ed9e8df2f29c",
        "query_hash": "1afb52905194cb85f3d4d086436bb87194ca5c4c2eaddaff1a97fdb1e7bf3595",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by AppDisplayName, bin(TimeGenerated, 1d)\n| render columnchart",
        "source_type": "markdown",
        "source_index": 47,
        "query_name": "README_47",
        "context": "\nAnd a bar chart.\n\n![KQL Time Bar Chart](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timebarchart.png?raw=true)\n\nWith column or bar charts you can have them stacked together (which is the default).\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "5971e13a-050f-4a0f-90b4-c0c6f552000a",
        "query_hash": "ac19b1542d61239527f1fc5abd1faf0f9b4936bedc8692489b56d805a4c06565",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by bin(TimeGenerated, 1d)\n| render columnchart with (kind=unstacked)",
        "source_type": "markdown",
        "source_index": 48,
        "query_name": "README_48",
        "context": "\nThis query finds all the signins for our account, counts the signins per application, then creates a single column for each day.\n\n![KQL Time Column Chart Stacked](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timecolumnchartstacked.png?raw=true)\n\nIf you want each application to have its own column you can set it to be unstacked.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "557a4763-2d58-4373-b736-b93715bab374",
        "query_hash": "59fc5b3ef8e97a863833d0f4ac7a80d53af00344492289df282bcc58955d5920",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where UserPrincipalName == \"reprise_99@testdomain.com\"\n| where ResultType == \"0\"\n| summarize SigninCount=count() by AppDisplayName, bin(TimeGenerated, 1d)\n| render columnchart with (kind=unstacked, ytitle=\"Total Sign Ins\", xtitle=\"Day\", title=\"Application Signins Per Day\")",
        "source_type": "markdown",
        "source_index": 49,
        "query_name": "README_49",
        "context": "\n![KQL Time Column Chart Unstacked](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timecolumnchartunstacked.png?raw=true)\n\nYou can also rename the axis and title of your chart in line with KQL.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "9cfeaccc-c205-43bd-85ae-3b28c3e995be",
        "query_hash": "7864a186e9e12e21cc4756fb6d3f156af04a0bb8cb5b56ef2ef3da848f688693",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "SigninLogs\n| where TimeGenerated > ago(14d)\n| where ResultType == \"0\"\n| summarize TeamsCount=countif(AppDisplayName has \"Teams\"), OneDrive=countif(AppDisplayName has \"OneDrive\"), SharePointCount=countif(AppDisplayName has \"SharePoint\") by bin(TimeGenerated, 1d)\n| render columnchart with (kind=unstacked, ytitle=\"Sign In Count\", xtitle=\"Day\", title=\"Teams vs OneDrive vs SharePoint Sign Ins Per Day\")",
        "source_type": "markdown",
        "source_index": 50,
        "query_name": "README_50",
        "context": "\n![KQL Time Column Chart Unstacked Renamed](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timecolumnchartnames.png?raw=true)\n\nYou can combine logic in your summarize actions to build dynamic content for your render operator.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "9ea53935-05a3-467c-8489-129a943aa509",
        "query_hash": "9983ef72bc313b3c5a3a8d6117c2beb5edbb004d0a07b0fd8511f119a3921a10",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account'\n];",
        "source_type": "markdown",
        "source_index": 51,
        "query_name": "### Parse and Split Basics",
        "context": "This query searches all signins to your tenant, then counts three groups - one where the application display name has \"Teams\", one where the application display name has \"OneDrive\" and one where the application display name has \"SharePoint\" for each day over the last 14 days, then renders as an unstacked column chart.\n\n![KQL Time Column Chart Outlook, OneDrive, SharePoint](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/render-timecolumn-outlookonedrivesharepoint.png?raw=true)\n\n### Parse and Split Basics\n\nParse and split are two different ways to extend a string of data to multiple columns based on matches. A lot of logs ingested to Microsoft Sentinel may come in as a single long string (such as sysmon), parse and split allow you to manipulate them into readable data.\n\nFor these examples, we will use the following test data\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "28e5ecd4-2aa4-4cb2-9572-dcdc38edff17",
        "query_hash": "2ac6538027a2d2586319ce30c69fdf3b711ce24b33f2f6686fbb52f0f3ab2799",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account'\n];\nExampleText\n| parse TestData with * 'Name=' DisplayName ',' *\n| project DisplayName",
        "source_type": "markdown",
        "source_index": 52,
        "query_name": "README_52",
        "context": "\nThis data is just a single string that looks like this.\n\n![Parse](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/parse.png?raw=true)\n\nWe can parse out particular data matches with the following\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "18e701da-af16-45a9-922f-10355a8e412b",
        "query_hash": "72318b20347d5f0219468f16cf4628337d930aa2ecfe4830e8f796bbac4663ce",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account'\n];\nExampleText\n| parse TestData with * 'Name=' DisplayName ',UPNSuffix=' DomainSuffix ',AadTenantId=' AzureADTenantId ',' *\n| project DisplayName, DomainSuffix, AzureADTenantId",
        "source_type": "markdown",
        "source_index": 53,
        "query_name": "README_53",
        "context": "\nThis will parse all the data between Name= and , to a new column called 'DisplayName'.\n\n![Parse 1](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/parse1.png?raw=true)\n\nYou can parse out multiple columns within the same command by matching along the string\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "b96c3528-de0e-4a40-9e3c-9a9e1e93d918",
        "query_hash": "1d63b4083b1d2639fa0c498c6fd78ad4947415263754b47323941a85798d0ce0",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n];\nExampleText\n| parse TestData with * 'Name=' DisplayName ',UPNSuffix=' DomainSuffix ',AadTenantId=' AzureADTenantId ',' *\n| project DisplayName, DomainSuffix, AzureADTenantId\n| parse DomainSuffix with * '.' TopLevelDomain\n| project DisplayName, DomainSuffix, TopLevelDomain, AzureADTenantId",
        "source_type": "markdown",
        "source_index": 54,
        "query_name": "README_54",
        "context": "\nThis parses three new columns - DisplayName, DomainSuffix and AzureADTenantId\n\n![Parse 2](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/parse2.png?raw=true)\n\nRemembering that KQL runs its operations sequentially, once we parse we can then parse again on the newly created column.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "0980c27b-349a-47e6-bd82-8f0a236648dc",
        "query_hash": "be4d306aead485d4b5918c51f45b7dc637c7aff635255ccce33116bfb014da1c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n'Display=Reprise99,UPN=testdomain.com,AadDirectoryId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadObjectId=cf6f2df6-b754-48dc-b7bc-c8339caf211,Name=Test User,AccountType=account'\n]\n;\nExampleText\n| parse TestData with * 'Name=' DisplayName ',UPNSuffix=' DomainSuffix ',AadTenantId=' AzureADTenantId ',' *\n| project DisplayName, DomainSuffix, AzureADTenantId\n| parse DomainSuffix with * '.' TopLevelDomain\n| project DisplayName, DomainSuffix, TopLevelDomain, AzureADTenantId",
        "source_type": "markdown",
        "source_index": 55,
        "query_name": "README_55",
        "context": "\nThis further parses our domain to find the top level domain, in this case a .com\n\n![Parse 3](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/parse3.png?raw=true)\n\nWhen using the parse operator, KQL will run through all your rows of data and return even results where there is no match. So depending on your data structure you could end up with many rows of empty data. If we expand our example data to include another row of data, with different names and run the same query you will see empty results.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "865cdd80-4be6-4e7e-b86e-fc4cca8d3943",
        "query_hash": "38d53f78ff19b511d87402996f42c9a5e4853fc2a7ae68329a52e4c378de8232",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n'Display=Reprise99,UPN=testdomain.com,AadDirectoryId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadObjectId=cf6f2df6-b754-48dc-b7bc-c8339caf211,Name=Test User,AccountType=account'\n]\n;\nExampleText\n| parse-where TestData with * 'Name=' DisplayName ',UPNSuffix=' DomainSuffix ',AadTenantId=' AzureADTenantId ',' *\n| project DisplayName, DomainSuffix, AzureADTenantId\n| parse DomainSuffix with * '.' TopLevelDomain\n| project DisplayName, DomainSuffix, TopLevelDomain, AzureADTenantId",
        "source_type": "markdown",
        "source_index": 56,
        "query_name": "README_56",
        "context": "\n![Parse 4](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/parse4.png?raw=true)\n\nTo combat this you can use the 'parse-where' operator, which only returns results where there are matches to your query.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "4ab04486-3c84-45bb-9292-7979a8bcf02c",
        "query_hash": "00f2018af63ad1d7547bc679cbb6b1a722869ff85b3e06a764f66602a1d2e6f6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n]\n;\nExampleText\n| extend SplitData = split(TestData,',')\n| project SplitData",
        "source_type": "markdown",
        "source_index": 57,
        "query_name": "README_57",
        "context": "\nWe can see we are back to a single result where we had a match on our parse.\n\n![Parse 5](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/parse5.png?raw=true)\n\nSplit separates a string of text into an array based on a delimiter. If we go back to our original test data, we can split based on the comma sign.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "7a43d386-c59f-4772-bf56-a1d5e0e5fcdc",
        "query_hash": "b7172832049b65a2e7d78a8c9919a8879094e24a2f931d265d77b5d6c9e2a0a6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n]\n;\nExampleText\n| extend Name = split(TestData,',')[0]\n| extend DomainSuffix = split(TestData,',')[1]\n| extend AzureADTenantId = split(TestData,',')[2]\n| extend AzureADUserId = split(TestData,',')[3]\n| extend DisplayName = split(TestData,',')[4]\n| extend AccountType = split(TestData,',')[5]\n| project Name, DomainSuffix, AzureADTenantId, AzureADUserId, DisplayName, AccountType",
        "source_type": "markdown",
        "source_index": 58,
        "query_name": "README_58",
        "context": "\nWe will be returned an array with our string split out.\n\n![Split 1](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/split1.png?raw=true)\n\nSplit is index aware so if your data is in the same order, you can split directly into new columns.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "9a77d8d2-2d76-4a15-a164-9de1dc5e7174",
        "query_hash": "6fcd4a94dbb0b0530b4945d56a72ee9c565426a32b54ea223a342bbb4ce16108",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CREADME.md",
        "query": "let ExampleText = datatable(TestData:string)\n[\n'Name=Reprise99,UPNSuffix=testdomain.com,AadTenantId=345c1234-a833-43e4-1d34-123440a5bcdd1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User,Type=account',\n'Name=Reprise103,UPNSuffix=testdomain.com,AadTenantId=331c1234-a841-43e5-1d31-12220a5bcee1,AadUserId=cf6f2df6-b754-48dc-b7bc-c8339caf211,DisplayName=Test User 2,Type=account'\n]\n;\nExampleText\n| extend Name = split(TestData,',')[0]\n| extend DomainSuffix = split(TestData,',')[1]\n| extend AzureADTenantId = split(TestData,',')[2]\n| extend AzureADUserId = split(TestData,',')[3]\n| extend DisplayName = split(TestData,',')[4]\n| extend AccountType = split(TestData,',')[5]\n| project Name, DomainSuffix, AzureADTenantId, AzureADUserId, DisplayName, AccountType\n| where Name contains \"Reprise99\"",
        "source_type": "markdown",
        "source_index": 59,
        "query_name": "README_59",
        "context": "\nIf we know our data location within the string then we can split it directly into named columns.\n\n![Split 2](https://github.com/reprise99/Sentinel-Queries/blob/main/Diagrams/split2.png?raw=true)\n\nOnce we have split our data, we can query it as though it was structured from the outset. So if we add a second record to our data, then query on specifc matches we will find what we are after.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "d7bdc719-db17-4534-98d7-46a6dbe78ee8",
        "query_hash": "e04587d898f723719a9d361f3b5d43eeeed92acadce7d1f7e37a6b309091907c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "SigninLogs\n| where AppDisplayName in~ (\"Azure Active Directory PowerShell\",\"Microsoft Graph PowerShell\",\"Microsoft Azure PowerShell\") or UserAgent contains \"WindowsPowerShell\"\n| project TimeGenerated, AppDisplayName, UserPrincipalName, IPAddress, UserAgent",
        "source_type": "markdown",
        "source_index": 0,
        "query_name": "### Detection Query (User as actor)",
        "context": "I have also included recommendations to control the abuse in your tenant. Again, these controls are not to stop the specific use of the BARK toolkit. Rather to prevent or enforce guardrails around the behavior itself.\n\n## BARK Function - Get-AZRefreshTokenWithUsernamePassword // Get-MSGraphTokenWithClientCredentials // Get-AzureRMTokenWithClientCredentials\n\nTo retrieve a refresh token for Azure AD or Microsoft Graph, you need to sign into a tenant. Obviously any Azure AD tenant is going to have a lot of sign ins, so you can try to limit your query to log on events where the application being accessed is the Azure AD PowerShell Module, the Microsoft Graph PowerShell module, or where the UserAgent contains PowerShell. Of course, not all these signins are malicious, but depending on your environment they may be suspicious.\n\nFor this abuse, the actor can be either a user or a service principal.\n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "eabad1e3-bf4e-4399-b5d3-678912cd69e6",
        "query_hash": "e8736c4dcd679856d78f187fed32263b6b38418af835d6502d1ee174b05524c6",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Reset user password\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend UserAgent = tostring(AdditionalDetails[0].value)\n| where UserAgent contains \"WindowsPowerShell\"\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, UserAgent",
        "source_type": "markdown",
        "source_index": 1,
        "query_name": "### Detection Query (User as actor)",
        "context": "More broadly, you should try to restrict access to Azure management interfaces via Conditional Access to only known devices (such as privileged workstations) - https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices \n\n## BARK function - Set-AZUserPassword // Reset-AZUserPassword\n\nPassword resets are common in any Azure AD environment, so you can potentially query on password resets that are invoked via a WindowsPowerShell user agent. \n\nCurrently the resetPassword action can only be run under user context.\n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "0f7e4bd0-8fa1-4912-b477-c95fd93ae35d",
        "query_hash": "9162ae2c6746d591bc22cc439a6a39d5bbf6cb7e88f1b6bca86db367de41de2d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName has \"Update application \u2013 Certificates and secrets management\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Target Application Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Application ObjectId'] = tostring(TargetResources[0].id)\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Target Application Name'], ['Target Application ObjectId']",
        "source_type": "markdown",
        "source_index": 2,
        "query_name": "### Detection Query (User as actor)",
        "context": "## BARK function - New-AppRegSecret // Test-MGAddSecretToApp\n\nA secret or certificate for an application in Azure AD is the equivalent of a password. With the client id, the id of your Azure AD tenant and the secret or certificate, you can authenticate as the application. You then inherit the permission that has been granted to it. It is important to keep track when secrets are generated onto applications as it can be a sign of compromise.\n\nFor example, a user or another service principal may have the Application Admin role or have Application.ReadWrite.all Microsoft Graph access. That means they can create a secret on any application in the tenant (even one with higher privilege than itself), authenticate as it, and assume the privilege.\n\nFor this abuse, the actor can be either a user or a service principal.\n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "bfdc4ead-e21d-4fdf-b557-537d0ae4e421",
        "query_hash": "8d6c64457927d09a134522ef148588f4c707b6da76a6d60ec603260a4039e844",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName has \"Update application \u2013 Certificates and secrets management\"\n| extend ['Service Principal Actor Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Service Principal Actor ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| extend ['Target Application Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Application ObjectId'] = tostring(TargetResources[0].id)\n| where isnotempty( ['Service Principal Actor ObjectId'])\n| project TimeGenerated, OperationName, ['Service Principal Actor Name'], ['Service Principal Actor ObjectId'], ['Target Application Name'], ['Target Application ObjectId']",
        "source_type": "markdown",
        "source_index": 3,
        "query_name": "### Detection Query (Service principal as actor)",
        "context": "\n### Detection Query (Service principal as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "494b0ba7-7b96-431e-9cfd-9b9b3dcf3a05",
        "query_hash": "6ecfe18e5f954d051b6ec598b6759458808c4170deb154895d7106742b7f98f5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add service principal credentials\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Target Service Principal Name'], ['Target Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 4,
        "query_name": "### Detection Query (User as actor)",
        "context": "Access to add credentials to applications should be restricted to administrative staff only. The Application Administrator role is extremely privileged as it can create credentials for any application in your tenant. \n\n## BARK function - New-ServicePrincipalSecret // Test-MGAddSecretToSP \n\nAdding a credential to a Service Principal is similar to adding credentials to an application object. The event in our hunting is slightly different however. \n\nFor this abuse, the actor can be either a user or a service principal.\n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "ae80f53c-07aa-4521-ad2a-1debd2da8096",
        "query_hash": "ac976ee807f5949c0862bcb92e6b9cadb9487fd088a26cd64d1f03014a9fa752",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add service principal credentials\"\n| extend ['Service Principal Actor Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Service Principal Actor ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| where ['Service Principal Actor Name'] != \"Managed Service Identity\"\n| where isnotempty( ['Service Principal Actor ObjectId'])\n| project TimeGenerated, OperationName, ['Service Principal Actor Name'], ['Service Principal Actor ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 5,
        "query_name": "### Detection Query (Service principal as actor)",
        "context": "\n### Detection Query (Service principal as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "736f85af-ef4c-440a-8bf4-b3947d2ab522",
        "query_hash": "f8ade2fedcf8376b8a3c318d86e214e852d9488207b9a7542d8fe1e8c3f424f3",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add app role assignment to service principal\"\n| where Result == \"success\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ['App Role Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['App Role Name']",
        "source_type": "markdown",
        "source_index": 6,
        "query_name": "### Detection Query (User as actor)",
        "context": "Similar to applications, access to add credentials to service principals should be restricted to administrative staff only. The Application Administrator role is extremely privileged as it can create credentials for any application in your tenant. \n\n## BARK function - New-AppRoleAssignment // Test-MGAddSelfToMGAppRole\n\nAdding an app role assignment to a service prinicipal is effectively granting it privilege. It could be privilege to your own internal APIs, or to Microsoft Graph. For instance, you may add the 'Mail.ReadWrite.All' app role to a service principal. This grants it full read/write access to all the mailboxes in your Office 365 tenant. \n\nFor this abuse, the actor can be both a user and a service principal. \n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "f4bb8583-f7ef-41ea-b07d-5ee174d39a94",
        "query_hash": "48b92d607afe96856522d8933643c470f0e1af50468157c66cc45cc613090614",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add app role assignment to service principal\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| where TargetResources[0].type == \"ServicePrincipal\"\n| where isnotempty(['Actor Service Principal ObjectId'])\n| extend ['Target Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[6].newValue)))\n| extend ['Target Service Principal ObjectId'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[5].newValue)))\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId'], RoleAdded",
        "source_type": "markdown",
        "source_index": 7,
        "query_name": "### Detection Query (Service principal as actor)",
        "context": "\n### Detection Query (Service principal as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "e1b1bba2-2ead-4f2c-9e41-a054c0f043a3",
        "query_hash": "e0036a680cd1e2201c60f227bab2566dddc366805a5029d0643a4ee2c6486b2c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add application\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Application Created Name'] = tostring(TargetResources[0].displayName)\n| extend ['Application Created ObjectId'] = tostring(TargetResources[0].id)\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Application Created Name'], ['Application Created ObjectId']",
        "source_type": "markdown",
        "source_index": 8,
        "query_name": "### Detection Query (User as actor)",
        "context": "Access to grant app role assignments should be limited to administrative users and service principals. Alerting should be configured for all app role assignments to ensure that they aren't malicious and the role assigned is fit for purpose.\n\n## BARK function - New-TestAppReg \n\nNew application objects can be created by users or by other service principals. If not expected, these can be a sign of persistence in your tenant and if granted enough privilege a sign of privilege escalation.\n\nFor this abuse, the actor can be either a user or a service principal.\n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "ad57d2d9-168f-4028-ba72-bd2a0ed461cc",
        "query_hash": "d2891cee424fbbea7d926a2fff7fd2b3cd33ec68bb4bdd9be5cb4d2946673df5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add application\"\n| extend ['Application Created Name'] = tostring(TargetResources[0].displayName)\n| extend ['Application Created ObjectId'] = tostring(TargetResources[0].id)\n| extend ['Service Principal Actor ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| extend ['Service Principal Actor Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| where isnotempty( ['Service Principal Actor ObjectId'])\n| project TimeGenerated, OperationName, ['Service Principal Actor Name'], ['Service Principal Actor ObjectId'], ['Application Created Name'], ['Application Created ObjectId']",
        "source_type": "markdown",
        "source_index": 9,
        "query_name": "### Detection Query (Service principal as actor)",
        "context": "\n### Detection Query (Service principal as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "f4dd2e99-d954-42f8-bea3-5cec7b9afc90",
        "query_hash": "08efcdc9ac8f63ddacebd807dfaa2d431c42c328ba8aea6756047c671297996c",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add service principal\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ['Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| extend ['Service Principal Name'] = tostring(TargetResources[0].displayName)\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Service Principal Name'], ['Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 10,
        "query_name": "### Detection Query (User as actor)",
        "context": "Limit the ability to create applications in Azure AD and Microsoft Graph to those users and service prinicipals that require it. Enforce Conditional Access policies to access Azure management interfaces for both users and service principals.\n\n## BARK function - New-TestSP \n\nA new service principal is created in your tenant a number of ways. If you create an application object in the Azure AD portal, an equivalent service principal object is created. If you install a third party app, into for example, Teams, then only a service principal object is created. They are also created for Managed Identities in Azure AD.\n\nFor this abuse, the actor can be either a user or a service principal.\n\n### Detection Query (User as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "a7044e8f-892b-4e86-80eb-f2ecea9a82bd",
        "query_hash": "482797bb3990b73b2160d6edc0d7c8df117a8f117a74ab3a27be532edf47c031",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add service principal\"\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Service Principal Created Name'] = tostring(TargetResources[0].displayName)\n| extend ['Service Principal Created ObjectId'] = tostring(TargetResources[0].id)\n| where ['Actor Service Principal Name'] != \"Managed Service Identity\"\n| where isnotempty(['Actor Service Principal ObjectId'])\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Service Principal Created Name'], ['Service Principal Created ObjectId']",
        "source_type": "markdown",
        "source_index": 11,
        "query_name": "### Detection Query (Service principal as actor)",
        "context": "\n### Detection Query (Service principal as actor)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "e24c7f76-7f4b-4f9d-95b5-97f3257ed8b3",
        "query_hash": "ca8fc74dbe66a6990befa7bb17ebb217c9c6cb3a1f4a3a938773f41fdb04b47d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to application\"\n| where TargetResources[0].type == \"User\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend ['Application Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Application ObjectId'] = tostring(TargetResources[1].id)\n| where isnotempty( Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, ['Application Name'], ['Application ObjectId']",
        "source_type": "markdown",
        "source_index": 12,
        "query_name": "### Detection Query (User as actor, user as target)",
        "context": "The ability to add applications and service principals should be limited to administrative staff. Regular users should be blocked from adding applications to your tenant and the admin consent workflow should be configured - https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/configure-admin-consent-workflow\n\n## BARK function - Test-MGAddSelfAsOwnerOfApp \n\nAdding owners to app registrations allows them to change settings of the application, for example they can update redirect URI addresses. Importantly an owner of an application object can generate new secrets for that application. They can then authenticate as it and assume the privilege it holds.\n\nFor this abuse, the actor can be either a user or a service principal. The target can also be either a user or a service principal.\n\n### Detection Query (User as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "8a1496ab-4c82-46b6-be05-10180a2a6585",
        "query_hash": "0c609605c12a740bc5550b8c406b0dbdf5a953a8852bd6ac27176a257c12fd51",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to application\"\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ['Target Application Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Target Application ObjectId'] = tostring(TargetResources[1].id)\n| extend ['Subject Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Subject Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| where isnotempty( Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Target Application Name'], ['Target Application ObjectId'], ['Subject Service Principal Name'], ['Subject Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 13,
        "query_name": "### Detection Query (User as actor, service principal as target)",
        "context": "\n### Detection Query (User as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "48d5b864-c465-4ab6-858b-e6301f37e770",
        "query_hash": "1b00dd02d6b7a8a791feb31e60a747a5f37a8dcefb5c0ce8477e2839fde80007",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to application\"\n| where TargetResources[0].type == \"User\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty(['Actor Service Principal ObjectId'])\n| extend ['Subject Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Subject Service Principal ObjectId'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Subject Service Principal Name'], ['Subject Service Principal ObjectId'], Target",
        "source_type": "markdown",
        "source_index": 14,
        "query_name": "### Detection Query (Service principal as actor, user as target)",
        "context": "\n### Detection Query (Service principal as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "040263ce-1450-4d3e-b5c0-baad03519c90",
        "query_hash": "d809921bf957a86841e735890c03df7cefd48aa4d8ecba9b1af42ee40d93ec49",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to application\"\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty(['Actor Service Principal ObjectId'])\n| extend ['Subject Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Subject Service Principal ObjectId'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Subject Service Principal Name'], ['Subject Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 15,
        "query_name": "### Detection Query (Service Principal as actor, service principal as target)",
        "context": "\n### Detection Query (Service Principal as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "3fdb1fa7-e968-4ad6-be1d-2d0aa630a849",
        "query_hash": "deab652bb1ad1fece306aa7274b341a49fec1d9e752804dad1a0956c8b987876",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to service principal\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Service Principal ObjectId'] = tostring(TargetResources[1].id)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where TargetResources[0].type == \"User\"\n| where isnotempty(Actor)\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, ['Service Principal Name'], ['Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 16,
        "query_name": "### Detection Query (User as actor, user as target)",
        "context": "\n\n## BARK function - Test-MGAddSelfAsOwnerOfSP \n\nOwners of service principals can change settings on that object, for instance they can add or remove users who have access to sign into that service principal. They can change SSO settings and change permissions on the service principal.\n\nFor this abuse, the actor can be either a user or a service principal. The target can also be either a user or a service principal.\n\n### Detection Query (User as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "47bc03e9-d2ce-427a-a799-d0edcec62cb1",
        "query_hash": "d7cc7b54dfe0e752885b2d833672c587df342564ea955e62e785d5edbc66b869",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to service principal\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where TargetResources[0].type == \"ServicePrincipal\"\n| where isnotempty(Actor)\n| extend ['Subject Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| extend ['Subject Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Target Service Principal ObjectId'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)))\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Subject Service Principal Name'], ['Subject Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 17,
        "query_name": "### Detection Query (User as actor, Service Principal as target)",
        "context": "\n### Detection Query (User as actor, Service Principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "cee5d80a-fbc0-4b25-9a63-7a7dd9e9fb00",
        "query_hash": "0e7f5d0e16f35512503885a205178eb0d540b78ddb35b47231f76f4e8c40f7bd",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to service principal\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty( ['Actor Service Principal ObjectId'])\n| extend ['Target Service Principal Name'] = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[1].id)\n| where TargetResources[0].type == \"User\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId'],Target",
        "source_type": "markdown",
        "source_index": 18,
        "query_name": "### Detection Query (Service Principal as actor, user as target)",
        "context": "\n### Detection Query (Service Principal as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "df576ced-1e6c-435a-bb50-499884321792",
        "query_hash": "acb7850b43eaf00e93151483a8b48d25759714a9e929cff207f26a0ad588ef3d",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to service principal\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty( ['Actor Service Principal ObjectId'])\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| where TargetResources[0].type == \"ServicePrincipal\"\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId']",
        "source_type": "markdown",
        "source_index": 19,
        "query_name": "### Detection Query (Service principal as actor, Service Principal as target)",
        "context": "\n### Detection Query (Service principal as actor, Service Principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "bd71b23c-a6a2-404e-ae43-ff4487ce3651",
        "query_hash": "405622a04d408dd2363699d67404ea4a295f4295542590551d8e2546e1d87806",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to role\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where TargetResources[0].type == \"User\"\n| where Identity != \"MS-PIM\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, RoleAdded",
        "source_type": "markdown",
        "source_index": 20,
        "query_name": "### Detection Query (User as actor, user as target)",
        "context": "Ownership of service principals should be assigned on as needed basis. Owners of service principal have the ability to configure the service principal and generate additional credentials. Changes to service principals, especially credential creation should be audited.\n\n## BARK function - Test-MGAddSelfToAADRole\n\nAzure AD roles govern what users and service principals have access to within a tenant. When a user or service principal is added to a role, they then gain added privilege. For instance a SharePoint Admininstrator can manage all aspects of SharePoint.\n\nFor this abuse, the actor can be either a user or a service principal. The target can also be either a user or a service principal.\n\n### Detection Query (User as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "a0d08429-0ee2-49cb-b2d6-501d5ca554d9",
        "query_hash": "ebe5bf6631a3b22bc59f3695c7a267ab1f868b10ad265aaf3c234e544912caa5",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to role\"\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| where Identity != \"MS-PIM\"\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend ['Service Principal Name Added'] = tostring(TargetResources[0].displayName)\n| extend ['Service Principal ObjectId Added'] = tostring(TargetResources[0].id)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Service Principal Name Added'], ['Service Principal ObjectId Added'],RoleAdded",
        "source_type": "markdown",
        "source_index": 21,
        "query_name": "### Detection Query (User as actor, service principal as target)",
        "context": "\n### Detection Query (User as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "d2549f75-0b57-426c-b891-7961e299fd81",
        "query_hash": "8284fbcdf57039f9e1819d307857c88b1bfc515ecbdbb0f746c2ba01daa6e7af",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to role\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where TargetResources[0].type == \"User\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'],Target, RoleAdded",
        "source_type": "markdown",
        "source_index": 22,
        "query_name": "### Detection Query (Service principal as actor, user as target)",
        "context": "\n### Detection Query (Service principal as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "0e73aaeb-1821-4a23-89c9-5c3df4e884f7",
        "query_hash": "8ea7f877fb258b592f07b6062b6bb6a70b7bebf715c521f0439d31fdb852bb38",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to role\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty( ['Actor Service Principal ObjectId'])\n| where ['Actor Service Principal Name'] != \"MS-PIM\"\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'],['Target Service Principal Name'], ['Target Service Principal ObjectId'], RoleAdded",
        "source_type": "markdown",
        "source_index": 23,
        "query_name": "### Detection Query (Service principal as actor, service principal as target)",
        "context": "\n### Detection Query (Service principal as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "6e33ece9-e4f8-4bec-9c79-47e9ab641927",
        "query_hash": "c2cfba4ccdbaee31bf3a86d2e6ce32e0c8a182ea4f758cbb5f258f2ebf1210c1",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where TimeGenerated > ago(30m)\n| where OperationName == \"Add owner to group\"\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| where TargetResources[0].type == \"User\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, GroupName",
        "source_type": "markdown",
        "source_index": 24,
        "query_name": "### Detection Query (User as actor, user as target)",
        "context": "## BARK function - Test-MGAddOwnerToRoleEligibleGroup \n\nA role eligible group is an Azure AD group that has been assigned an Azure AD role. By adding an owner to one of those groups, that person can then manage membership to the group. When a user is added to the grouop they gain access to the Azure AD role. An owner can also potentially delete the group.\n\nThe Azure AD audit log doesn't differentiate between an owner being added to a regular group or a role assignable group. I have added a placeholder field for specific group names you want to monitor.\n\nFor this abuse, the actor can be either a user or a service principal. The target can also be either a user or a service principal.\n\n### Detection Query (User as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "371cbca3-3cfe-4d88-ba45-a825d13093e6",
        "query_hash": "ccf9916916e4d25dc0e6dc61336140356503e094c153081d4e1baf31140b5c21",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where TimeGenerated > ago(30m)\n| where OperationName == \"Add owner to group\"\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Target Service Principal Name'], ['Target Service Principal ObjectId'], GroupName",
        "source_type": "markdown",
        "source_index": 25,
        "query_name": "### Detection Query (User as actor, service principal as target)",
        "context": "\n### Detection Query (User as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "f87e48f0-6b16-423e-b973-1e9580334d37",
        "query_hash": "bab788ccd5a29dde8079175fc49daff9ef343fd6228b23df0923be28018953ce",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add owner to group\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty(['Actor Service Principal ObjectId'])\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| where TargetResources[0].type == \"User\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], Target, GroupName",
        "source_type": "markdown",
        "source_index": 26,
        "query_name": "### Detection Query (Service principal as actor, user as target)",
        "context": "\n### Detection Query (Service principal as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "a0bf2d41-12f0-46bb-9dae-c5a52d68e3fe",
        "query_hash": "ed9b8e59cf636b7bb8ef9947d302a86ff8662fba1ab01be0f0be632b26a6ffc7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where TimeGenerated > ago(30m)\n| where OperationName == \"Add owner to group\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty(['Actor Service Principal ObjectId'])\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].displayName)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].id)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId'], GroupName",
        "source_type": "markdown",
        "source_index": 27,
        "query_name": "### Detection Query (Service Principal as actor, service principal as target)",
        "context": "\n### Detection Query (Service Principal as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "c7ce9a1c-939d-4d11-8b4d-202397bc62bd",
        "query_hash": "ae0d78c107165faa73039d13aea1a2a616010f4c4862eb9a0971c64618ebb3ce",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to group\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| where TargetResources[0].type == \"User\"\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], Target, GroupName",
        "source_type": "markdown",
        "source_index": 28,
        "query_name": "### Detection Query (User as actor, user as target)",
        "context": "## BARK function - Test-MGAddMemberToRoleEligibleGroup \n\nA role eligible group is an Azure AD group that has been assigned an Azure AD role. By adding a member to one of those groups, that user or service principal then has access to the Azure AD role. \n\nThe Azure AD audit log doesn't differentiate between an member being added to a regular group or a role assignable group. I have added a placeholder field for specific group names you want to monitor.\n\nFor this abuse, the actor can be either a user or a service principal. The target can also be either a user or a service principal.\n\n### Detection Query (User as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "ba3be330-092d-4475-9f40-0924f921618f",
        "query_hash": "f3ba03aa8e89e16e6a1bae392501d667aa5781b1085b81083812709e8d14baab",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to group\"\n| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend ['Actor IP Address'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].id)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].displayName)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| where TargetResources[0].type == \"ServicePrincipal\"\n| project TimeGenerated, OperationName, Actor, ['Actor IP Address'], ['Target Service Principal Name'], ['Target Service Principal ObjectId'], GroupName",
        "source_type": "markdown",
        "source_index": 29,
        "query_name": "### Detection Query (User as actor, Service Principal as target)",
        "context": "\n### Detection Query (User as actor, Service Principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "9da6e495-ca3c-42b5-b9ec-9cac74af1802",
        "query_hash": "5ecab0ae64a724e1ce2eaa639be53d155fa62c180b1b6ccff50b425c26ddb28a",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to group\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty(['Actor Service Principal ObjectId'])\n| where ['Actor Service Principal Name'] != \"MS-PIM\"\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| where TargetResources[0].type == \"User\"\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| extend Target = tostring(TargetResources[0].userPrincipalName)\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], Target, GroupName",
        "source_type": "markdown",
        "source_index": 30,
        "query_name": "### Detection Query (Service Principal as actor, user as target)",
        "context": "\n### Detection Query (Service Principal as actor, user as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "60e07658-9883-4d28-954e-04a4d25adc51",
        "query_hash": "02a72825f13797d0070df3e0661e8c0060dced55374e04232c5f2ce801389a4b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CAzure%20AD%20Abuse%20Detection%5CREADME.md",
        "query": "AuditLogs\n| where OperationName == \"Add member to group\"\n| extend ['Actor Service Principal Name'] = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend ['Actor Service Principal ObjectId'] = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId)\n| where isnotempty(['Actor Service Principal ObjectId'])\n| where ['Actor Service Principal Name'] != \"MS-PIM\"\n| where TargetResources[0].type == \"ServicePrincipal\"\n| extend GroupName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))\n| extend ['Target Service Principal Name'] = tostring(TargetResources[0].id)\n| extend ['Target Service Principal ObjectId'] = tostring(TargetResources[0].displayName)\n| where GroupName in~ (\"PrivilegedGroup1\",\"PrivilegedGroup2\")\n| project TimeGenerated, OperationName, ['Actor Service Principal Name'], ['Actor Service Principal ObjectId'], ['Target Service Principal Name'], ['Target Service Principal ObjectId'], GroupName",
        "source_type": "markdown",
        "source_index": 31,
        "query_name": "### Detection Query (Service Principal as actor, service principal as target)",
        "context": "\n### Detection Query (Service Principal as actor, service principal as target)\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "3c48ded8-32d3-438c-95ac-1a1c50aa7d3c",
        "query_hash": "377071b506c21151728898e30e2c0e7eecc6da1fd9f9c6a2d7cd9c608e870929",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "SigninLogs\n| take 10",
        "source_type": "markdown",
        "source_index": 0,
        "query_name": "## Azure AD Signin Logs",
        "context": "While both Microsoft Sentinel and Advanced Hunting leverage KQL, there are differences in schema in certain tables. For instance, TimeGenerated is used in Sentinel while Timestamp is used in Advanced Hunting.\n\nThe below tables are designed to help you convert queries between the two products.\n\n## Azure AD Signin Logs\n\nFor Microsoft Sentinel sign in logs are kept in two separate tables.\n\nSigninLogs - for interactive signins\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "6595d13f-754d-4199-8107-492da78c3188",
        "query_hash": "6e7046cc51694ff8bed12976542ea34efae5b5faab15e4bf9e332d1115097323",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADNonInteractiveUserSignInLogs\n| take 10",
        "source_type": "markdown",
        "source_index": 1,
        "query_name": "README_1",
        "context": "\nAADNonInteractiveUserSignInLogs - for non-interactive signins\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "b285b1e2-3276-420e-84e2-b099c6f878ae",
        "query_hash": "062c8122037a9cfb23071c0086d5153d8044131dce3f6f4db74f7223d29cbbb2",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADSignInEventsBeta\n| where LogonType == @\"[\"\"interactiveUser\"\"]\"\n| take 10",
        "source_type": "markdown",
        "source_index": 2,
        "query_name": "README_2",
        "context": "\nFor Advanced Hunting both types of logs are kept in the same table, but distinguised by a field.\n\nFor interactive signins\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "c42f82a9-72e3-4935-8cfa-3eb580c26950",
        "query_hash": "aa214a4aaefad62aaa0da0c3b5fecb7f2015f50eee7507d4d315b5c30a02031b",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADSignInEventsBeta\n| where LogonType == @\"[\"\"nonInteractiveUser\"\"]\"\n| take 10",
        "source_type": "markdown",
        "source_index": 3,
        "query_name": "README_3",
        "context": "\nFor non-interactive sigins\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "6f1aa7c3-066b-42a9-b52d-ddf181ac3b7a",
        "query_hash": "1f792fef5817b5a8d7cca7e4f3fb35dbf49423ff9f7dafddec4f373945fc2c92",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADServicePrincipalSignInLogs\n| take 10",
        "source_type": "markdown",
        "source_index": 4,
        "query_name": "## Azure AD Service Principal Signin Logs",
        "context": "| Longitude | SigninLogs <br />\\| extend Longitude = tostring(parse_json(tostring(LocationDetails.geoCoordinates)).longitude) <br />\\| where Longitude contains \"-122\" | AADSignInEventsBeta <br />\\| where Longitude contains \"-122\" | Sentinel keeps Longitude in a nested field and has to be extracted first\n| State |SigninLogs <br />\\| extend State = tostring(LocationDetails.state) <br />\\| where State == \"British Columbia\" | AADSignInEventsBeta <br />\\| where State == \"British Columbia\"  <br /> | Sentinel keeps State in a nested field and has to be extracted first\n| Combined Example | SigninLogs <br />\\| extend State = tostring(LocationDetails.state) <br />\\| where UserType == \"Guest\" and State == \"British Columbia\" <br />and ResultType == \"0\" and AppDisplayName == \"Microsoft Teams\" | AADSignInEventsBeta <br />\\| where IsGuestUser == \"1\" and State == \"British Columbia\" and ErrorCode == \"0\" and Application == \"Microsoft Teams\" | Look for guests in British Columbia successfully signing into Teams |\n\nA number of fields are the same across both tables such as UserAgent or ClientAppUsed, and some only exist in one. For example, Advanced Hunting has LastPasswordChangeTimestamp whereas Sentinel does not. In general, the Sentinel logs are more detailed.\n\n## Azure AD Service Principal Signin Logs\n\nMicrosoft Sentinel keeps service principal sign in logs in two tables. For regular service principals they are sent to the AADServicePrincipalSignInLogs table.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "52b23107-5d49-4a65-a6bc-a23112307a87",
        "query_hash": "0ef5144d30e7656435a665d0af49d0211a8df70f1e66c6927d35a490d404406f",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADManagedIdentitySignInLogs\n| take 10",
        "source_type": "markdown",
        "source_index": 5,
        "query_name": "README_5",
        "context": "\nFor managed identities they are sent to the AADManagedIdentitySignInLogs\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "04b96d9a-f233-478d-9157-1de6c2a67b9f",
        "query_hash": "6b3ec3d4e288aa6e16f20caecbacba08cb1109aa67378a89f7cfdee987ffc165",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADSpnSignInEventsBeta\n| where IsManagedIdentity == 0",
        "source_type": "markdown",
        "source_index": 6,
        "query_name": "README_6",
        "context": "\nFor Advanced Hunting both types of logs are kept in the same table, but distinguised by a field.\n\nFor regular service principals.\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "d06ab97a-7baf-4537-aa88-dd179b1385d9",
        "query_hash": "f6fee0a71b70564a37687fc50a53ecf3cf7499e8cec38b93c8f83ddfb06d1ad7",
        "query_version": 0
    },
    {
        "source_path": "https://github.com/reprise99/Sentinel-Queries/tree/main%5CSentinel%20vs%20Advanced%20Hunting%5CREADME.md",
        "query": "AADSpnSignInEventsBeta\n| where IsManagedIdentity == 1",
        "source_type": "markdown",
        "source_index": 7,
        "query_name": "README_7",
        "context": "\nFor managed identities\n",
        "attributes": {},
        "kql_properties": {},
        "query_id": "528ba640-5eab-4085-8b47-c9f6e0a58465",
        "query_hash": "5d7afc510ce78de99fcb34407bd7c2518a8319eb7ec4b0224fc648f278c63068",
        "query_version": 0
    }
]