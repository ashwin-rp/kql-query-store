// https://github.com/Azure/Azure-Sentinel/blob/master/Hunting%20Queries/SigninLogs/UserLoginIPAddressTeleportation.yaml

let windowTime = 20min / 2; //Window to lookup anomalous logins within
let excludeKnownVPN = dynamic(['127.0.0.1', '0.0.0.0']); //Known VPN IP addresses to exclude
SigninLogs
| where ConditionalAccessStatus =~ "success"
| extend country = LocationDetails['countryOrRegion']
| where country != ""
| summarize count() by tostring(country)
| join (
    //Get the total number of logins from any country and join it to the previous count in a single table
    SigninLogs
    | where ConditionalAccessStatus =~ "success"
    | extend country = LocationDetails['countryOrRegion']
    | where country != ""
    | summarize count(), make_list(tostring(country))
    | mv-expand list_country
    | extend country = tostring(list_country)
) on country
| summarize by country, count_, count_1
//Now calculate each countries prevalence within login events
| extend prevalence = toreal(count_) / toreal(count_1) * 100
| project-away count_1
| where prevalence < 0.01
| join kind=rightsemi(
    SigninLogs
    //Enable to limit to o365 exchange logins
    //| where AppDisplayName =~ "Office 365 Exchange Online"
    | where ConditionalAccessStatus =~ "success"
    | where IPAddress != ""
    | extend country = tostring(LocationDetails['countryOrRegion'])
    | summarize count() by TimeGenerated, UserPrincipalName, country, IPAddress
) on country
| join kind=leftouter (
    SigninLogs
    //Enable to limit to o365 exchange logins
    //| where AppDisplayName =~ "Office 365 Exchange Online"
    | where ConditionalAccessStatus =~ "success"
    | extend country = tostring(LocationDetails['countryOrRegion'])
    | summarize by TimeGenerated, IPAddress, UserPrincipalName, country
) on UserPrincipalName
| where IPAddress != IPAddress1 and country != country1
| extend WindowStart = TimeGenerated1 - windowTime
| extend WindowEnd = TimeGenerated1 + windowTime
| where TimeGenerated between (WindowStart .. WindowEnd)
| project Account=UserPrincipalName, AnomalousIP=IPAddress, AnomalousLoginTime=TimeGenerated, AnomalousCountry=country, OtherLoginIP=IPAddress1, OtherLoginCountry=country1, OtherLoginWindowStart=WindowStart, OtherLoginWindowEnd=WindowEnd
| where AnomalousIP !in(excludeKnownVPN) and OtherLoginIP !in(excludeKnownVPN)
| extend timestamp = AnomalousLoginTime, AccountCustomEntity = Account, IPCustomEntity = AnomalousIP